#!/usr/bin/env python

"""
update_bcl.py - Alter the Rosetta distribution for an updated BCL

Run this program in the main/source/external/bcl directory

Author: Jeffrey Mendenhall (jeffreymendenhall@gmail.com),
Benjamin P. Brown (benjamin.p.brown17@gmail.com)
"""

import sys, os
import shutil

"""
Details:
Run through BCL header and source files to prepare them for compilation with
Rosetta via scons. Specifically, we need to prepare a bcl.external.settings file.
However, there are too many independent source files and the argument list to scons
is too large for a single compilation. Instead of doing the compilation in stages,
this script will just concatenate a number of .cpp files from each namespace together.
This is a bit of a hacky solution and will likely need to be updated in the future as the
BCL continues to grow. So in the end, we will write out a bcl.external.settings
file from the sources list, such that it can be compiled by the Rosetta scons compiler.
"""

def get_headers(directory):
    """Get all the headers in the tree, not just the ones listed in the
    CMake file. (Which only list the "public" ones.)"""
    headers = {}
    for (dirpath, dirnames, filenames) in os.walk( directory+"/include" ):
        headers[ dirpath] = [fn for fn in filenames \
                     if fn.endswith(".h") or fn.endswith(".hpp")]
    return headers

def get_sources(directory):
    """Get all the headers in the tree, not just the ones listed in the
    CMake file. (Which only list the "public" ones.)"""
    sources = {}
    os.system('rm -f '+directory+'/bcl_source* '+directory+'/*/bcl_source* ')
    for (dirpath, dirnames, filenames) in os.walk( directory+"/source" ):
        if dirpath.rsplit('/',1)[1] in ['chemistry','io','descriptor','sspred']:
            sources[dirpath]=[x for x in filenames if x.endswith('.cpp')]
        else:
            p=dirpath.replace('/','_')+'.cpp'
            os.system('cat ' +dirpath + '/*.cpp > '+dirpath+'/../'+p)
            if dirpath.rsplit('/',1)[0] not in sources:
                sources[dirpath.rsplit('/',1)[0]]=[]

            sources[dirpath.rsplit('/',1)[0]].append( p)
    return sources


def parse_files(directory):

    headers = get_headers(directory)
    sources = get_sources(directory)

    #Now remove some know bad entries which are handled manually.
    cleaned_headers = []
#     header_dirs=headers.keys()
    cleaned_sources = {}
    for dr,fn in sources.items():
        if "opencl" in dr: continue # Python wrapper code
        if "openblas" in dr: continue # Python wrapper code
        if "bzip" in dr: continue # Alternate parser - not needed, requires regex
        cleaned_sources[dr]=[x for x in fn if x.replace('.cpp','').replace('bcl_source_','') not in ['opencl','openblas','bzip2']]
    for dr in headers:
        if "opencl" in dr: continue # Python wrapper code
        if "openblas" in dr: continue # Python wrapper code
        if "bzip" in dr: continue # Alternate parser - not needed, requires regex
        cleaned_headers.append(dr)

#     return header_dirs,cleaned_sources
    return cleaned_headers,cleaned_sources

def clean():
    # Remove unnecessary files and directories
    os.system('rm -rf .svn/ example/ example_check_log/')

    # Change any bz2 files to gz compression
    os.system('for i in `find ./ -name "*.bz2"`; do tag=`echo $i | sed "s:.bz2::g"`; rm -f $tag ${tag}.gz ; bunzip2 $i ; gzip $tag ; done')


def make_scons_file(sources,headers):
    with open( "./bcl.external.settings", "w" ) as f:
        f.write(
'''# -*- mode:python;indent-tabs-mode:t;show-trailing-whitespace:t; -*-
#
# Project settings for rosetta sources
# (c) Copyright Rosetta Commons Member Institutions.
# (c) This file is part of the Rosetta software suite and is made available under license.
# (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
# (c) For more information, see http://www.rosettacommons.org. Questions about this can be
# (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.

# THIS IS AN AUTOGENERATED FILE. You can edit it, but
# please note any manual alterations in the main/source/external/update_bcl.py script

sources = {
''')


        for key in sorted( sources.keys() ):
            f.write('\t"' +key+ '/" :[\n')
            for name in sorted(sources[key]):
                f.write('\t\t"' +name+ '",\n')
            f.write('\t],\n')

        f.write(
'''
}
include_path = [
'''
+ "'"+ "',\n'".join(headers)+"'"
''']
library_path = [
]
libraries = [
]
subprojects = ['z','pthread']
only_with_extras = ['bcl']
''')

def configure_files():
    # Run the abbreviated CMake configuraton script to fill in the versioning information
    os.system( "cd scripts/rosetta_integration; cmake .", shell=True)
    # Cleanup
    shutil.rmtree("scripts/rosetta_integration/CMakeFiles/")
    os.remove("scripts/rosetta_integration/CMakeCache.txt")
    os.remove("scripts/rosetta_integration/cmake_install.cmake")


######## end of make_scons_file() function

def main():
    directory = "bcl"
    cw=os.getcwd()
    os.chdir(cw[:cw.find('/bcl/')-2])
    configure_files()
    headers, sources = parse_files(directory)
    #headers, sources = add_extras(headers, sources, directory)
    #link_subdirs( headers, sources, directory )
    make_scons_file(sources, headers)
    clean()

if __name__ == "__main__":
    if len(sys.argv) != 1:
        print __doc__
        exit()
    else:
        main()
