#!/usr/bin/perl 
use Getopt::Long;

sub label_state
{
  # get arguments
  ( my $state, my $properties_line) = @_;
  
  # constants
  my $vdw_min = 0.25; # radius of bond stick 
  my $vdw_max = 1.00; # can be changed to have a larger effect
  
  # store script for creating labels
  my $labels = "";  
  
  # split actual spectrum into signals
  @properties = split( /\|/, $properties_line);
   
  ## create label
  %atom_properties = ();
  if( scalar( $properties) <= 1)
  {
  	my $local_id = 0;
  	@properties = split( / /, $properties_line);
    for my $atom ( @properties)
    {
      $atom_properties{ $local_id} = $atom;
      $local_id += 1;
    }
  }
  else
  {
	for my $atom ( @properties)
	{
	  my @current = split( /\;/, $atom);
	  if( $#current < 1)
      {
	    next;
	  }
	  $atom_properties{ $current[1]} = $current[ 0];
	}
  }
  
  print "properties: @properties\n" if( defined $verbose);

  # number deviations
  my $number_deviations = 0;
  for my $id ( sort keys( %atom_properties))
  {
    my $property = $atom_properties{ $id};

    my $current_selection = "id ".( $id + 1)." and state ".$state;

    if( defined $label_prop)
    {
      $labels .= "label ".$current_selection.", \"".$property."\"\n";
    }
    else
    {
      $labels .= "label ".$current_selection.", \"".( $id + 1)."\"\n";
    }
    # change atom appearence
    $labels .= "alter molecule and ".$current_selection.", b=".$property."\n"; # b factor used for coloring
    my $abs_property = abs( $half_property - $property);
    my $vdw = $vdw_min + ( $abs_property) / ( $max_property - $half_property) * ($vdw_max - $vdw_min);
    
    # label color and atom highlighting
    if( $property < $min_property)
    {
      # change label appearence
      $labels .= "label ".$current_selection.", \"small: ".$property."\"\n";
      $labels .= "set label_color, blue, ".$current_selection."\n";
      $vdw = $vdw_min;
    }
    elsif( $property > $max_property)
    {
      # change label appearence
      $labels .= "label ".$current_selection.", \"large: ".$property."\"\n";
      $labels .= "set label_color, red, ".$current_selection."\n";
      $vdw = $vdw_max;
    }
    else
    {
      # change label appearence
#      $labels .= "label ".$current_selection.", \" ".$property."\"\n";
      $labels .= "set label_color, green, ".$current_selection."\n";
  
      # atoms as speher with radius as a function of the deviation from the max
      if( defined $sphere)
      {
        $labels .= "show spheres, ".$current_selection."\n";
        $labels .= "alter molecule and ".$current_selection.", vdw=".$vdw."\n";
#        $labels .= "color ".$color.", ".$current_selection."\n";
      }
    }
  }
  
  return $labels;
}

## form the usage string
$usage =
"
usage:  

\t one sdf file containing multiple molecules can be given. From the \"> <{propertye}>\" mdl misc property as
\t long as it is conform to the formatting {value};{atomid}|{value};{atomid}|{...} or, if values are known for all atoms,
\t {value for atom id 1} {value for atom id 2} ... the atom property labels are
\t generated by labeling the atoms with the property, coloring the surface as a function of the property

\t-sdf                 \tthe mdl file to generate labels for (as full path)
\t-p or -property      \tthe property string to search for and use
\t-m or -min_property  \tminimal value for property to be colored
\t-x or -max_property  \tmaximal value for property to be colored
\t-s or -surface       \tcolor surface according to property
\t-e or -sphere        \tdraw sphere around atom; vdw radius and color correlates with property
\t-l or -label_prop    \tlabel the grow atom with the property 
\t-o or -output        \tfolder for output files {filename}.sdf and {filename}.pml
\t-f or -filename      \tfilename for sdf and pml file
\t-h or -help          \tdisplay help
\t-v or -verbose       \tverbose mode\n\n

author\t Nils Woetzel, Will Lowe
date\t 08/25/2011\n
";

## initialize command line variables
$mdl =();
$property_string = ();
$min_property = -1.00;
$max_property =  1.00;
$output_path = ".";
$filename = "molecule";
$surface = ();
$sphere = ();
$label_prop = ();
$verbose = ();
$help = ();

## print help and die if no arguments were given
die $usage if( $#ARGV == -1);

## set the options
$cl_check = GetOptions
(
  "sdf=s"            => \$mdl,
  "p|property=s"     => \$property_string,
  "m|min_property:f" => \$min_property,
  "x|max_property:f" => \$max_property,
  "o|output=s"       => \$output_path,
  "f|filename=s"     => \$filename,
  "s|surface"        => \$surface,
  "e|sphere"         => \$sphere,
  "l|label_prop"     => \$label_prop,
  "h|help"           => \$help,
  "v|verbose"        => \$verbose
);

if( defined $verbose)
{
  ## display all variables
  print "mdl_file|".$mdl."|\n";
  print "property|".$property_string."|\n";
  print "min_max_property|[".$min_property.",".$max_property."]\n";
  print "out|".$output_path."\n";
  print "filename|[".$filename."\n";
  print "h|help|".$help."|\n";
  print "v|verbose|".$verbose."|\n";
}

die $usage if defined $help;
die $usage if !defined $property_string;
die $usage if( !$cl_check);
die $usage if ( $min_property >= $max_property);
$half_property = ($min_property + ( $max_property - $min_property)/2);

# if no representation is chosen, use sphere
if( !defined $surface && !defined $sphere)
{
  $sphere = 1;
}

## open the mdl file and find the spectra
open( MDL, $mdl) or die "given mdl file \"$mdl\" does not exist!\n";
$script_file = $output_path."/".$filename.".pml";
open( SCRIPT, ">".$script_file) or die "cannot open $script_file for writing!\n";
$sdf_file = $output_path."/".$filename.".sdf";
open( SDF, ">".$sdf_file) or die "cannot open $sdf_file for writing!\n";

print SCRIPT "#loading mdl/sdf file\n";
print SCRIPT "load ".$sdf_file.", molecule\n\n";

# set all atom b factors to half range = white coloring
print SCRIPT "alter molecule, b=$half_property\n\n";

if( defined $sphere)
{
  print SCRIPT "color white, molecule\n\n";
}

#print SCRIPT "alter molecule, vdw=0.75\n";
#print SCRIPT "set label_color, red\n";
print SCRIPT "set label_size, -0.5\n";
print SCRIPT "set label_position,(0,0,2)\n";
print SCRIPT "show sticks\n";
print SCRIPT "set valence, 1\n";

print SCRIPT "# adding labels to atoms\n";

$state = 1;
%property_lines = ();
$current_mdl = "";
while( my $line = <MDL>)
{
  $current_mdl .= $line;
  if( $line =~ /> <${property_string}>/)
  {
    my $current_property_line = <MDL>;
    $property_lines{ $line} = $current_property_line;
    $current_mdl .= $current_property_line;
  }
  
  if( $line =~ /\$\$\$\$/)
  {
    my @property_names = sort( keys( %property_lines));
    if( $#property_names < 0)
    {
      print "no property available for state $state\n" if( defined $verbose);      
    }
    else
    {
      my $property_line = $property_lines{ $property_names[ 0]};
      
      my $labels = label_state( $state, $property_line);
      if( length( $labels))
      {
        print "created lables for $state\n" if( defined $verbose);
        print SCRIPT $labels."\n";
        print SDF $current_mdl;
        ++$state;
      }
      else
      {
      	print "no property lines for $state\n";
      }
    }
    %property_lines = ();
    $current_mdl = "";
  }
}

# create a color spectrum over the object
print SCRIPT "spectrum b, blue_white_red, molecule, $min_property, $max_property\n";

if( defined $surface)
{
  print SCRIPT "set surface_type, 0\n";
  print SCRIPT "set transparency, 0.5\n";
  print SCRIPT "show surface, molecule\n\n";
}

# now color the map based on the underlying protein
print SCRIPT "ramp_new $property_string, molecule, [$min_property,$half_property,$max_property], [blue,white,red]\n";

close( SCRIPT);
close( MDL);

print "inserted ".( $state - 1)." molecules into $sdf_file\n";