// (c) Copyright BCL @ Vanderbilt University 2014
// (c) BCL Homepage: http://www.meilerlab.org/bclcommons
// (c) BCL Code Repository: https://github.com/BCLCommons/bcl
// (c)
// (c) The BioChemical Library (BCL) was originally developed by contributing members of the Meiler Lab @ Vanderbilt University.
// (c)
// (c) The BCL is now made available as an open-source software package distributed under the permissive MIT license,
// (c) developed and maintained by the Meiler Lab at Vanderbilt University and contributing members of the BCL Commons.
// (c)
// (c) External code contributions to the BCL are welcome. Please visit the BCL Commons GitHub page for information on how you can contribute.
// (c)
// (c) This file is part of the BCL software suite and is made available under the MIT license.
// (c)

#ifndef BCL_RANDOM_DISTRIBUTION_INTERFACE_H_
#define BCL_RANDOM_DISTRIBUTION_INTERFACE_H_

// include the namespace header
#include "bcl_random.h"

// include other forward headers - sorted alphabetically
#include "command/bcl_command.fwd.hh"
#include "math/bcl_math.fwd.hh"
#include "util/bcl_util.fwd.hh"

// includes from bcl - sorted alphabetically
#include "storage/bcl_storage.h"
#include "util/bcl_util_object_interface.h"

// external includes - sorted alphabetically

namespace bcl
{
  namespace random
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //!
    //! @class DistributionInterface
    //! @brief interface for random number distributions
    //! @details Internally they use a GeneratorInterface for the uniform distribution and transform them into any other
    //! distribution.
    //! This interface has besides the ObjectInterface virtual functions, a SetSeed, GetSeed function to set the random
    //! seed for the internal GeneratorInterface that is used for the distribution.
    //! Although the Double function is implemented, the GetDoubleRange also need to be overwritten in derived classes.
    //!
    //! @remarks example unnecessary
    //! @author woetzen
    //! @date Jun 19, 2010
    //!
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    class BCL_API DistributionInterface :
      public util::ObjectInterface
    {

    private:

    //////////
    // data //
    //////////

      mutable double m_OtherGaussianValue; //!< Extra value generated by Box-Mueller method for RandomGaussian()
      mutable bool   m_OtherGaussianValueAvailable; //!< True if m_OtherGaussianValue is available for use

    public:

    //////////
    // data //
    //////////

      //! @brief the default seed
      //! @return the default seed
      static uint64_t GetDefaultSeed();

      //! @brief the default double range
      //! @return default double range [0,1)
      static const math::Range< double> &GetDefaultDoubleRange();

      //! @brief command line flag to be used to set RandomSeed over the command line
      //! @return ShPtr to a FlagInterface which is used to set RandomSeed
      static util::ShPtr< command::FlagInterface> &GetFlagRandomSeed();

    //////////////////////////////////
    // construction and destruction //
    //////////////////////////////////

      //! @brief default constructor
      DistributionInterface() :
        m_OtherGaussianValueAvailable( false)
      {
      }

      //! @brief Clone function
      //! @return pointer to new DistributionInterface
      virtual DistributionInterface *Clone() const = 0;

    /////////////////
    // data access //
    /////////////////

      //! @brief sets the seed
      //! @param SEED seed to be used
      //! @return the seed, that is was set too
      virtual uint64_t SetSeed( const uint64_t SEED)
      {
        m_OtherGaussianValueAvailable = false;
        return SEED;
      }

      //! @brief get the seed
      //! @return the seed, that was used to start the rng
      virtual uint64_t GetSeed() const = 0;

      //! @brief default range for random double
      //! @return range, in which Double() generates a random number
      virtual const math::Range< double> &GetDoubleRange() const = 0;

    ////////////////
    // operations //
    ////////////////

      //! @brief set seed randomly
      //! @return seed that it was set too
      uint64_t RandomizeSeed();

      //! @brief set seed to the one given in the command line flag
      //! id the flag is given, without an actual numerical value, the system time is used as seed
      uint64_t SetSeedFromCommandlineFlag();

      //! @brief set seed to the one given in the command line flag
      //! id the flag is given, without an actual numerical value, the system time is used as seed
      static void SetGlobalSeedFromCommandlineFlag();

    ////////////////////////////////////////////////////////////////////////
    // default ranges for generated random numbers - always closed ranges //
    ////////////////////////////////////////////////////////////////////////

      //! @brief default range for random float
      //! @return range, in which Float() generates a random number
      static const math::Range< float> &GetFloatRange();

      //! @brief default range for random int
      //! @return range, in which Integer() generates a random number
      static const math::Range< int> &GetIntegerRange();

      //! @brief default range for random unsigned int
      //! @return range, in which unsigned int generates a random number
      static const math::Range< unsigned int> &GetUnsignedIntRange();

      //! @brief default range for random unsigned long
      //! @return range, in which unsigned long generates a random number
      static const math::Range< unsigned long> &GetUnsignedLongRange();

      //! @brief default range for random unsigned long long
      //! @return range, in which unsigned long long generates a random number
      static const math::Range< unsigned long long> &GetUnsignedLongLongRange();

      //! @brief default range for random bool
      //! @return range, in which bool generates a random number
      static const math::Range< bool> &GetBooleanRange();

      //! @brief default range for random char
      //! @return range, in which char generates a random number
      static const math::Range< char> &GetCharRange();

      //! @brief templated function to default range
      //! @tparam t_DataType DataType of random variable
      //! @return default range for given t_DataType
      template< typename t_DataType>
      const math::Range< t_DataType> &GetRange() const;

    /////////////////////////////////////
    // random numbers in default range //
    /////////////////////////////////////

      //! @brief random double
      //! @return random number in double range
      virtual double Double() const;

      //! @brief random float
      //! @return random number in range [0,1)
      virtual float Float() const;

      //! @brief generate a random boolean
      //! @return random true or false
      virtual bool Boolean() const;

      // other types, such as int, size_t, etc. have varied sizes on different architectures and/or compilers.
      // To maintain cross-platform consistency of results, instead use the functions that take a range or max, as below

    ///////////////////////////////////
    // random numbers in given range //
    ///////////////////////////////////

      //! @brief random double in given range
      //! @return random number in range RANGE
      double Double( const math::Range< double> &RANGE) const;

      //! @brief random float in given range
      //! @return random number in range RANGE
      float Float( const math::Range< float> &RANGE) const;

      //! @brief random integer in given range
      //! @return random integer in range RANGE
      int Integer( const math::Range< int> &RANGE) const;

      //! @brief random unsigned integer in given range
      //! @return random unsigned bit integer in range RANGE
      unsigned int SizeT( const math::Range< unsigned int> &RANGE) const;

      //! @brief random unsigned long in given range
      //! @return random unsigned long in range RANGE
      unsigned long SizeT( const math::Range< unsigned long> &RANGE) const;

      //! @brief random unsigned long long in given range
      //! @return random unsigned long long in range RANGE
      unsigned long long SizeT( const math::Range< unsigned long long> &RANGE) const;

      //! @brief templated function to generate random number in given range
      //! @tparam t_DataType DataType of random variable
      //! @return random t_DataType in RANGE
      template< typename t_DataType>
      t_DataType Random( const math::Range< t_DataType> &RANGE) const;

      //! @brief templated function to generate random number in range [MIN, MAX]
      //! @param MIN minimum on left closed range
      //! @param MAX maximum on right closed range
      //! @return random number in range [MIN, MAX]
      template< typename t_DataType>
      t_DataType Random( const t_DataType &MIN, const t_DataType &MAX) const;

      //! @brief templated function to generate random number in range [0, MAX]
      //! @param MAX maximum on right closed range
      //! @return random number in range [0, MAX]
      template< typename t_DataType>
      t_DataType Random( const t_DataType &MAX) const
      {
        return Random< t_DataType>( t_DataType( 0), MAX);
      }

      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // special random functions with no range //
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      //! @brief generate a sign represented by an integer
      //! @return -1 or 1
      int Sign() const;

      //! @brief random number from a gaussian distribution
      //! uses the polar form of the Box-Mueller distribution
      //! http://www.taygeta.com/random/gaussian.html
      //! @param MEAN mean of the gaussian distribution
      //! @param STANDARD_DEVIATION standard deviation of the gaussian distribution
      //! @return a random number, which distribution is a gaussian distribution with mean MEAN and sd STANDARD_DEVIATON
      double RandomGaussian
      (
        const double MEAN,
        const double STANDARD_DEVIATION
      ) const;

      //! @brief random discrete number from a poisson distribution
      //! This approach is from The transformed rejection method for generating Poisson random variables W. Hormann
      //! This is what is used in the boost library.  For lambda less than 10, a simple inversion techniqe is used
      //! @param LAMBDA expected Value of the poisson distribution
      //! @return a random number, which distribution is a poisson distribution with mean LAMBDA
      double RandomPoisson( const int LAMBDA) const;

      //! @brief returns an random element from container
      //! @param BEGIN_ITERATOR begin iterator  of the SequenceContainer
      //! @param END_ITERATOR end iterator of the SequenceContainer
      //! @param SIZE size of the container from which random element is going to be returned
      //! @return iterator to the random element selected
      template< typename t_IteratorType>
      t_IteratorType Iterator
      (
        const t_IteratorType &BEGIN_ITERATOR,
        const t_IteratorType &END_ITERATOR,
        const size_t SIZE
      ) const
      {
        // if the size is zero, return the end iterator
        if( SIZE == 0)
        {
          return END_ITERATOR;
        }

        // get a random index within the range of the provided SIZE - 1
        const size_t random_index( Random< size_t>( SIZE - 1));

        // initialize an iterator with BEGIN_ITERATOR
        t_IteratorType random_iterator( BEGIN_ITERATOR);

        // advance the iterator
        storage::AdvanceIterator( random_iterator, END_ITERATOR, random_index);

        // return
        return random_iterator;
      }

    protected:

      //! @brief generate random unsigned 64-bit integer
      //! @return integer uniformly distributed in range [0,2^64-1]
      virtual uint64_t Unsigned64BitInt() const = 0;

    }; // class DistributionInterface

  /////////////////////////////////////////////////
  // default ranges for generated random numbers //
  /////////////////////////////////////////////////

    //! @brief templated function to default range double specialization
    //! @return default range for double
    template<>
    BCL_API
    const math::Range< double> &DistributionInterface::GetRange< double>() const;

    //! @brief templated function to default range float specialization
    //! @return default range for float
    template<>
    BCL_API
    const math::Range< float> &DistributionInterface::GetRange< float>() const;

    //! @brief templated function to default range int specialization
    //! @return default range for int
    template<>
    BCL_API
    const math::Range< int> &DistributionInterface::GetRange< int>() const;

    //! @brief templated function to default range unsigned int specialization
    //! @return default range for unsigned int
    template<>
    BCL_API
    const math::Range< unsigned int> &DistributionInterface::GetRange< unsigned int>() const;

    //! @brief templated function to default range unsigned long specialization
    //! @return default range for unsigned long
    template<>
    BCL_API
    const math::Range< unsigned long> &DistributionInterface::GetRange< unsigned long>() const;

    //! @brief templated function to default range unsigned long long specialization
    //! @return default range for unsigned long long
    template<>
    BCL_API
    const math::Range< unsigned long long> &DistributionInterface::GetRange< unsigned long long>() const;

    //! @brief templated function to default range bool specialization
    //! @return default range for bool
    template<>
    BCL_API
    const math::Range< bool> &DistributionInterface::GetRange< bool>() const;

    //! @brief templated function to default range bool specialization
    //! @return default range for bool
    template<>
    BCL_API
    const math::Range< char> &DistributionInterface::GetRange< char>() const;

  ///////////////////////////////////
  // random numbers in given range //
  ///////////////////////////////////

    //! @brief templated function to generate random number in given range specialized for double
    //! @return random double in RANGE
    template<>
    BCL_API
    double DistributionInterface::Random< double>( const math::Range< double> &RANGE) const;

    //! @brief templated function to generate random number in given range specialized for float
    //! @return random float in RANGE
    template<>
    BCL_API
    float DistributionInterface::Random< float>( const math::Range< float> &RANGE) const;

    //! @brief templated function to generate random number in given range specialized for int
    //! @return random int in RANGE
    template<>
    BCL_API
    int DistributionInterface::Random< int>( const math::Range< int> &RANGE) const;

    //! @brief templated function to generate random number in default range specialized for unsigned int
    //! @return random unsigned int in default range
    template<>
    BCL_API
    unsigned int DistributionInterface::Random< unsigned int>( const math::Range< unsigned int> &RANGE) const;

    //! @brief templated function to generate random number in default range specialized for unsigned int
    //! @return random unsigned long in default range
    template<>
    BCL_API
    unsigned long DistributionInterface::Random< unsigned long>( const math::Range< unsigned long> &RANGE) const;

    //! @brief templated function to generate random number in default range specialized for unsigned long longs
    //! @return random unsigned long long in default range
    template<>
    BCL_API
    unsigned long long DistributionInterface::Random< unsigned long long>( const math::Range< unsigned long long> &RANGE) const;

    //! @brief templated function to generate random number in given range specialized for char
    //! @return random char in RANGE
    template<>
    BCL_API
    char DistributionInterface::Random< char>( const math::Range< char> &RANGE) const;

    //! @brief templated function to generate random number if range [MIN, MAX] specialized for double
    //! @param MIN minimum on left closed range
    //! @param MAX maximum on right closed range
    //! @return random number in range [MIN, MAX]
    template<>
    BCL_API
    double DistributionInterface::Random( const double &MIN, const double &MAX) const;

    //! @brief templated function to generate random number if range [MIN, MAX] specialized for float
    //! @param MIN minimum on left closed range
    //! @param MAX maximum on right closed range
    //! @return random number in range [MIN, MAX]
    template<>
    BCL_API
    float DistributionInterface::Random( const float &MIN, const float &MAX) const;

    //! @brief templated function to generate random number if range [MIN, MAX] specialized for int
    //! @param MIN minimum on left closed range
    //! @param MAX maximum on right closed range
    //! @return random number in range [MIN, MAX]
    template<>
    BCL_API
    int DistributionInterface::Random( const int &MIN, const int &MAX) const;

    //! @brief templated function to generate random number if range [MIN, MAX] specialized for unsigned ints
    //! @param MIN minimum on left closed range
    //! @param MAX maximum on right closed range
    //! @return random number in range [MIN, MAX]
    template<>
    BCL_API
    unsigned int DistributionInterface::Random( const unsigned int &MIN, const unsigned int &MAX) const;

    //! @brief templated function to generate random number if range [MIN, MAX] specialized for unsigned longs
    //! @param MIN minimum on left closed range
    //! @param MAX maximum on right closed range
    //! @return random number in range [MIN, MAX]
    template<>
    BCL_API
    unsigned long DistributionInterface::Random( const unsigned long &MIN, const unsigned long &MAX) const;

    //! @brief templated function to generate random number if range [MIN, MAX] specialized for unsigned long longs
    //! @param MIN minimum on left closed range
    //! @param MAX maximum on right closed range
    //! @return random number in range [MIN, MAX]
    template<>
    BCL_API
    unsigned long long DistributionInterface::Random( const unsigned long long &MIN, const unsigned long long &MAX) const;

    //! @brief templated function to generate random char if range [MIN, MAX] specialized for int
    //! @param MIN minimum on left closed range
    //! @param MAX maximum on right closed range
    //! @return random char in range [MIN, MAX]
    template<>
    BCL_API
    char DistributionInterface::Random( const char &MIN, const char &MAX) const;

  } // namespace random
} // namespace bcl

#endif // BCL_RANDOM_DISTRIBUTION_INTERFACE_H_
