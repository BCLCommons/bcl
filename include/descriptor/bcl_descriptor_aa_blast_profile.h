// (c) Copyright BCL @ Vanderbilt University 2014
// (c) BCL Homepage: http://www.meilerlab.org/bclcommons
// (c) BCL Code Repository: https://github.com/BCLCommons/bcl
// (c)
// (c) The BioChemical Library (BCL) was originally developed by contributing members of the Meiler Lab @ Vanderbilt University.
// (c)
// (c) The BCL is now made available as an open-source software package distributed under the permissive MIT license,
// (c) developed and maintained by the Meiler Lab at Vanderbilt University and contributing members of the BCL Commons.
// (c)
// (c) External code contributions to the BCL are welcome. Please visit the BCL Commons GitHub page for information on how you can contribute.
// (c)
// (c) This file is part of the BCL software suite and is made available under the MIT license.
// (c)

#ifndef BCL_DESCRIPTOR_AA_BLAST_PROFILE_H_
#define BCL_DESCRIPTOR_AA_BLAST_PROFILE_H_

// include the namespace header
#include "bcl_descriptor.h"

// include other forward headers - sorted alphabetically

// includes from bcl - sorted alphabetically
#include "bcl_descriptor_base_element.h"
#include "biol/bcl_biol_aa_base.h"
#include "iterate/bcl_iterate_generic.h"

// external includes - sorted alphabetically

namespace bcl
{
  namespace descriptor
  {
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //!
    //! @class AABlastProfile
    //! @brief Generates the BlastProfile of the given amino acid
    //! @details This class returns the 20-value blast profile for a given amino acid
    //!
    //! @see @link example_descriptor_aa_blast_profile.cpp @endlink
    //! @author teixeipl, mendenjl
    //! @date Feb 6, 2013
    //!
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    class BCL_API AABlastProfile :
      public BaseElement< biol::AABase, float>
    {

    public:

    //////////
    // enum //
    //////////

      //! All types of blast-profile like descriptors generated by this class
      enum Method
      {
        e_Log10 = 0,           //!< all log-10 probabilities (range -20 - 20, but rarely outside -9 - 9)
        e_Probability = 1,     //!< Unscaled blast probability
        e_Identity = 2,        //!< AA-Type identity (19 0's, 1 1 for the AA type in question)
        e_Conservation = 3,    //!< Shannon entropy of blast profile
        e_Information  = 4,    //!< Information per position, as reported in the PSSM
        e_AlignmentWeight = 5, //!< Alignment weight, relative to pseudo-count, of the blast profile
        s_NumberMethods,
        s_FirstScalarMethod = e_Conservation
      };

      //! file extension
      std::string m_FileExtension;

      //! blast profile data for every AA in the current sequence with the given file extension
      storage::Vector< biol::BlastProfile> m_BlastProfiles;

      //! @brief get the string for the method
      //! @param METHOD the method to retrieve the name for
      static const std::string &GetMethodName( const Method &METHOD);

      //! Typedef for the method enum wrapper
      typedef util::WrapperEnum< Method, &GetMethodName, s_NumberMethods> MethodEnum;

    private:

      //! @brief get the description string for the method
      //! @param METHOD the method to retrieve the description for
      static const std::string &GetMethodDescription( const Method &METHOD);

    public:

    //////////
    // data //
    //////////

      //! method used by this class
      MethodEnum m_Method;

      //! single instance of that class
      static const util::SiPtr< const util::ObjectInterface> s_Instance;

    //////////////////////////////////
    // construction and destruction //
    //////////////////////////////////

      //! @brief default constructor, allows choice of method
      AABlastProfile( const Method &METHOD = e_Log10);

      //! @brief Clone function
      //! @return pointer to new AABlastProfile
      AABlastProfile *Clone() const;

    /////////////////
    // data access //
    /////////////////

      //! @brief returns class name of the object behind a pointer or the current object
      //! @return the class name
      const std::string &GetClassIdentifier() const;

      //! @brief return the data label
      //! @return data label as string
      const std::string &GetAlias() const;

    protected:

      //! @brief get the feature size under the normal dimension setting (e.g. GetNormalDimension())
      //! @return the feature size, assuming this feature has its normal dimension setting
      size_t GetNormalSizeOfFeatures() const;

    ////////////////
    // operations //
    ////////////////

      //! @brief calculate the descriptors
      //! @param ELEMENT the element of the sequence of interest
      //! @param STORAGE storage for the descriptor
      virtual void Calculate
      (
        const iterate::Generic< const biol::AABase> &ELEMENT,
        linal::VectorReference< float> &STORAGE
      );

      //! @brief load the blast file
      void LoadFile();

      //! @brief hook that derived classes can override to add behavior after every time SetObject is called
      //! In this case, resets the blast profiles
      void SetObjectHook();

    //////////////////////
    // helper functions //
    //////////////////////

    private:

      //! @brief return parameters for member data that are set up from the labels
      //! @return parameters for member data that are set up from the labels
      io::Serializer GetSerializer() const;

    }; // class AABlastProfile

  } // namespace descriptor
} // namespace bcl

#endif // BCL_DESCRIPTOR_AA_BLAST_PROFILE_H_
