./build/linux64_release/bin/bcl-example-static.exe Examples -exec CommandCommandLineWriter 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> CommandCommandLineWriter
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: CommandCommandLineWriter ====================
=std=bcl=> CreateCommandLine(!!) test succeeded:
               command::CommandLineWriter::CreateCommandLine( test_command_vec) ==
              expected_result ==
                                   TCSH / CSH / BASH / SH : \!\! 
              Windows Powershell / Windows Command Prompt : !! 
=std=bcl=> CreateCommandLine("I am quoted") test succeeded:
              command::CommandLineWriter::CreateCommandLine( test_command_vec) == expected_result == '"I am quoted"' 
=std=bcl=> CreateCommandLine(#) test succeeded:
               command::CommandLineWriter::CreateCommandLine( test_command_vec) ==
              expected_result ==
              BASH / SH / Windows Powershell / Windows Command Prompt : '#' 
                                                           TCSH / CSH : # 
=std=bcl=> CreateCommandLine(') test succeeded:
               command::CommandLineWriter::CreateCommandLine( test_command_vec) ==
              expected_result == TCSH / CSH / BASH / SH : \' 
              Windows Command Prompt : ^' 
                  Windows Powershell : `' 
=std=bcl=> CreateCommandLine(+55.34e-59abc_) test succeeded:
              command::CommandLineWriter::CreateCommandLine( test_command_vec) == expected_result == +55.34e-59abc_ 
=std=bcl=> CreateCommandLine(\~*) test succeeded:
               command::CommandLineWriter::CreateCommandLine( test_command_vec) ==
              expected_result ==
                                                             BASH / SH : '\\~*' 
              TCSH / CSH / Windows Powershell / Windows Command Prompt : '\~*' 
=std=bcl=> CreateCommandLine(^) test succeeded:
               command::CommandLineWriter::CreateCommandLine( test_command_vec) ==
              expected_result ==
              TCSH / CSH / BASH / SH / Windows Powershell : ^ 
                                   Windows Command Prompt : ^^ 
=std=bcl=> CreateCommandLine(`) test succeeded:
               command::CommandLineWriter::CreateCommandLine( test_command_vec) ==
              expected_result ==
              TCSH / CSH / BASH / SH / Windows Command Prompt : '`' 
                                           Windows Powershell : `` 
=std=bcl=> CreateCommandLine(func(arg)) test succeeded:
               command::CommandLineWriter::CreateCommandLine( test_command_vec)
              == expected_result == 'func(arg)' 
=std=bcl=> CreateCommandLine(hello world) test succeeded:
              command::CommandLineWriter::CreateCommandLine( test_command_vec) == expected_result == 'hello world' 
=std=bcl=> CreateCommandLine(~) test succeeded:
               command::CommandLineWriter::CreateCommandLine( test_command_vec) ==
              expected_result ==
                                   TCSH / CSH / BASH / SH : '~' 
              Windows Powershell / Windows Command Prompt : ~ 
=std=bcl=> CreateCommandLine(~!@#$%^&*()_+`0-=p[]{}\|l;':"<>,.?/) test succeeded:
              command::CommandLineWriter::CreateCommandLine( test_command_vec) == expected_result ==
                           BASH / SH : '~\!@#$%^&*()_+`0-=p[]{}\\|l;\':"<>,.?/' 
                          TCSH / CSH : \~\!@#$%^\&\*\(\)_+\`0-=p[]{}\\\|l\;\':\"\<\>,.\?/ 
              Windows Command Prompt : '~!@#$%^^&*()_+`0-=p[]{}\|l;^':"<>,.?/' 
                  Windows Powershell : '~!@#$%^&*()_+``0-=p[]{}\|l;`':"<>,.?/' 
=std=bcl::app=> BCL Example | END  : CommandCommandLineWriter ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>    success      error error_string 
CommandCommandLineWriter_total           12          0              
total                                    12          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 64 MB
