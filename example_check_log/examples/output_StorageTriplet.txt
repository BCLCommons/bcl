./build/linux64_release/bin/bcl-example-static.exe Examples -exec StorageTriplet 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> StorageTriplet
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: StorageTriplet ====================
=std=bcl=> this class is similar to the standard Library std::pair. Except that it is a triplet, it has the typical bcl Clone, Empty and read/write functionality.
=std=bcl=> Construct Triplet of int, double and string from int, double and string
=std=bcl=> construct from three values  1, A, alpha
=std=bcl=> test access to elements  1, -1.5, alpha
=std=bcl=> start: first element:  1
=std=bcl=> start: second element: -1.5
=std=bcl=> start: third element: alpha
=std=bcl=> copy constructor: copy start  
=std=bcl=> copy: first element:  1
=std=bcl=> copy: second element: -1.5
=std=bcl=> copy: third element: alpha
=std=bcl=> GetClassIdentifier: bcl::storage::Triplet<int,double,std::string>
=std=bcl=> test data manipulation of First: 
=std=bcl=> start: first element: before 1
=std=bcl=> start: first element: after 2
=std=bcl=> test data manipulation of Second: 
=std=bcl=> start: Second element: before -1.5
=std=bcl=> start: Second element: after -2.5
=std=bcl=> test data manipulation of Third: 
=std=bcl=> start: Third element: before alpha
=std=bcl=> residue: Third element: after beta
=std=bcl=> test operator == with false scenario: 0
=std=bcl=> test operator = : start = copy
=std=bcl=> start:  first element:  2
=std=bcl=> start: second element: -2.5
=std=bcl=> start: third element: beta
=std=bcl=> copy: first element:  1
=std=bcl=> copy: second element: -1.5
=std=bcl=> copy: third element: alpha
=std=bcl=> after: start: first element:  1
=std=bcl=> after: start: second element: -1.5
=std=bcl=> start: third element: alpha
=std=bcl=> test operator == with true scenario: 1
=std=bcl=> test output: this is the Triplet: bcl::storage::Triplet<int,double,std::string>
  1
  -1.5
  "alpha"
=std=bcl::app=> BCL Example | END  : StorageTriplet ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>    success      error error_string 
StorageTriplet_total                      9          0              
total                                     9          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 64 MB
