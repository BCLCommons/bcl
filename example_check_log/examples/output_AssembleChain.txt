./build/linux64_release/bin/bcl-example-static.exe Examples -exec AssembleChain 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> AssembleChain
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: AssembleChain ====================
=std=bcl=> building model
=std=bcl::pdb=> HELIX line is ignored, since helix class is not considered:
HELIX    2  H2 LEU A   56  TYR A   59  5                                   4    
=std=bcl=> default constructor test succeeded:
              def_construct.GetData().IsEmpty() && !def_construct.GetSequence().IsDefined() == 1
=std=bcl=> testing constructor from a sequence and domain
=std=bcl=> constructor from AAsequence test succeeded:
              sequence_construct.GetData().IsEmpty() && sequence_construct.GetSequence().IsDefined() == 1
=std=bcl=> copy constructor test succeeded:
              domain_construct.GetSequence() == copy_construct.GetSequence() && domain_construct.GetData().InternalData() == copy_construct.GetData().InternalData()
              == 1
=std=bcl=> clone constructor test succeeded:
              domain_construct.GetSequence() == clone_construct->GetSequence() && domain_construct.GetData().InternalData() == clone_construct->GetData().InternalData()
              == 1
=std=bcl=> hard copy constructor test succeeded:
              domain_construct.GetSequence()->Sequence() == hard_copy_construct->GetSequence()->Sequence() && domain_construct.GetData().GetSize() == hard_copy_construct->GetData().GetSize() && ( **domain_construct.GetData().Begin()).Sequence() == ( **hard_copy_construct->GetData().Begin()).Sequence()
              == 1
=std=bcl=> successful example check:  domain_construct.GetChainID() == A
=std=bcl=> SetChainID test succeeded:  copy_construct.GetChainID() == F
=std=bcl=> successful example check:
               domain_construct.GetSequence() == sp_sequence
              output of result suppressed (result was 94429 bytes), set message verbosity to Detail to override
=std=bcl=> successful example check:
              insert_single_sse.Insert( util::ShPtr< assemble::SSE>( protein_model.GetSSEs().FirstElement()->Clone())) == 1
=std=bcl=> successful example check:  insert_multiple_sses.Insert( sse_vector) == 1
=std=bcl=> successful example check:  insert_new_domain.Insert( source_domain) == 1
=std=bcl=> AddLoops test succeeded:  copy_construct.GetSSEs( biol::GetSSTypes().COIL).GetSize() == 5
=std=bcl=> = operator test succeeded:
              domain_construct.GetSequence() == def_construct.GetSequence() && domain_construct.GetData().InternalData() == def_construct.GetData().InternalData()
              == 1
=std=bcl=> read and write test succeeded:  domain_construct.GetNumberSSEs() == chain_read.GetNumberSSEs() == 5
=std=bcl::app=> BCL Example | END  : AssembleChain ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>    success      error error_string 
AssembleChain_total                      14          0              
total                                    14          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 133 MB, peak physical RAM used: 65 MB
