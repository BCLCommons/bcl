./build/linux64_release/bin/bcl-example-static.exe Examples -exec BiolAABase 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> BiolAABase
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: BiolAABase ====================
=std=bcl=> testing constructors from an AABackbone's AABase base
=std=bcl=> testing Clone()
=std=bcl=> testing Empty() constructor
=std=bcl=> successful example check:  GetStaticClassName( aa_base_a) == bcl::biol::AABase
=std=bcl=> successful example check:
               aa_base_a.GetClassIdentifier() == backbone_a.GetClassIdentifier() ==
              bcl::biol::AABackBone
=std=bcl=> successful example check:
               aa_base_a.GetType() == biol::GetAATypes().MET ==
              bcl::biol::AATypes::Enum
                "METHIONINE"
=std=bcl=> successful example check:  aa_base_b.GetSeqID() == 2
=std=bcl=> successful example check:  aa_base_b.GetPdbID() == 2
=std=bcl=> successful example check:  aa_base_b.GetPdbICode() == X
=std=bcl=> successful example check:  aa_base_b.GetChainID() == A
=std=bcl=> successful example check:
               expected_phi == aa_base_b.CalculatePhi( aa_base_a.GetAtom( biol::GetAtomTypes().C))
              == -1.62432  (+/- 0.001%)
=std=bcl=> successful example check:
               expected_psi == aa_base_b.CalculatePsi( aa_base_c.GetAtom( biol::GetAtomTypes().N))
              == 2.3137  (+/- 0.001%)
=std=bcl=> successful example check:
              math::EqualWithinTolerance ( aa_complete.CalculateSideChainDihedralAngles().GetAngle( biol::ChiAngle::e_One, math::Angle::e_Radian), expected_dihedral( 0), 0.0001 )
              == 1
=std=bcl=> successful example check:
              math::EqualWithinTolerance ( aa_complete.CalculateSideChainDihedralAngles().GetAngle( biol::ChiAngle::e_Two, math::Angle::e_Radian), expected_dihedral( 1), 0.0001 )
              == 1
=std=bcl=> successful example check:
              math::EqualWithinTolerance ( aa_complete.CalculateSideChainDihedralAngles().GetAngle( biol::ChiAngle::e_Three, math::Angle::e_Radian), expected_dihedral( 2), 0.0001 )
              == 1
=std=bcl=> successful example check:  backbone_a.CalculateSideChainDihedralAngles().GetSize() == 3
=std=bcl=> successful example check:
               sp_aa_base_empty_c->GetType() == aa_base_a.GetType() ==
              bcl::biol::AATypes::Enum
                "METHIONINE"
=std=bcl=> successful example check:  sp_aa_base_empty_c->GetSeqID() == aa_base_a.GetSeqID() == 1
=std=bcl=> successful example check:  sp_aa_base_empty_c->GetPdbID() == aa_base_a.GetPdbID() == 1
=std=bcl=> successful example check:
               expected_center_of_mass_sc_a == aa_complete.CalculateCenterOfMassOfSideChain() ==
              bcl::linal::Vector3D
                24.7357	24.3353	5.61725
               (+/- 0.001%)
=std=bcl=> successful example check:
               expected_center_of_mass_sc_b == aa_base_a.CalculateCenterOfMassOfSideChain() ==
              bcl::linal::Vector3D
                25.112	24.879	3.647
               (+/- 0.001%)
=std=bcl=> successful example check:  aa_base_a.GetIdentification() == expected_identification ==     1 M MET U
=std=bcl=> successful example check:
               aa_base_b.GetType() == sp_aa_base_empty_b->GetType() ==
              bcl::biol::AATypes::Enum
                "GLUTAMINE"
=std=bcl=> successful example check:  aa_base_b.GetSeqID() == sp_aa_base_empty_b->GetSeqID() == 2
=std=bcl=> successful example check:  aa_base_b.GetPdbID() == sp_aa_base_empty_b->GetPdbID() == 2
=std=bcl=> successful example check:  sstream.str() == expected_fasta_output == M
=std=bcl=> successful example check:
               sp_aa_base_empty_a->GetType() == biol::GetAATypes().MET ==
              bcl::biol::AATypes::Enum
                "METHIONINE"
=std=bcl=> successful example check:  sp_aa_base_empty_a->GetSeqID() == 1
=std=bcl=> successful example check:  sp_aa_base_empty_a->GetPdbID() == 1
=std=bcl=> successful example check:  aa_base_a == aa_base_a == 1
=std=bcl=> successful example check:
              math::EqualWithinTolerance ( expected_first_sc_distance, biol::FirstSidechainAtomDistance( aa_base_a, aa_base_b) )
              == 1
=std=bcl=> successful example check:
               biol::SequenceSeparation( aa_base_a, aa_base_c) == expected_sequence_separation ==
              1
=std=bcl::app=> BCL Example | END  : BiolAABase ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>    success      error error_string 
BiolAABase_total                         29          0              
total                                    29          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 64 MB
