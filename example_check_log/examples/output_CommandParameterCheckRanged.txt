./build/linux64_release/bin/bcl-example-static.exe Examples -exec CommandParameterCheckRanged 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> CommandParameterCheckRanged
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: CommandParameterCheckRanged ====================
=std=bcl=> successful example check:
               GetStaticClassName< command::ParameterCheckRanged< double> >() ==
              parameter_check_ptr_a->GetClassIdentifier() == bcl::command::ParameterCheckRanged<double>
=std=bcl=> successful example check:  parameter_check_ptr_a->IsAllowedParameter( "Nate&Nils", "", error_stream) == 0
=std=bcl=> successful example check:  parameter_check_ptr_a->IsAllowedParameter( "-0.5", "", error_stream) == 1
=std=bcl=> successful example check:  parameter_check_ptr_a->IsAllowedParameter( "0.5", "", error_stream) == 1
=std=bcl=> successful example check:  parameter_check_ptr_a->IsAllowedParameter( "1.5", "", error_stream) == 1
=std=bcl=> successful example check:  parameter_check_ptr_b->IsAllowedParameter( "-0.1", "", error_stream) == 0
=std=bcl=> successful example check:  parameter_check_ptr_b->IsAllowedParameter( "0.0", "", error_stream) == 1
=std=bcl=> successful example check:  parameter_check_ptr_b->IsAllowedParameter( "0.5", "", error_stream) == 1
=std=bcl=> successful example check:  parameter_check_ptr_b->IsAllowedParameter( "1.0", "", error_stream) == 1
=std=bcl=> successful example check:  parameter_check_ptr_b->IsAllowedParameter( "1.1", "", error_stream) == 0
=std=bcl=> successful example check:  parameter_check_ptr_c->IsAllowedParameter( "0", "", error_stream) == 0
=std=bcl=> successful example check:  parameter_check_ptr_c->IsAllowedParameter( "1", "", error_stream) == 1
=std=bcl=> successful example check:  parameter_check_ptr_c->IsAllowedParameter( "2", "", error_stream) == 1
=std=bcl=> successful example check:  parameter_check_ptr_c->IsAllowedParameter( "10", "", error_stream) == 1
=std=bcl=> successful example check:  parameter_check_ptr_c->IsAllowedParameter( "11", "", error_stream) == 0
=std=bcl=> successful example check:  parameter_check_ptr_c->IsAllowedParameter( "EA", "", error_stream) == 0
=std=bcl=> successful example check:  parameter_check_ptr_d->IsAllowedParameter( "0", "", error_stream) == 0
=std=bcl=> successful example check:  parameter_check_ptr_d->IsAllowedParameter( "1", "", error_stream) == 1
=std=bcl=> successful example check:  parameter_check_ptr_d->IsAllowedParameter( "EA", "", error_stream) == 0
=std=bcl=> successful example check:  output_stream.str().length() > 0 == 1
=std=bcl=> successful example check:
               parameter_check_c_read.IsAllowedParameter( "0", "", error_stream) ==
              parameter_check_ptr_c->IsAllowedParameter( "0", "", error_stream) == 0
=std=bcl=> successful example check:
               parameter_check_c_read.IsAllowedParameter( "1", "", error_stream) ==
              parameter_check_ptr_c->IsAllowedParameter( "1", "", error_stream) == 1
=std=bcl=> successful example check:
               parameter_check_c_read.IsAllowedParameter( "2", "", error_stream) ==
              parameter_check_ptr_c->IsAllowedParameter( "2", "", error_stream) == 1
=std=bcl=> successful example check:
               parameter_check_c_read.IsAllowedParameter( "10", "", error_stream) ==
              parameter_check_ptr_c->IsAllowedParameter( "10", "", error_stream) == 1
=std=bcl=> successful example check:
               parameter_check_c_read.IsAllowedParameter( "11", "", error_stream) ==
              parameter_check_ptr_c->IsAllowedParameter( "11", "", error_stream) == 0
=std=bcl=> successful example check:
               parameter_check_c_read.IsAllowedParameter( "EA", "", error_stream) ==
              parameter_check_ptr_c->IsAllowedParameter( "EA", "", error_stream) == 0
=std=bcl::app=> BCL Example | END  : CommandParameterCheckRanged ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>     success      error error_string 
CommandParameterCheckRanged_total         26          0              
total                                     26          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 64 MB
