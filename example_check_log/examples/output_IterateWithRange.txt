./build/linux64_release/bin/bcl-example-static.exe Examples -exec IterateWithRange 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> IterateWithRange
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: IterateWithRange ====================
=std=bcl=> constructor from range should start at the beginning test succeeded:
               mutable_list_itr == ten_doubles.Begin()
              == 1
=std=bcl=> copy constructor test succeeded:
              mutable_list_itr_copy.NotAtEnd() && mutable_list_itr_copy == ten_doubles.Begin() && mutable_list_itr == mutable_list_itr_copy
              == 1
=std=bcl=> successful example check:  ( ++mutable_list_itr_copy).GetPosition() == 1
=std=bcl=> Copy constructed iterator operator ++ should not change iterator that was copied test succeeded:
              mutable_list_itr_copy != mutable_list_itr && mutable_list_itr == ten_doubles.Begin() == 1
=std=bcl=> mutable_list_itr should be at the end after 10 increments test succeeded:  mutable_list_itr.NotAtEnd() == 0
=std=bcl=> successful example check:  mutable_list_itr.GetPosition() == 10
=std=bcl=> mutable_list_itr.GotoBegin() test succeeded:  mutable_list_itr == ten_doubles.Begin() == 1
=std=bcl=> mutable_list_itr.GotoEnd() test succeeded:
              !mutable_list_itr.NotAtEnd() && mutable_list_itr == ten_doubles.End() == 1
=std=bcl=> increment on list test succeeded:  mutable_list_itr == itr_list_one && *mutable_list_itr == *itr_list_one == 1
=std=bcl=> setting a value through a generic iterator implemention test succeeded:  *itr_list_one == 5.0 == 5
=std=bcl=> construction of generic iterator on a set with one element test succeeded:
              const_set_of_one_itr == set_of_one.Begin() == 1
=std=bcl=> Restart test succeeded:  const_set_of_one_itr == set_of_one.Begin() == 1
=std=bcl=> successful example check:  ( ++const_set_of_one_itr).GetPosition() == 1
=std=bcl=> Moving to position 1 on a set of size one reaches the end test succeeded:
               const_set_of_one_itr.NotAtEnd() ==
              0
=std=bcl=> generic iterator implementation constructor on set test succeeded:  const_set_itr == set_of_nums.Begin() == 1
=std=bcl=> ( ++const_set_itr).Restart() test succeeded:  const_set_itr == set_of_nums.Begin() == 1
=std=bcl=> successful example check:  const_set_itr.GotoPosition( set_of_nums.GetSize()) == 0
=std=bcl=> const_set_itr.GotoPosition( set_of_nums.GetSize()) test succeeded:  const_set_itr == set_of_nums.End() == 1
=std=bcl::app=> BCL Example | END  : IterateWithRange ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>    success      error error_string 
IterateWithRange_total                   18          0              
total                                    18          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 64 MB
