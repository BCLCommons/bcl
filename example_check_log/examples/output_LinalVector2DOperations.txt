./build/linux64_release/bin/bcl-example-static.exe Examples -exec LinalVector2DOperations 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> LinalVector2DOperations
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: LinalVector2DOperations ====================
=std=bcl=> successful example check:
               vector_c == linal::Vector2D( 0.5, 0.5) == bcl::linal::Vector2D
                0.5	0.5
=std=bcl=> successful example check:  vector_c != linal::Vector2D( 0.55, -0.5) == 1
=std=bcl=> successful example check:
               +vector_a == vector_a == bcl::linal::Vector2D
                1	1
=std=bcl=> successful example check:
               vector_a + vector_b == linal::Vector2D( -1.0, 1.0) == bcl::linal::Vector2D
                -1	1
=std=bcl=> successful example check:
               vector_a + 5.5 == linal::Vector2D( 6.5, 6.5) == bcl::linal::Vector2D
                6.5	6.5
=std=bcl=> successful example check:
               -1.2 + vector_d == linal::Vector2D( 8.8, -0.2) == bcl::linal::Vector2D
                8.8	-0.2
               (+/- 0.001)
=std=bcl=> successful example check:
               -vector_a == linal::Vector2D( -1.0, -1.0) == bcl::linal::Vector2D
                -1	-1
=std=bcl=> successful example check:
               vector_a - vector_b == linal::Vector2D( 3.0, 1.0) == bcl::linal::Vector2D
                3	1
=std=bcl=> successful example check:
               vector_a - 5.5 == linal::Vector2D( -4.5, -4.5) == bcl::linal::Vector2D
                -4.5	-4.5
=std=bcl=> successful example check:
               -1.2 - vector_b == linal::Vector2D( 0.8, -1.2) == bcl::linal::Vector2D
                0.8	-1.2
               (+/- 0.001)
=std=bcl=> successful example check:  vector_a * vector_d == 11.0 == 11
=std=bcl=> successful example check:
               vector_a * 5.5 == linal::Vector2D( 5.5, 5.5) == bcl::linal::Vector2D
                5.5	5.5
=std=bcl=> successful example check:
               -1.2 * vector_d == linal::Vector2D( -12.0, -1.2) == bcl::linal::Vector2D
                -12	-1.2
=std=bcl=> successful example check:
               vector_d / -2.5 == linal::Vector2D( -4.0, -0.4) == bcl::linal::Vector2D
                -4	-0.4
=std=bcl=> successful example check:
               vector_a == linal::Vector2D( 1.001, 1.0) == bcl::linal::Vector2D
                1	1
               (+/- 0.01)
=std=bcl=> successful example check:  linal::SquareDistance( vector_c, vector_d) == 90.5  (+/- 0.001)
=std=bcl=> successful example check:  linal::Distance( vector_c, vector_d) == math::Sqrt( 90.5) == 9.51315  (+/- 0.001)
=std=bcl=> successful example check:
               linal::ProjAngle( vector_a, vector_b, vector_c, vector_d) ==
              acos( -29.0 / math::Sqrt( 90.5) / math::Sqrt( 10.0)) == 2.87243  (+/- 0.001)
=std=bcl=> successful example check:
               linal::ProjAngle( vector_a, vector_b, vector_c) ==
              acos( 2.0 / math::Sqrt( 0.5) / math::Sqrt( 10.0)) == 0.463648  (+/- 0.001)
=std=bcl=> successful example check:
               linal::ProjAngle( vector_a, vector_b) == acos( -2.0 / math::Sqrt( 2.0) / 2.0) ==
              2.35619  (+/- 0.001)
=std=bcl=> successful example check:  linal::ScalarProduct( vector_a, vector_c) == 1.0 == 1  (+/- 0.0001)
=std=bcl=> successful example check:
               linal::CrossProduct( vector_a, vector_b, vector_c, vector_d) == 8.0 == 8
               (+/- 0.001)
=std=bcl=> successful example check:  linal::CrossProduct( vector_a, vector_b, vector_c) == 1.0 == 1  (+/- 0.001)
=std=bcl=> successful example check:  linal::CrossProduct( vector_a, vector_b) == 2.0 == 2  (+/- 0.001)
=std=bcl=> successful example check:  distance == 0.727670 == 0.727607  (+/- 0.001)
=std=bcl=> successful example check:
               linal::CalculateFootpoint( point_to_be_projected, origin, direction) ==
              linal::Vector2D( 1.17647, 0.29418) == bcl::linal::Vector2D
                1.17647	0.294118
               (+/- 0.0001)
=std=bcl::app=> BCL Example | END  : LinalVector2DOperations ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>    success      error error_string 
LinalVector2DOperations_total            26          0              
total                                    26          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 64 MB
