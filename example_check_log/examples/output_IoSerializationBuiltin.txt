./build/linux64_release/bin/bcl-example-static.exe Examples -exec IoSerializationBuiltin 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> IoSerializationBuiltin
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: IoSerializationBuiltin ====================
=std=bcl=> successful example check:  serialization_handler_dbl.GetLabel().ToString() == 5
=std=bcl=> serialization_handler_dbl.TryRead( util::ObjectDataLabel( 0.5), error_from_serialization_handler_dbl) test succeeded:
              err_stream_dbl.str() ==
=std=bcl=> TryRead (valid case) test succeeded:  test_double == double( 0.5) == 0.5
=std=bcl=> successful example check:
               serialization_handler_dbl.TryRead( util::ObjectDataLabel( "test"), err_stream_dbl)
              == 0
=std=bcl=> serialization_handler_dbl.TryRead( util::ObjectDataLabel( test), error_from_serialization_handler_dbl) test succeeded:
              err_stream_dbl.str().size() > 0 == 1
=std=bcl=> successful example check:
               serialization_handler_dbl.TryRead( util::ObjectDataLabel( "NAN"), err_stream_dbl)
              == 1
=std=bcl=> Setting NAN test succeeded:  util::IsDefined( test_double) == 0
=std=bcl=> successful example check:
               serialization_handler_dbl.TryRead( util::ObjectDataLabel( "nan"), err_stream_dbl)
              == 1
=std=bcl=> Setting nan test succeeded:  util::IsDefined( test_double) == 0
=std=bcl=> successful example check:
               serialization_handler_dbl.TryRead( util::ObjectDataLabel( "+inf"), err_stream_dbl)
              == 1
=std=bcl=> Setting +inf test succeeded:  test_double > std::numeric_limits< double>::max() == 1
=std=bcl=> successful example check:
               serialization_handler_dbl.TryRead( util::ObjectDataLabel( "inf"), err_stream_dbl)
              == 1
=std=bcl=> Setting inf test succeeded:  test_double > std::numeric_limits< double>::max() == 1
=std=bcl=> successful example check:
               serialization_handler_dbl.TryRead( util::ObjectDataLabel( "-INF"), err_stream_dbl)
              == 1
=std=bcl=> Setting -INF test succeeded:  test_double < -std::numeric_limits< double>::max() == 1
=std=bcl=> successful example check:  serialization_handler_dbl_param.GetLabel().ToString() == 3.14
=std=bcl=> successful example check:
               serialization_handler_test.GetLabel() == test_trivial ==
              bcl::util::ObjectDataLabel
                test
=std=bcl=> successful example check:
               serialization_handler_test_basic_object.GetLabel() == test_basic_object ==
              bcl::util::ObjectDataLabel
                Alpha(Omega,Delta,Kappa)
=std=bcl=> successful example check:
              serialization_handler_test.TryRead( test_basic_object, error_from_serialization_handler) == 1
=std=bcl=> TryRead test succeeded:
               test_trivial == test_basic_object ==
              bcl::util::ObjectDataLabel
                Alpha(Omega,Delta,Kappa)
=std=bcl=> successful example check:
               serialization_handler_should_escape.GetLabel().ToString() ==
              "\"" + test_string_needs_quotes + "\"" == "test=should-have-quotes"
=std=bcl=> successful example check:
               serialization_handler_should_escape.GetLabel().ToString() ==
              "\"test=should-escape-\\\"quotes\"" == "test=should-escape-\"quotes"
=std=bcl::app=> BCL Example | END  : IoSerializationBuiltin ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>    success      error error_string 
IoSerializationBuiltin_total             22          0              
total                                    22          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 64 MB
