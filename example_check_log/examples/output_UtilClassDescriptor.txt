./build/linux64_release/bin/bcl-example-static.exe Examples -exec UtilClassDescriptor 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> UtilClassDescriptor
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: UtilClassDescriptor ====================
=std=bcl=> successful example check:  GetStaticClassName< long double>() == long-double
=std=bcl=> successful example check:  GetStaticClassName< double>() == double
=std=bcl=> successful example check:  GetStaticClassName< float>() == float
=std=bcl=> successful example check:  GetStaticClassName< void>() == void
=std=bcl=> successful example check:  GetStaticClassName< bool>() == bool
=std=bcl=> successful example check:  GetStaticClassName< short>() == short
=std=bcl=> successful example check:  GetStaticClassName< int>() == int
=std=bcl=> successful example check:  GetStaticClassName< long>() == long
=std=bcl=> successful example check:  GetStaticClassName< long long>() == long-long
=std=bcl=> successful example check:  GetStaticClassName< wchar_t>() == wchar_t
=std=bcl=> successful example check:  GetStaticClassName< char>() == char
=std=bcl=> successful example check:  GetStaticClassName< size_t>() == size_t
=std=bcl=> successful example check:  GetStaticClassName< std::string>() == std::string
=std=bcl=> successful example check:  GetStaticClassName< double *>() == double*
=std=bcl=> successful example check:  GetStaticClassName< int *>() == int*
=std=bcl=> successful example check:  GetStaticClassName< void *>() == void*
=std=bcl=> successful example check:  GetStaticClassName< double &>() == double&
=std=bcl=> successful example check:  GetStaticClassName< int *&>() == int*&
=std=bcl=> successful example check:  GetStaticClassName< void * &>() == void*&
=std=bcl=> successful example check:  GetStaticClassName< const double *>() == const-double*
=std=bcl=> successful example check:  GetStaticClassName< const double *const>() == const-double*const
=std=bcl=> successful example check:  GetStaticClassName< const size_t>() == const-size_t
=std=bcl=> successful example check:  GetStaticClassName< const void *>() == const-void*
=std=bcl=> successful example check:  GetStaticClassName< const std::string>() == const-std::string
=std=bcl=> successful example check:  GetStaticClassName< const unsigned char>() == const-unsigned-char
=std=bcl=> successful example check:
               GetStaticClassName< const unsigned long long>() ==
              "const-" + GetStaticClassName< unsigned long long>() == const-unsigned-long-long
=std=bcl=> successful example check:
               GetStaticClassName< const unsigned long long *>() ==
              "const-" + GetStaticClassName< unsigned long long>() + "*" == const-unsigned-long-long*
=std=bcl=> successful example check:  GetStaticClassName< volatile long>() == volatile-long
=std=bcl=> successful example check:  GetStaticClassName< const volatile long>() == const-volatile-long
=std=bcl=> successful example check:  GetStaticClassName< const volatile long *>() == const-volatile-long*
=std=bcl=> successful example check:  GetStaticClassName< volatile long *>() == volatile-long*
=std=bcl=> successful example check:
               GetStaticClassName< const double *const *volatile const>() ==
              const-double*const*const-volatile
=std=bcl=> successful example check:
               GetStaticClassName< const double *const *const volatile>() ==
              const-double*const*const-volatile
=std=bcl=> successful example check:
               GetStaticClassName< const volatile unsigned long long *const *const volatile>() ==
              "const-volatile-" + GetStaticClassName< unsigned long long>() + "*const*const-volatile" ==
              const-volatile-unsigned-long-long*const*const-volatile
=std=bcl=> successful example check:  GetStaticClassName< const Base>() == const-bcl::Base
=std=bcl=> successful example check:  GetStaticClassName< Base *>() == bcl::Base*
=std=bcl=> successful example check:  GetStaticClassName< const volatile Base *const>() == const-volatile-bcl::Base*const
=std=bcl=> successful example check:  GetStaticClassName< classbase *>() == classbase*
=std=bcl=> successful example check:
              ( GetStaticClassName< DerivedV3< std::string, DerivedV3< const double, std::string> > >()) ==
              bcl::DerivedV3<std::string,bcl::DerivedV3<const-double,std::string>>
=std=bcl=> successful example check:
              ( GetStaticClassName< DerivedV3< std::string, DerivedV3< const double, std::string> >::EnumTest>()) ==
              bcl::DerivedV3<std::string,bcl::DerivedV3<const-double,std::string>>::EnumTest
=std=bcl=> successful example check:
              ( GetStaticClassName< DerivedV3< std::string, DerivedV3< const double, std::string> >::UnionTest>()) ==
              bcl::DerivedV3<std::string,bcl::DerivedV3<const-double,std::string>>::UnionTest
=std=bcl=> successful example check:
              ( GetStaticClassName< DerivedV3< std::string, DerivedV3< const double, std::string> >::StructTest>()) ==
              bcl::DerivedV3<std::string,bcl::DerivedV3<const-double,std::string>>::StructTest
=std=bcl=> successful example check:
              ( GetStaticClassName< DerivedV3< std::string, DerivedV3< const double, std::string> >::StructTest *>()) ==
              bcl::DerivedV3<std::string,bcl::DerivedV3<const-double,std::string>>::StructTest*
=std=bcl=> successful example check:
               util::StandardizeClassName( "const double *") ==
              util::StandardizeClassName( "double const*") == const-double*
=std=bcl=> successful example check:
              util::StandardizeClassName( "test<unsigned short const *,otest< double ** const> > const * &const") ==
              const-test<const-unsigned-short*,otest<double**const>>*const&
=std=bcl=> successful example check:
              util::StandardizeClassName ( "util::Enum<SomeLong<Possibly,Templated>,util::Typethat<may<have<nested<templates>>>>>-const" )
              == const-util::Typethat<may<have<nested<templates>>>>::Enum
=std=bcl::app=> BCL Example | END  : UtilClassDescriptor ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>    success      error error_string 
UtilClassDescriptor_total                46          0              
total                                    46          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 64 MB
