./build/linux64_release/bin/bcl-example-static.exe Examples -exec CoordMoveRotateRandomExternalReference 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> CoordMoveRotateRandomExternalReference
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: CoordMoveRotateRandomExternalReference ====================
=std=bcl=> building models from pdb chains and sse information
=std=bcl::pdb=> HELIX line is ignored, since helix class is not considered:
HELIX    3   3 PRO A   86  ILE A   90  5                                   5    
=std=bcl::pdb=> HELIX line is ignored, since helix class is not considered:
HELIX    6   6 SER A  140  GLY A  144  5                                   5    
=std=bcl::pdb=> HELIX line is ignored, since helix class is not considered:
HELIX   10  10 ALA A  223  THR A  230  5                                   8    
=std=bcl::pdb=> HELIX line is ignored, since helix class is not considered:
HELIX   20  20 PRO B   86  ILE B   90  5                                   5    
=std=bcl::pdb=> HELIX line is ignored, since helix class is not considered:
HELIX   23  23 SER B  140  GLY B  144  5                                   5    
=std=bcl::pdb=> HELIX line is ignored, since helix class is not considered:
HELIX   27  27 ALA B  223  THR B  230  5                                   8    
=std=bcl=> Finding sseLocatorSSE(chain id=B,start id=91,end id=109,use pdb id=0) in example/example_files/input/biology/1C1D.pdb test succeeded:
              located_sse.IsDefined() == 1
=std=bcl=> testing default constructor
=std=bcl=> default constructor test succeeded:
               def_construct.GetMethod() ==
              coord::MoveRotateRandomExternalReference::e_Internal == INTERNAL
=std=bcl=> successful example check:
               GetStaticClassName< coord::MoveRotateRandomExternalReference>() ==
              clone_construct->GetClassIdentifier() == bcl::coord::MoveRotateRandomExternalReference
=std=bcl=> successful example check:
               move_rotate_xyz_external.GetMethod() ==
              coord::MoveRotateRandomExternalReference::e_External == EXTERNAL
=std=bcl=> SetMethod test succeeded:
               move_rotate_xyz_external.GetMethod() ==
              coord::MoveRotateRandomExternalReference::e_External == EXTERNAL
=std=bcl=> Internal XYZ rotation test succeeded:
              math::EqualWithinAbsoluteTolerance ( ( sse->GetCenter() - sse_orig->GetCenter()).Norm(), double( 0), double( 0.0001) )
              == 1
=std=bcl=> Internal XYZ rotation test succeeded:
              math::EqualWithinAbsoluteTolerance ( sse->GetRotation().EffectiveRotationAngle(), sse_orig->GetRotation().EffectiveRotationAngle(), max_rotation_angle )
              == 1
=std=bcl=> Internal XYZ rotation w/ reference orientation test succeeded:
              math::EqualWithinAbsoluteTolerance ( ( sse->GetCenter() - linal::Vector3D( 1.0, 1.0, 1.0)).Norm(), ( sse_orig->GetCenter() - linal::Vector3D( 1.0, 1.0, 1.0)).Norm(), double( 0.0001) )
              == 1
=std=bcl=> Internal XYZ rotation w/ reference orientation test succeeded:
              math::EqualWithinAbsoluteTolerance ( sse->GetRotation().EffectiveRotationAngle(), sse_orig->GetRotation().EffectiveRotationAngle(), max_rotation_angle )
              == 1
=std=bcl=> External XYZ rotation test succeeded:
              math::EqualWithinAbsoluteTolerance ( sse->GetRotation().EffectiveRotationAngle(), sse_orig->GetRotation().EffectiveRotationAngle(), max_rotation_angle )
              == 1
=std=bcl=> Internal translation, XYZ rotation test succeeded:
              math::EqualWithinAbsoluteTolerance ( ( sse->GetCenter() - sse_orig->GetCenter()).Norm(), double( 0), double( 0.0001) )
              == 1
=std=bcl=> Internal translation, XYZ rotation test succeeded:
              math::EqualWithinAbsoluteTolerance ( sse->GetRotation().EffectiveRotationAngle(), sse_orig->GetRotation().EffectiveRotationAngle(), max_rotation_angle )
              == 1
=std=bcl=> Internal rotation, XYZ rotation test succeeded:
              math::EqualWithinAbsoluteTolerance ( sse->GetRotation().EffectiveRotationAngle(), sse_orig->GetRotation().EffectiveRotationAngle(), max_rotation_angle )
              == 1
=std=bcl=> read and write test succeeded:
               move_read.GetMethod() == move_rotate_xy_internal_translate.GetMethod() ==
              INTERNAL_TRANSLATE
=std=bcl::app=> BCL Example | END  : CoordMoveRotateRandomExternalReference ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>                success      error error_string 
CoordMoveRotateRandomExternalReference_total         14          0              
total                                                14          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 136 MB, peak physical RAM used: 68 MB
