./build/linux64_release/bin/bcl-example-static.exe Examples -exec ModelApproximatorLinearRegression 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> ModelApproximatorLinearRegression
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: ModelApproximatorLinearRegression ====================
=std=bcl=> successful example check:  default_constructor.GetTrainingData().IsDefined() == 0
=std=bcl::model=> Setting up training data with 10 points
=std=bcl=> successful example check:  iterate->GetTrainingData()->GetSize() == training_data_set_frds->GetSize() == 10
=std=bcl::model=> Multiplying matrices of size 10 X 3
=std=bcl::util=> feature Transpose * features & feature Transpose * results has run for 1e-06 seconds
=std=bcl::util=> feature Transpose * features & feature Transpose * results has run for 1e-06 seconds
=std=bcl::model=> Solving matrix of size 3
=std=bcl::util=> Decomposition/Inversion has run for 7e-06 seconds
=std=bcl::util=> Decomposition/Inversion has run for 7e-06 seconds
=std=bcl::util=> Solve Matrix has run for 5e-06 seconds
=std=bcl::model=> Calculated coefficients
=std=bcl::model=>  ObjFunction: 1.96674e-05
=std=bcl::util=> Solve Matrix has run for 5e-06 seconds
=std=bcl=> ApproximatorLinearRegression properly trains a linear model test succeeded:
               determined_coefficients_a ==
              coefficients_a == bcl::linal::Vector<float>
                3
                2.2	-1.5	9.19999	
               (+/- 0.001%)
=std=bcl=> ApproximatorLinearRegression properly trains a linear model with multiple outputs test succeeded:
              determined_coefficients_b == coefficients_b == bcl::linal::Vector<float>
                3
                -14.7	-11.1	0.799924	
               (+/- 0.001%)
=std=bcl=> the RMSD is too large, was 1.96674e-05 test succeeded:  result->Second() <= float( 0.1) == 1
=std=bcl::app=> BCL Example | END  : ModelApproximatorLinearRegression ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>           success      error error_string 
ModelApproximatorLinearRegression_total          5          0              
total                                            5          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 64 MB
