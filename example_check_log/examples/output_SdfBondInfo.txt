./build/linux64_release/bin/bcl-example-static.exe Examples -exec SdfBondInfo 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> SdfBondInfo
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: SdfBondInfo ====================
=std=bcl=> successful example check:
               sdf::BondInfo().ToMdlBondLine() == sdf::GetDefaultLine( sdf::e_BondLine) ==
                0  0  0  0  0  0  0
=std=bcl=> successful example check:  two_one_dbl_unk_iso.GetAtomIndexHigh() == 2
=std=bcl=> successful example check:  two_one_dbl_unk_iso.GetAtomIndexLow() == 1
=std=bcl=> successful example check:  zero_four_dbl_e_iso.GetAtomIndexHigh() == 4
=std=bcl=> successful example check:  zero_four_dbl_e_iso.GetAtomIndexLow() == 0
=std=bcl=> successful example check:
               zero_four_dbl_e_iso.GetConfigurationalBondType() ==
              chemistry::GetConfigurationalBondTypes().e_ConjugatedDoubleBond_E ==
              bcl::chemistry::ConfigurationalBondTypes::Enum
                "ConjugatedDoubleBond_E"
=std=bcl=> successful example check:
               two_one_dbl_unk_iso.GetConstitutionalBondType() ==
              chemistry::GetConstitutionalBondTypes().e_ConjugatedDoubleBond ==
              bcl::chemistry::ConstitutionalBondTypes::Enum
                "ConjugatedDoubleBond"
=std=bcl=> successful example check:  sdf::BondInfo().IsValid() == 0
=std=bcl=> successful example check:  zero_four_dbl_e_iso.IsValid() == 1
=std=bcl=> two_one_dbl_unk_iso.SetIsometry( chemistry::e_EIsometry) test succeeded:
              two_one_dbl_unk_iso.GetConfigurationalBondType() ==
              chemistry::GetConfigurationalBondTypes().e_ConjugatedDoubleBond_E ==
              bcl::chemistry::ConfigurationalBondTypes::Enum
                "ConjugatedDoubleBond_E"
=std=bcl=> two_one_dbl_unk_iso.SetIsometry( chemistry::e_UnknownIsometry) test succeeded:
              two_one_dbl_unk_iso.GetConfigurationalBondType() ==
              chemistry::GetConfigurationalBondTypes().e_ConjugatedDoubleBond_X ==
              bcl::chemistry::ConfigurationalBondTypes::Enum
                "ConjugatedDoubleBond_X"
=std=bcl=> successful example check:
               two_one_dbl_non_iso.ToMdlBondLine() == expected_two_one_dbl_non_iso_to_mdl_line ==
                2  3  2  0  0  0  0
=std=bcl=> successful example check:
               two_six_single.ToMdlBondLine() == expected_two_six_single_to_mdl_line ==
                3  7  1  0  0  0  0
=std=bcl=> successful example check:
               two_one_single_aro.ToMdlBondLine() == expected_two_one_single_aro_to_mdl_line ==
                2  3  1  0  0  0  0
=std=bcl=> successful example check:
               three_digit_indices.ToMdlBondLine() == expected_three_digit_indices_to_mdl_line ==
              124457  1  0  0  0  0
=std=bcl=> successful example check:
              sdf::BondInfo().ExtractMdlBondLineInfo( expected_two_one_dbl_non_iso_to_mdl_line).ToMdlBondLine() ==
              expected_two_one_dbl_non_iso_to_mdl_line ==   2  3  2  0  0  0  0
=std=bcl=> successful example check:
              sdf::BondInfo().ExtractMdlBondLineInfo( expected_two_six_single_to_mdl_line).ToMdlBondLine() ==
              expected_two_six_single_to_mdl_line ==   3  7  1  0  0  0  0
=std=bcl=> successful example check:
              sdf::BondInfo().ExtractMdlBondLineInfo( expected_two_one_single_aro_to_mdl_line).ToMdlBondLine() ==
              expected_two_one_single_aro_to_mdl_line ==   2  3  1  0  0  0  0
=std=bcl=> successful example check:
              sdf::BondInfo().ExtractMdlBondLineInfo( expected_three_digit_indices_to_mdl_line).ToMdlBondLine() ==
              expected_three_digit_indices_to_mdl_line == 124457  1  0  0  0  0
=std=bcl=> successful example check:  TestBCLObjectIOForSymmetry( two_one_dbl_non_iso, sdf::BondInfo()) == 1
=std=bcl=> successful example check:  TestBCLObjectOutputDiffers( two_one_dbl_non_iso, sdf::BondInfo()) == 1
=std=bcl::app=> BCL Example | END  : SdfBondInfo ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>    success      error error_string 
SdfBondInfo_total                        21          0              
total                                    21          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 64 MB
