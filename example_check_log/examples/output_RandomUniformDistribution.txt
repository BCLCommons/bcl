./build/linux64_release/bin/bcl-example-static.exe Examples -exec RandomUniformDistribution 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> RandomUniformDistribution
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: RandomUniformDistribution ====================
=std=bcl=> Poisson Values: bcl::storage::Vector<double>
  1000
  6
  8
  13
  10
  6
  6
  13
  6
  11
  8
  6
  8
  4
  8
  9
  14
  11
  9
  7
  11
  5
  10
  5
  3
  8
  11
  10
  6
  1
  13
  8
  11
  9
  12
  7
  9
  9
  3
  4
  7
  6
  2
  8
  5
  6
  5
  9
  5
  7
  11
  7
  10
  13
  2
  9
  9
  13
  9
  7
  11
  8
  11
  8
  5
  7
  7
  5
  13
  7
  8
  8
  8
  6
  5
  10
  9
  8
  6
  6
  7
  6
  7
  10
  9
  9
  10
  8
  4
  5
  7
  9
  6
  6
  8
  11
  7
  10
  5
  11
  9
  10
  10
  10
  12
  12
  15
  6
  6
  2
  9
  7
  12
  10
  6
  4
  8
  6
  10
  10
  8
  6
  5
  6
  5
  10
  13
  11
  12
  9
  6
  8
  5
  13
  8
  12
  9
  11
  11
  10
  13
  11
  7
  8
  6
  10
  6
  7
  8
  8
  13
  11
  6
  8
  9
  12
  9
  10
  9
  18
  1
  9
  4
  11
  7
  11
  9
  10
  7
  10
  7
  8
  6
  12
  11
  8
  6
  10
  8
  6
  17
  9
  7
  5
  7
  4
  13
  5
  9
  12
  10
  14
  9
  9
  9
  13
  7
  10
  8
  10
  12
  7
  7
  5
  10
  7
  7
  10
  5
  10
  11
  8
  5
  7
  9
  5
  13
  4
  12
  8
  6
  5
  10
  9
  11
  9
  11
  7
  8
  6
  5
  5
  8
  9
  5
  9
  11
  11
  14
  6
  5
  11
  13
  12
  7
  6
  7
  12
  8
  9
  12
  8
  8
  7
  10
  8
  10
  10
  9
  2
  4
  8
  5
  8
  11
  6
  5
  4
  3
  13
  10
  9
  5
  7
  10
  5
  9
  6
  10
  11
  9
  10
  6
  9
  11
  6
  5
  6
  11
  7
  8
  11
  7
  9
  4
  12
  6
  7
  7
  6
  7
  6
  9
  4
  6
  8
  10
  7
  11
  8
  6
  8
  9
  9
  11
  4
  10
  3
  9
  7
  9
  4
  9
  14
  5
  6
  4
  8
  8
  6
  10
  7
  5
  12
  10
  6
  5
  8
  9
  5
  6
  9
  9
  5
  8
  14
  2
  7
  7
  10
  11
  7
  11
  6
  6
  5
  4
  7
  5
  7
  7
  6
  8
  5
  8
  11
  5
  8
  8
  6
  7
  7
  12
  8
  10
  8
  6
  5
  4
  7
  3
  9
  6
  6
  8
  7
  13
  7
  6
  9
  9
  5
  6
  7
  8
  8
  9
  4
  6
  5
  12
  10
  5
  13
  7
  7
  9
  6
  5
  9
  5
  9
  12
  7
  10
  8
  5
  12
  9
  7
  13
  8
  12
  7
  8
  11
  9
  9
  12
  10
  9
  9
  9
  12
  8
  11
  5
  5
  8
  4
  11
  6
  8
  6
  7
  9
  7
  8
  8
  7
  11
  10
  11
  9
  6
  10
  10
  4
  5
  9
  7
  7
  12
  9
  8
  10
  8
  9
  6
  8
  6
  11
  6
  13
  8
  10
  10
  5
  7
  5
  8
  5
  7
  6
  6
  9
  6
  9
  7
  13
  8
  7
  8
  10
  8
  8
  12
  9
  9
  5
  6
  6
  4
  12
  8
  5
  7
  8
  6
  10
  11
  11
  5
  9
  9
  10
  12
  6
  8
  8
  9
  9
  7
  6
  15
  7
  7
  9
  3
  9
  10
  7
  8
  11
  9
  7
  10
  7
  6
  14
  9
  7
  8
  8
  9
  7
  5
  3
  9
  11
  13
  9
  4
  9
  8
  9
  4
  11
  10
  10
  7
  4
  5
  12
  5
  6
  5
  5
  10
  7
  8
  6
  14
  5
  7
  13
  5
  5
  5
  6
  9
  10
  6
  5
  6
  7
  14
  8
  12
  5
  17
  6
  7
  5
  10
  6
  11
  9
  12
  12
  6
  6
  7
  9
  10
  9
  9
  8
  11
  9
  9
  11
  7
  8
  17
  12
  10
  15
  8
  9
  5
  7
  11
  8
  5
  12
  10
  12
  5
  8
  8
  14
  12
  11
  7
  9
  4
  12
  10
  5
  4
  7
  7
  9
  13
  10
  8
  13
  11
  9
  7
  13
  14
  15
  10
  4
  6
  3
  6
  9
  9
  7
  2
  9
  9
  7
  7
  5
  7
  8
  6
  12
  8
  7
  8
  11
  12
  9
  7
  3
  6
  14
  4
  9
  3
  6
  9
  9
  5
  6
  5
  5
  5
  9
  7
  9
  11
  4
  8
  7
  8
  7
  9
  12
  6
  9
  6
  7
  7
  7
  5
  8
  3
  11
  12
  5
  8
  9
  7
  8
  8
  10
  6
  9
  11
  10
  7
  3
  9
  9
  5
  9
  12
  12
  8
  11
  12
  13
  8
  5
  10
  12
  10
  11
  9
  10
  11
  8
  10
  5
  7
  5
  7
  9
  9
  9
  6
  5
  8
  7
  8
  13
  7
  9
  7
  9
  8
  9
  7
  9
  10
  8
  3
  8
  7
  6
  11
  12
  7
  9
  9
  4
  12
  12
  6
  5
  6
  6
  8
  9
  9
  7
  8
  7
  12
  6
  12
  8
  8
  7
  10
  16
  1
  8
  5
  12
  8
  9
  12
  9
  9
  9
  12
  8
  9
  5
  11
  3
  4
  9
  5
  5
  12
  8
  14
  6
  10
  6
  8
  7
  10
  7
  8
  11
  5
  15
  6
  5
  10
  12
  6
  8
  5
  8
  8
  8
  3
  13
  8
  9
  5
  8
  6
  5
  4
  8
  9
  6
  10
  10
  13
  4
  7
  7
  9
  9
  9
  6
  7
  11
  8
  4
  9
  5
  9
  8
  7
  9
  4
  7
  11
  4
  4
  12
  9
  10
  9
  8
  4
  10
  7
  9
  11
  5
  7
  6
  9
  11
  9
  1
  11
  8
  12
  8
  12
  8
  9
  13
  14
  5
  8
  6
  9
  12
  8
  8
  12
  13
  6
  9
  8
  6
  7
  7
  4
  11
  4
  7
  4
  13
  11
  4
  9
  9
  14
  18
  5
  12
  6
  7
  7
  3
  10
  7
  12
  10
  9
  4
  8
  5
  6
  10
  14
  3
  10
  7
  9
  8
  10
  7
  9
  9
  10
  8
  5
  6
  3
  4
  5
  6
  11
  11
  6
  6
  10
  9
  4
  6
  9
  10
  10
  7
  3
  12
  5
  4
  6
  16
  10
  9
  7
  5
  13
  10
  8
  9
  5
  7
  4
  11
  6

=std=bcl=> successful example check:
               GetStaticClassName< random::UniformDistribution>() == ptr->GetClassIdentifier() ==
              bcl::random::UniformDistribution
=std=bcl=> seed: 123
=std=bcl=> constructor from seed test succeeded:  rng.GetSeed() == seed == 123
=std=bcl=> this is the range in which double random numbers are generated: [0,1)
=std=bcl=> successful example check:
               rng.GetDoubleRange() == random::DistributionInterface::GetDefaultDoubleRange() ==
              bcl::math::Range<double>
                [ 0 , 1 )
=std=bcl=> default seed: 5489
=std=bcl=> rng_default.SetSeed( seed) test succeeded:  rng_default.GetSeed() == seed == 123
=crt=bcl=> Random 64 bit unsigned int : 1196383005752522508
=crt=bcl=> Random double [0,1): 0.862193
=crt=bcl=> Random float  [0,1): 0.673466
=crt=bcl=> Random 64 bit unsigned int [0,18446744073709551615]: 13289386638624585866
=crt=bcl=> Random bool   [0,1]: 0
=crt=bcl=> Random sign : 1
=crt=bcl=> random numbers in different ranges
=crt=bcl=> Random double [0,1]: 0.615951
=crt=bcl=> Random double [0,1): 0.877854
=crt=bcl=> Random double (0,1): 0.202466
=crt=bcl=> Random  float [0,1]: 0.582767
=crt=bcl=> Random  float [0,1): 0.973147
=crt=bcl=> Random  float (0,1): 0.502139
=crt=bcl=> Random size_t [0,250): 181
=crt=bcl=> Random size_t [250,500): 460
=crt=bcl=> Random int    [-125,125): -101
=crt=bcl=> Random double [0,250): 97.423
=crt=bcl=> Random double [-125,125): -106.084
=std=bcl=> Random size_ts [0,9]: 0 2 0 1 7 7 9 6 9 9 0 0 5 9 6 8 0 1 9 7 1 4 4 4 5 
=std=bcl=> random size_t distribution in range [0,250)
=std=bcl=> bcl::math::Histogram
  		...<	<..>	<..>	<..>	<..>	<..>	<..>	<..>	<..>	<..>	<..>	>...
  center		   0.000	  12.500	  37.500	  62.500	  87.500	 112.500	 137.500	 162.500	 187.500	 212.500	 237.500	 250.000
  counts		   0.000	10076.000	9764.000	9947.000	10014.000	9978.000	9868.000	10129.000	10134.000	10041.000	10049.000	   0.000

=std=bcl=> random size_t distribution in range [250,500)
=std=bcl=> bcl::math::Histogram
  		...<	<..>	<..>	<..>	<..>	<..>	<..>	<..>	<..>	<..>	<..>	>...
  center		 250.000	 262.500	 287.500	 312.500	 337.500	 362.500	 387.500	 412.500	 437.500	 462.500	 487.500	 500.000
  counts		   0.000	9930.000	10149.000	9909.000	9948.000	9995.000	9988.000	10067.000	10073.000	10011.000	9930.000	   0.000

=std=bcl=> random    int distribution in range [-125,125)
=std=bcl=> bcl::math::Histogram
  		...<	<..>	<..>	<..>	<..>	<..>	<..>	<..>	<..>	<..>	<..>	>...
  center		-125.000	-112.500	 -87.500	 -62.500	 -37.500	 -12.500	  12.500	  37.500	  62.500	  87.500	 112.500	 125.000
  counts		   0.000	9563.000	9995.000	9923.000	10094.000	9958.000	10557.000	10111.000	10109.000	9755.000	9935.000	   0.000

=std=bcl=> random double distribution in range [0,250)
=std=bcl=> bcl::math::Histogram
  		...<	<..>	<..>	<..>	<..>	<..>	<..>	<..>	<..>	<..>	<..>	>...
  center		   0.000	  12.500	  37.500	  62.500	  87.500	 112.500	 137.500	 162.500	 187.500	 212.500	 237.500	 250.000
  counts		   0.000	9951.000	9922.000	9993.000	10185.000	9977.000	9978.000	10031.000	9986.000	9951.000	10026.000	   0.000

=std=bcl=> random double distribution in range [-125,125)
=std=bcl=> bcl::math::Histogram
  		...<	<..>	<..>	<..>	<..>	<..>	<..>	<..>	<..>	<..>	<..>	>...
  center		-125.000	-112.500	 -87.500	 -62.500	 -37.500	 -12.500	  12.500	  37.500	  62.500	  87.500	 112.500	 125.000
  counts		   0.000	9957.000	10070.000	10068.000	10029.000	10100.000	10024.000	9835.000	9952.000	9897.000	10068.000	   0.000

=std=bcl=> successful example check:  io::File::StreamsMatch( random_number_generator_out, input) == 1
=std=bcl=> build up buckets to check if the random number generator produces well distributed numbers
=std=bcl=> 90692 91016 90781 90800 91123 90837 91160 90933 90978 90698 
=std=bcl=> set a new random seed, to see that the random numbers will change
=std=bcl=> 90938 90656 91363 90906 91085 90957 91006 90873 90847 90520 
=std=bcl=> Random numbers of several types:

64 bit unsigned ints
Doubles: 0.223997 0.562168 0.548286 0.882515 0.310955 0.2547 0.692807 0.108388 0.379073 0.316463 0.864132 0.141594 0.458869 0.960462 0.498402 0.872658 0.0421369 0.817165 0.35343 0.754402 0.766519 0.419648 0.113248 0.403594 0.705664 0.57315 0.0991199 0.992569 0.370856 0.612629 0.892919 0.560298 0.47063 0.0275041 0.428056 0.67004 0.482576 0.255567 0.43847 0.315829 0.0935955 0.0271177 0.0993189 0.118558 0.791904 0.06659 0.857551 0.88944 0.51427 0.391022 0.372983 0.60785 0.815992 0.000288212 0.380434 0.125476 0.898424 0.68269 0.00344889 0.8822 0.558479 0.75292 0.692293 0.859957 0.134142 0.472353 0.437427 0.832887 0.103402 0.453173 0.19332 0.545908 0.937971 0.832414 0.0398343 0.343092 0.44764 0.715513 0.0674976 0.115493 0.204469 0.513712 0.322401 0.875248 0.91539 0.591233 0.371897 0.727115 0.742907 0.836875 0.962074 0.755932 0.797236 0.261651 0.0779987 0.779329 0.0979075 0.960618 0.87102 0.629934 0.366159 0.180952 0.391168 0.728358 0.894901 0.444224 0.435836 0.349622 0.633843 0.144455 0.0755434 0.499919 0.522272 0.812899 0.538315 0.418442 0.0241301 0.800821 0.286958 0.552386 0.393742 0.539165 0.986524 0.881642 0.561167 0.552543 0.105758 0.470123 
Floats: 0.355012 0.133797 0.941715 0.423688 0.729613 0.960155 0.177075 0.340533 0.98656 0.922436 0.773426 0.705884 0.411771 0.920491 0.216603 0.623191 0.786282 0.00420306 0.234911 0.835862 0.287526 0.482901 0.730451 0.537062 0.0685428 0.397466 0.917555 0.605235 0.76374 0.786497 0.147032 0.943731 0.0208224 0.180705 0.378715 0.417064 0.884952 0.210683 0.455489 0.916273 0.886086 0.50991 0.673403 0.0682722 0.509945 0.50609 0.386876 0.725215 0.0493633 0.484697 0.0571702 0.012753 0.918696 0.613945 0.0936002 0.580455 0.626399 0.367602 0.446083 0.628858 0.055712 0.33062 0.172992 0.654408 0.975726 0.915967 0.145972 0.241338 0.884463 0.815973 0.0527698 0.0429418 0.523382 0.076191 0.303359 0.708412 0.993633 0.291277 0.903094 0.723362 0.725559 0.686911 0.0470674 0.970821 0.99684 0.146939 0.946079 0.118166 0.599663 0.215584 0.974863 0.963592 0.688689 0.0172268 0.117315 0.304448 0.237461 0.149954 0.804279 0.329519 0.423122 0.752717 0.884965 0.527349 0.721588 0.61408 0.131111 0.738475 0.867025 0.68184 0.276893 0.115229 0.328243 0.155923 0.61803 0.0783493 0.140407 0.253112 0.744699 0.290477 0.243785 0.266143 0.134273 0.228667 0.724839 0.872451 0.0873158 0.366106 
Bools: 1 0 1 1 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 1 0 0 1 1 0 1 0 0 1 0 1 0 1 1 0 0 1 1 1 0 0 0 0 1 0 1 1 0 0 0 1 0 0 0 0 0 1 1 1 0 1 0 1 0 0 1 1 0 0 1 0 1 1 1 1 1 1 1 0 1 0 0 0 0 1 0 0 1 0 0 0 1 1 0 1 0 1 0 0 1 0 1 0 0 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 0 
Signs: 1 -1 1 1 1 -1 1 1 1 -1 -1 1 -1 -1 1 -1 1 1 1 -1 1 -1 -1 -1 1 -1 1 1 1 -1 1 -1 1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 1 1 1 -1 1 1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 1 -1 1 -1 1 -1 1 1 -1 -1 -1 1 1 1 1 1 -1 -1 1 -1 -1 -1 1 -1 1 -1 -1 1 1 -1 -1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 1 -1 1 -1 1 1 1 -1 1 1 1 1 -1 1 -1 

=std=bcl=> random number consistency on this platform test succeeded:
               io::File::StreamsMatch( input, random_numbers) ==
              1
=std=bcl=> Random numbers output: 
64 bit unsigned ints
Doubles: 0.223997 0.562168 0.548286 0.882515 0.310955 0.2547 0.692807 0.108388 0.379073 0.316463 0.864132 0.141594 0.458869 0.960462 0.498402 0.872658 0.0421369 0.817165 0.35343 0.754402 0.766519 0.419648 0.113248 0.403594 0.705664 0.57315 0.0991199 0.992569 0.370856 0.612629 0.892919 0.560298 0.47063 0.0275041 0.428056 0.67004 0.482576 0.255567 0.43847 0.315829 0.0935955 0.0271177 0.0993189 0.118558 0.791904 0.06659 0.857551 0.88944 0.51427 0.391022 0.372983 0.60785 0.815992 0.000288212 0.380434 0.125476 0.898424 0.68269 0.00344889 0.8822 0.558479 0.75292 0.692293 0.859957 0.134142 0.472353 0.437427 0.832887 0.103402 0.453173 0.19332 0.545908 0.937971 0.832414 0.0398343 0.343092 0.44764 0.715513 0.0674976 0.115493 0.204469 0.513712 0.322401 0.875248 0.91539 0.591233 0.371897 0.727115 0.742907 0.836875 0.962074 0.755932 0.797236 0.261651 0.0779987 0.779329 0.0979075 0.960618 0.87102 0.629934 0.366159 0.180952 0.391168 0.728358 0.894901 0.444224 0.435836 0.349622 0.633843 0.144455 0.0755434 0.499919 0.522272 0.812899 0.538315 0.418442 0.0241301 0.800821 0.286958 0.552386 0.393742 0.539165 0.986524 0.881642 0.561167 0.552543 0.105758 0.470123 
Floats: 0.355012 0.133797 0.941715 0.423688 0.729613 0.960155 0.177075 0.340533 0.98656 0.922436 0.773426 0.705884 0.411771 0.920491 0.216603 0.623191 0.786282 0.00420306 0.234911 0.835862 0.287526 0.482901 0.730451 0.537062 0.0685428 0.397466 0.917555 0.605235 0.76374 0.786497 0.147032 0.943731 0.0208224 0.180705 0.378715 0.417064 0.884952 0.210683 0.455489 0.916273 0.886086 0.50991 0.673403 0.0682722 0.509945 0.50609 0.386876 0.725215 0.0493633 0.484697 0.0571702 0.012753 0.918696 0.613945 0.0936002 0.580455 0.626399 0.367602 0.446083 0.628858 0.055712 0.33062 0.172992 0.654408 0.975726 0.915967 0.145972 0.241338 0.884463 0.815973 0.0527698 0.0429418 0.523382 0.076191 0.303359 0.708412 0.993633 0.291277 0.903094 0.723362 0.725559 0.686911 0.0470674 0.970821 0.99684 0.146939 0.946079 0.118166 0.599663 0.215584 0.974863 0.963592 0.688689 0.0172268 0.117315 0.304448 0.237461 0.149954 0.804279 0.329519 0.423122 0.752717 0.884965 0.527349 0.721588 0.61408 0.131111 0.738475 0.867025 0.68184 0.276893 0.115229 0.328243 0.155923 0.61803 0.0783493 0.140407 0.253112 0.744699 0.290477 0.243785 0.266143 0.134273 0.228667 0.724839 0.872451 0.0873158 0.366106 
Bools: 1 0 1 1 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 1 0 0 1 1 0 1 0 0 1 0 1 0 1 1 0 0 1 1 1 0 0 0 0 1 0 1 1 0 0 0 1 0 0 0 0 0 1 1 1 0 1 0 1 0 0 1 1 0 0 1 0 1 1 1 1 1 1 1 0 1 0 0 0 0 1 0 0 1 0 0 0 1 1 0 1 0 1 0 0 1 0 1 0 0 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 0 
Signs: 1 -1 1 1 1 -1 1 1 1 -1 -1 1 -1 -1 1 -1 1 1 1 -1 1 -1 -1 -1 1 -1 1 1 1 -1 1 -1 1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 1 1 1 -1 1 1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 1 -1 1 -1 1 -1 1 1 -1 -1 -1 1 1 1 1 1 -1 -1 1 -1 -1 -1 1 -1 1 -1 -1 1 1 -1 -1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 1 -1 1 -1 1 1 1 -1 1 1 1 1 -1 1 -1 

=std=bcl::app=> BCL Example | END  : RandomUniformDistribution ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>    success      error error_string 
RandomUniformDistribution_total          14          0              
total                                    14          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 64 MB
