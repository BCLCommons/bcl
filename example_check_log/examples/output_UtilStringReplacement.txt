./build/linux64_release/bin/bcl-example-static.exe Examples -exec UtilStringReplacement 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> UtilStringReplacement
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: UtilStringReplacement ====================
=std=bcl=> successful example check:  default_string_replacement.IsDefined() == 0
=std=bcl=> successful example check:  replace_fast_with_faster_suffix.IsDefined() == 1
=std=bcl=> successful example check:  remove_faster.IsDefined() == 1
=std=bcl=> successful example check:  replace_fast_with_faster_suffix.GetMatch() == fast
=std=bcl=> successful example check:  remove_faster.GetMatch() == faster
=std=bcl=> successful example check:
               replace_fast_with_faster_suffix.GetMatchContext() ==
              util::StringReplacement::e_Suffix == Suffix
=std=bcl=> successful example check:
               replace_fast_with_faster_exact.GetMatchContext() ==
              util::StringReplacement::e_Exact == Exact
=std=bcl=> successful example check:
              util::StringReplacement::GetMatchContextDescription( util::StringReplacement::e_Suffix) == Suffix
=std=bcl=> successful example check:
              replace_fast_with_faster_any.FindAllMatches( "fast faster fastest breakfast breakfaster").size() == size_t( 5)
              == 5
=std=bcl=> successful example check:
              replace_fast_with_faster_prefix.FindAllMatches( "fast faster fastest breakfast breakfaster").size() ==
              size_t( 3) == 3
=std=bcl=> successful example check:
              replace_fast_with_faster_suffix.FindAllMatches( "fast faster fastest breakfast breakfaster").size() ==
              size_t( 2) == 2
=std=bcl=> successful example check:
              replace_fast_with_faster_exact.FindAllMatches( "fast faster fastest breakfast breakfaster").size() ==
              size_t( 0) == 0
=std=bcl=> successful example check:
              replace_fast_with_faster_word.FindAllMatches( "fast faster fastest breakfast breakfaster").size() ==
              size_t( 1) == 1
=std=bcl=> successful example check:
              replace_fast_with_faster_any.FindNextMatch( "fast faster fastest breakfast breakfaster", 0) == size_t( 0) == 0
=std=bcl=> successful example check:
              replace_fast_with_faster_any.FindNextMatch( "fast faster fastest breakfast breakfaster", 1) == size_t( 5) == 5
=std=bcl=> ReplaceEachIn fast faster fastest breakfast breakfaster using bcl::util::StringReplacement
                Any  "fast"  "faster" test succeeded:
              test_string_copy == faster fasterer fasterest breakfaster breakfasterer
=std=bcl=> ReplaceEachIn fast faster fastest breakfast breakfaster using bcl::util::StringReplacement
                Exact  "fast"  "faster" test succeeded:
              test_string_copy == test_string == fast faster fastest breakfast breakfaster
=std=bcl=> ReplaceEachIn fast faster fastest breakfast breakfaster using bcl::util::StringReplacement
                Prefix  "fast"  "faster" test succeeded:
              test_string_copy == faster fasterer fasterest breakfast breakfaster
=std=bcl=> ReplaceEachIn fast faster fastest breakfast breakfaster using bcl::util::StringReplacement
                Suffix  "fast"  "faster" test succeeded:
              test_string_copy == faster faster fastest breakfaster breakfaster
=std=bcl=> ReplaceEachIn fast faster fastest breakfast breakfaster using bcl::util::StringReplacement
                Word  "fast"  "faster" test succeeded:
              test_string_copy == faster faster fastest breakfast breakfaster
=std=bcl=> ReplaceAllIn fast fast fast fast fast and faster using bcl::util::StringReplacement
                Word  "fast fast"  "fast" test succeeded:
              fast5_and_faster_replaced == fast and faster
=std=bcl=> ReplaceEachWithExclusions, exclusion is not removing faster, from fast faster fastest breakfast breakfaster using bcl::util::StringReplacement
                Prefix  "fast"  "faster" test succeeded:
              test_string_copy == faster faster fasterest breakfast breakfaster
=std=bcl=> successful example check:  util::StringReplacement::IsNonVariableCharacter( 'c') == 0
=std=bcl=> successful example check:  util::StringReplacement::IsNonVariableCharacter( 'C') == 0
=std=bcl=> successful example check:  util::StringReplacement::IsNonVariableCharacter( '+') == 1
=std=bcl=> successful example check:  util::StringReplacement::IsNonVariableCharacter( ' ') == 1
=std=bcl=> successful example check:  util::StringReplacement::IsNonVariableCharacter( '_') == 0
=std=bcl=> successful example check:  util::StringReplacement::SafeSubstr( "", 5, 1) ==
=std=bcl=> successful example check:  util::StringReplacement::SafeSubstr( "hello", 5, 3) ==
=std=bcl=> successful example check:  util::StringReplacement::SafeSubstr( "hello", 0, 8) == hello
=std=bcl=> successful example check:  util::StringReplacement::SafeSubstr( "hello", 3, 1) == l
=std=bcl=> successful example check:  util::StringReplacement::SafeReplaceAt( "", 5, 1, "hello ") == hello 
=std=bcl=> successful example check:  util::StringReplacement::SafeReplaceAt( "hello", 5, 3, " tokyo") == hello tokyo
=std=bcl=> successful example check:  util::StringReplacement::SafeReplaceAt( "hello", 0, 8, " tokyo") ==  tokyo
=std=bcl=> successful example check:  util::StringReplacement::SafeReplaceAt( "hello", 3, 1, " tokyo") == hel tokyoo
=std=bcl=> successful example check:  replace_fast_with_faster_exact < replace_fast_with_faster_any == 1
=std=bcl=> successful example check:  replace_fast_with_faster_any < replace_fast_with_faster_exact == 0
=std=bcl=> successful example check:  replace_fast_with_faster_exact < remove_faster == 1
=std=bcl=> successful example check:  replace_fast_with_faster_suffix < replace_fast_with_faster_prefix == 1
=std=bcl=> successful example check:  replace_fast_with_faster_prefix < replace_fast_with_faster_suffix == 0
=std=bcl::app=> BCL Example | END  : UtilStringReplacement ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>    success      error error_string 
UtilStringReplacement_total              40          0              
total                                    40          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 64 MB
