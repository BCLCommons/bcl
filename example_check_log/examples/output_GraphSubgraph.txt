./build/linux64_release/bin/bcl-example-static.exe Examples -exec GraphSubgraph 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> GraphSubgraph
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: GraphSubgraph ====================
=std=bcl=> successful example check:  default_subgraph.GetSize() == 0
=std=bcl=> successful example check:  default_subgraph.ToGraph().GetSize() == 0
=std=bcl=> successful example check:  subgraph_empty.GetSize() == 0
=std=bcl=> successful example check:  subgraph_0.GetSize() == 1
=std=bcl=> successful example check:  subgraph_3_1.GetSize() == 2
=std=bcl=> successful example check:  subgraph_3_1_4.GetSize() == 3
=std=bcl=> successful example check:
               subgraph_empty.GetParentGraphPtr() == graph_ptr ==
              bcl::util::OwnPtr<const-bcl::graph::ConstGraph<size_t,size_t>>
=std=bcl=> successful example check:  subgraph_empty.GetVertexIndices().GetSize() == 0
=std=bcl=> successful example check:  subgraph_0.GetVertexIndices()( 0) == 0
=std=bcl=> successful example check:  subgraph_3_1.GetVertexIndices()( 0) == 3
=std=bcl=> successful example check:  subgraph_3_1.GetVertexIndices()( 1) == 1
=std=bcl=> successful example check:  subgraph_3_1.ToGraph().GetSize() == 2
=std=bcl=> successful example check:  subgraph_3_1.ToGraph().NumEdges() == 2
=std=bcl=> successful example check:  subgraph_3_1_4.ToGraph().NumEdges() == 4
=std=bcl=> GetComplement test succeeded:  complement_3_1.GetSize() == 3
=std=bcl=> GetComplement test succeeded:  complement_3_1( 0) == 0
=std=bcl=> GetComplement test succeeded:  complement_3_1( 1) == 2
=std=bcl=> GetComplement test succeeded:  complement_3_1( 2) == 4
=std=bcl=> GetEdgeIndices test succeeded:  edge_indices_vec.GetSize() == 4
=std=bcl=> GetEdgeIndices test succeeded:
               edge_indices_vec( 0) == ( storage::Pair< size_t, size_t>( 3, 1)) ==
              bcl::storage::Pair<size_t,size_t>
                3
                1
=std=bcl=> GetEdgeIndices test succeeded:
               edge_indices_vec( 1) == ( storage::Pair< size_t, size_t>( 3, 4)) ==
              bcl::storage::Pair<size_t,size_t>
                3
                4
=std=bcl=> GetEdgeIndices test succeeded:
               edge_indices_vec( 2) == ( storage::Pair< size_t, size_t>( 1, 3)) ==
              bcl::storage::Pair<size_t,size_t>
                1
                3
=std=bcl=> GetEdgeIndices test succeeded:
               edge_indices_vec( 3) == ( storage::Pair< size_t, size_t>( 4, 3)) ==
              bcl::storage::Pair<size_t,size_t>
                4
                3
=std=bcl=> GetIdsOfInteriorVertices test succeeded:  interior_vertices.GetSize() == 2
=std=bcl=> GetIdsOfInteriorVertices test succeeded:  interior_vertices.FirstElement() == 3
=std=bcl=> GetIdsOfInteriorVertices test succeeded:  interior_vertices.LastElement() == 4
=std=bcl=> successful example check:  subgraph_3_1.GetIdsOfInteriorVertices().GetSize() == 0
=std=bcl=> GetAdjacentEdgeIndices test succeeded:  adjacent_edge_indices.GetSize() == 1
=std=bcl=> GetAdjacentEdgeIndices test succeeded:
               adjacent_edge_indices.FirstElement() ==
              ( storage::Pair< size_t, size_t>( 1, 0)) == bcl::storage::Pair<size_t,size_t>
                1
                0
=std=bcl::app=> BCL Example | END  : GraphSubgraph ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>    success      error error_string 
GraphSubgraph_total                      29          0              
total                                    29          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 64 MB
