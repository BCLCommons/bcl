./build/linux64_release/bin/bcl-example-static.exe Examples -exec GraphRing 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> GraphRing
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: GraphRing ====================
=std=bcl=> successful example check:  default_Ring.GetSize() == 0
=std=bcl=> successful example check:  default_Ring.Contains( 0) == 0
=std=bcl=> successful example check:  one_three_five.Identical( three_five_one) == 1
=std=bcl=> successful example check:  one_three_five.Contains( 0) == 0
=std=bcl=> successful example check:  one_three_five.Contains( 1) == 1
=std=bcl=> successful example check:  one_three_five.Contains( 3) == 1
=std=bcl=> successful example check:  one_three_five.GetVertices()( 0) == size_t( 1) == 1
=std=bcl=> successful example check:  one_three_five.GetVertices()( 1) == size_t( 3) == 3
=std=bcl=> successful example check:  one_three_five.GetVertices()( 2) == size_t( 5) == 5
=std=bcl=> successful example check:  one_three_five.FirstElement() == size_t( 1) == 1
=std=bcl=> successful example check:  one_three_five.LastElement() == size_t( 5) == 5
=std=bcl=> successful example check:  one_three_five.GetSize() == size_t( 3) == 3
=std=bcl=> successful example check:  one_four.Identical( four_one) == 1
=std=bcl=> successful example check:  four_one_six_five.Identical( one_four_six_five) == 0
=std=bcl=> successful example check:  five_six_one_four.Identical( four_one_six_five) == 1
=std=bcl=> successful example check:
               one_four_six_five.GetOverlap( one_three_five).GetVertices().GetSize() == size_t( 2)
              == 2
=std=bcl=> successful example check:  one_four_six_five.GetOverlap( one_three_five).FirstElement() == size_t( 5) == 5
=std=bcl=> successful example check:  one_four_six_five.GetOverlap( one_three_five).LastElement() == size_t( 1) == 1
=std=bcl=> successful example check:  one_four_six_five.GetOverlap( one_four_six_five).GetSize() == size_t( 4) == 4
=std=bcl=> successful example check:  removed_path.GetVertices().GetSize() == size_t( 2) == 2
=std=bcl=> successful example check:  removed_path.GetVertices()( 0) == size_t( 4) == 4
=std=bcl=> successful example check:  removed_path.GetVertices()( 1) == size_t( 6) == 6
=std=bcl=> successful example check:  fused_ring.Identical( graph::Ring::FuseRings( large_ring_a, small_ring_a)) == 1
=std=bcl=> successful example check:  fused_ring.Identical( graph::Ring::FuseRings( large_ring_a, small_ring_b)) == 1
=std=bcl=> successful example check:  fused_ring.Identical( graph::Ring::FuseRings( large_ring_a, small_ring_c)) == 1
=std=bcl=> successful example check:  fused_ring.Identical( graph::Ring::FuseRings( large_ring_b, small_ring_a)) == 1
=std=bcl=> successful example check:  fused_ring.Identical( graph::Ring::FuseRings( large_ring_b, small_ring_b)) == 1
=std=bcl=> successful example check:  fused_ring.Identical( graph::Ring::FuseRings( large_ring_b, small_ring_c)) == 1
=std=bcl=> successful example check:  fused_ring.Identical( graph::Ring::FuseRings( large_ring_c, small_ring_a)) == 1
=std=bcl=> successful example check:  fused_ring.Identical( graph::Ring::FuseRings( large_ring_c, small_ring_b)) == 1
=std=bcl=> successful example check:  fused_ring.Identical( graph::Ring::FuseRings( large_ring_c, small_ring_c)) == 1
=std=bcl=> successful example check:  bridge_ring.Identical( graph::Ring::FuseRings( ring_a, ring_b)) == 1
=std=bcl::app=> BCL Example | END  : GraphRing ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>    success      error error_string 
GraphRing_total                          32          0              
total                                    32          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 64 MB
