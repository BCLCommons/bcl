./build/linux64_release/bin/bcl-example-static.exe Examples -exec ClusterOutputPymolLabelSmallMolecule 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> ClusterOutputPymolLabelSmallMolecule
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: ClusterOutputPymolLabelSmallMolecule ====================
=crt=bcl::util=> Read in table has run for 9.7e-05 seconds
=crt=bcl::util=>  Input Table HandleInput  has run for 0.000167 seconds
=crt=bcl::util=>  initializenode  has run for 3e-06 seconds
=crt=bcl::util=>  get_initial_linkages  has run for 2.6e-05 seconds
=std=bcl::cluster=> initial linkages_nodes size 10
=std=bcl=> successful example check:
               io::File::FilesMatch( dendrogram_basename + ".py", dendrogram_filename_correct) ==
              1
=std=bcl=> successful example check:  io::File::FilesMatch( mdl_files[ file], mdl_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( mdl_files[ file], mdl_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( mdl_files[ file], mdl_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( mdl_files[ file], mdl_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( mdl_files[ file], mdl_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( node_files[ file], node_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( node_files[ file], node_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( node_files[ file], node_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( node_files[ file], node_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( node_files[ file], node_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( node_files[ file], node_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( node_files[ file], node_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( node_files[ file], node_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( node_files[ file], node_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( node_files[ file], node_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( node_files[ file], node_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( node_files[ file], node_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( node_files[ file], node_files[ file] + "_correct") == 1
=std=bcl=> successful example check:
               io::File::FilesMatch( dendrogram_basename + ".py", dendrogram_filename_correct) ==
              1
=std=bcl=> successful example check:  io::File::FilesMatch( mdl_files[ file], mdl_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( mdl_files[ file], mdl_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( mdl_files[ file], mdl_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( mdl_files[ file], mdl_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( mdl_files[ file], mdl_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( node_files[ file], node_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( node_files[ file], node_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( node_files[ file], node_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( node_files[ file], node_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( node_files[ file], node_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( node_files[ file], node_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( node_files[ file], node_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( node_files[ file], node_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( node_files[ file], node_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( node_files[ file], node_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( node_files[ file], node_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( node_files[ file], node_files[ file] + "_correct") == 1
=std=bcl=> successful example check:  io::File::FilesMatch( node_files[ file], node_files[ file] + "_correct") == 1
=std=bcl=> successful example check:
               param_constr.GetClassIdentifier() == GetStaticClassName( param_constr) ==
              bcl::cluster::OutputPymolLabelSmallMolecule<double>
=std=bcl=> successful example check:
               given_text == correct_text ==
              bcl::storage::Vector<std::string>
                3
                "cmd.load("
                "\"test\","
                "\"test_obj\")"
=std=bcl=> successful example check:
               given_text == correct_text ==
              bcl::storage::Vector<std::string>
                5
                "cmd.translate("
                "[0,"
                "1,"
                "2],"
                "\"test_obj\")"
=std=bcl=> successful example check:
               given_text == correct_text ==
              bcl::storage::Vector<std::string>
                6
                "center_0=[]"
                "axes=[["
                "0.0,0.0,0.05],[0.0,0.05,0.0],[0.0,0.0,0.0]]"
                "cyl_text(center_0,plain,[0,1.75,2.86964],'0',0.00625,color=Magenta,axes=axes)"
                "labels_all.extend("
                "center_0)"
=std=bcl::app=> BCL Example | END  : ClusterOutputPymolLabelSmallMolecule ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>              success      error error_string 
ClusterOutputPymolLabelSmallMolecule_total         42          0              
total                                              42          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 64 MB
