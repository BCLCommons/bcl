./build/linux64_release/bin/bcl-example-static.exe Examples -exec FunctionBinaryCached 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> FunctionBinaryCached
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: FunctionBinaryCached ====================
=std=bcl=> Clone test succeeded:
               sp_evaluate_grade_exam == sp_clone_cache_function_grade_exam->GetFunction() ==
              bcl::util::ShPtr<bcl::ExampleFunctionBinaryCached::GradeExam>
                12345678
                bcl::ExampleFunctionBinaryCached::GradeExam
=std=bcl=> Clone test succeeded:
               sp_evaluate_grade_diff == sp_clone_cache_function_grade_diff->GetFunction() ==
              bcl::util::ShPtr<bcl::ExampleFunctionBinaryCached::GradeDifference>
                12345678
                bcl::ExampleFunctionBinaryCached::GradeDifference
=std=bcl=> successful example check:
              ( GetStaticClassName< function::BinaryCached< const Student, const Student, double> >()) ==
              cache_function_grade_diff.GetClassIdentifier() ==
              bcl::function::BinaryCached<const-bcl::ExampleFunctionBinaryCached::Student,const-bcl::ExampleFunctionBinaryCached::Student,double>
=std=bcl=> successful example check:
               sp_evaluate_grade_exam == cache_function_grade_exam.GetFunction() ==
              bcl::util::ShPtr<bcl::ExampleFunctionBinaryCached::GradeExam>
                12345678
                bcl::ExampleFunctionBinaryCached::GradeExam
=std=bcl=> successful example check:  cache_function_grade_exam.GetCacheSize() == 0
=std=bcl=> successful example check:
               cache_function_grade_exam.AddSignalHandlerForArgument( &Student::GetOnChangeSignal)
              == 1
=std=bcl=> should not be able to successfully register the same signal handler twice test succeeded:
              cache_function_grade_exam.AddSignalHandlerForArgument( &Student::GetOnChangeSignal) == 0
=std=bcl=> Cache function of GradeExam test succeeded:  CACHE_FUNC( TEACHER, STUDENT) == actual_grade_value == 2.8
=std=bcl=> Cache size of GradeExam test succeeded:  CACHE_FUNC.GetCacheSize() == 1
=std=bcl=> Calls to GradExam::operator() test succeeded:
               GRADER->GetUseCount() ==
              initial_gradings + size_t( !SHOULD_BE_CACHED) == 2
=std=bcl=> Cache function of GradeExam test succeeded:  CACHE_FUNC( TEACHER, STUDENT) == actual_grade_value == 2.8
=std=bcl=> Cache size of GradeExam test succeeded:  CACHE_FUNC.GetCacheSize() == 1
=std=bcl=> Calls to GradExam::operator() test succeeded:
               GRADER->GetUseCount() ==
              initial_gradings + size_t( !SHOULD_BE_CACHED) == 4
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeAverage test succeeded:
              CACHE_FUNC( STUDENT_A, STUDENT_B) == actual_grade_value_a_b == 1.9
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeAverage test succeeded:
              CACHE_FUNC( STUDENT_B, STUDENT_A) == actual_grade_value_b_a == 1.9
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeAverage test succeeded:
              CACHE_FUNC.GetCacheSize() == expected_cache_size == 1
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeAverage test succeeded:
              GRADER->GetUseCount() == initial_gradings + ( SHOULD_BE_IN_CACHE ? 0 : expected_cache_size) == 3
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeDifference test succeeded:
              CACHE_FUNC( STUDENT_A, STUDENT_B) == actual_grade_value_a_b == 0.4
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeDifference test succeeded:
              CACHE_FUNC( STUDENT_B, STUDENT_A) == actual_grade_value_b_a == -0.4
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeDifference test succeeded:
              CACHE_FUNC.GetCacheSize() == expected_cache_size == 2
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeDifference test succeeded:
              GRADER->GetUseCount() == initial_gradings + ( SHOULD_BE_IN_CACHE ? 0 : expected_cache_size) == 4
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeDifference test succeeded:
              CACHE_FUNC( STUDENT_A, STUDENT_B) == actual_grade_value_a_b == 0.4
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeDifference test succeeded:
              CACHE_FUNC( STUDENT_B, STUDENT_A) == actual_grade_value_a_b == 0.4
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeDifference test succeeded:
              CACHE_FUNC.GetCacheSize() == expected_cache_size == 1
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeDifference test succeeded:
              GRADER->GetUseCount() == initial_gradings + ( SHOULD_BE_IN_CACHE ? 0 : expected_cache_size) == 7
=std=bcl=> Cache function of GradeExam test succeeded:  CACHE_FUNC( TEACHER, STUDENT) == actual_grade_value == 2.8
=std=bcl=> Cache size of GradeExam test succeeded:  CACHE_FUNC.GetCacheSize() == 1
=std=bcl=> Calls to GradExam::operator() test succeeded:
               GRADER->GetUseCount() ==
              initial_gradings + size_t( !SHOULD_BE_CACHED) == 5
=std=bcl=> Cache function of GradeExam test succeeded:  CACHE_FUNC( TEACHER, STUDENT) == actual_grade_value == 2.8
=std=bcl=> Cache size of GradeExam test succeeded:  CACHE_FUNC.GetCacheSize() == 1
=std=bcl=> Calls to GradExam::operator() test succeeded:
               GRADER->GetUseCount() ==
              initial_gradings + size_t( !SHOULD_BE_CACHED) == 6
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeAverage test succeeded:
              CACHE_FUNC( STUDENT_A, STUDENT_B) == actual_grade_value_a_b == 1.9
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeAverage test succeeded:
              CACHE_FUNC( STUDENT_B, STUDENT_A) == actual_grade_value_b_a == 1.9
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeAverage test succeeded:
              CACHE_FUNC.GetCacheSize() == expected_cache_size == 1
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeAverage test succeeded:
              GRADER->GetUseCount() == initial_gradings + ( SHOULD_BE_IN_CACHE ? 0 : expected_cache_size) == 5
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeDifference test succeeded:
              CACHE_FUNC( STUDENT_A, STUDENT_B) == actual_grade_value_a_b == 0.4
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeDifference test succeeded:
              CACHE_FUNC( STUDENT_B, STUDENT_A) == actual_grade_value_b_a == -0.4
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeDifference test succeeded:
              CACHE_FUNC.GetCacheSize() == expected_cache_size == 2
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeDifference test succeeded:
              GRADER->GetUseCount() == initial_gradings + ( SHOULD_BE_IN_CACHE ? 0 : expected_cache_size) == 9
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeDifference test succeeded:
              CACHE_FUNC( STUDENT_A, STUDENT_B) == actual_grade_value_a_b == 0.4
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeDifference test succeeded:
              CACHE_FUNC( STUDENT_B, STUDENT_A) == actual_grade_value_a_b == 0.4
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeDifference test succeeded:
              CACHE_FUNC.GetCacheSize() == expected_cache_size == 1
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeDifference test succeeded:
              GRADER->GetUseCount() == initial_gradings + ( SHOULD_BE_IN_CACHE ? 0 : expected_cache_size) == 11
=std=bcl=> Cache function of GradeExam test succeeded:  CACHE_FUNC( TEACHER, STUDENT) == actual_grade_value == 2.6
=std=bcl=> Cache size of GradeExam test succeeded:  CACHE_FUNC.GetCacheSize() == 1
=std=bcl=> Calls to GradExam::operator() test succeeded:
               GRADER->GetUseCount() ==
              initial_gradings + size_t( !SHOULD_BE_CACHED) == 8
=std=bcl=> successful example check:
               cache_function_grade_exam_no_invalidate( math_teacher, joe) == original_grade ==
              2.8
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeAverage test succeeded:
              CACHE_FUNC( STUDENT_A, STUDENT_B) == actual_grade_value_a_b == 1.7
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeAverage test succeeded:
              CACHE_FUNC( STUDENT_B, STUDENT_A) == actual_grade_value_b_a == 1.7
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeAverage test succeeded:
              CACHE_FUNC.GetCacheSize() == expected_cache_size == 1
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeAverage test succeeded:
              GRADER->GetUseCount() == initial_gradings + ( SHOULD_BE_IN_CACHE ? 0 : expected_cache_size) == 8
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeDifference test succeeded:
              CACHE_FUNC( STUDENT_A, STUDENT_B) == actual_grade_value_a_b == 0
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeDifference test succeeded:
              CACHE_FUNC( STUDENT_B, STUDENT_A) == actual_grade_value_b_a == 0
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeDifference test succeeded:
              CACHE_FUNC.GetCacheSize() == expected_cache_size == 2
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeDifference test succeeded:
              GRADER->GetUseCount() == initial_gradings + ( SHOULD_BE_IN_CACHE ? 0 : expected_cache_size) == 15
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeDifference test succeeded:
              CACHE_FUNC( STUDENT_A, STUDENT_B) == actual_grade_value_a_b == 0
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeDifference test succeeded:
              CACHE_FUNC( STUDENT_B, STUDENT_A) == actual_grade_value_a_b == 0
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeDifference test succeeded:
              CACHE_FUNC.GetCacheSize() == expected_cache_size == 1
=std=bcl=> Symmetry handling for cache on bcl::ExampleFunctionBinaryCached::GradeDifference test succeeded:
              GRADER->GetUseCount() == initial_gradings + ( SHOULD_BE_IN_CACHE ? 0 : expected_cache_size) == 18
=std=bcl=> I/O should read a defined binary cache function test succeeded:
              cache_function_grade_exam_read.GetFunction().IsDefined() == 1
=std=bcl=> I/O test succeeded:
               cache_function_grade_exam_read( math_teacher, joe) ==
              cache_function_grade_exam( math_teacher, joe) == 2.6
=std=bcl=> I/O respects symmetry test succeeded:
              cache_function_grade_avg_sym_read.GetFunction().IsDefined() && cache_function_grade_avg_sym_read.IsSymmetric()
              == 1
=std=bcl::app=> BCL Example | END  : FunctionBinaryCached ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>    success      error error_string 
FunctionBinaryCached_total               64          0              
total                                    64          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 64 MB
