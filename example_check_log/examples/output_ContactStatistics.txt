./build/linux64_release/bin/bcl-example-static.exe Examples -exec ContactStatistics 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> ContactStatistics
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: ContactStatistics ====================
=std=bcl::pdb=> HELIX line is ignored, since helix class is not considered:
HELIX    2  H2 LEU A   56  TYR A   59  5                                   4    
=std=bcl=> successful example check:  stats_enum_counts.GetUseRatio() == 0
=std=bcl=> successful example check:
               stats_enum_counts.GetSequenceSeparationRange() == range_default ==
              bcl::math::Range<size_t>
                [ 6 , nan ]
=std=bcl=> successful example check:  stats_enum_counts_short.GetUseRatio() == 0
=std=bcl=> successful example check:
               stats_enum_counts_short.GetSequenceSeparationRange() == range_short ==
              bcl::math::Range<size_t>
                [ 6 , 11 ]
=std=bcl=> successful example check:  stats_enum_counts_mid.GetUseRatio() == 0
=std=bcl=> successful example check:
               stats_enum_counts_mid.GetSequenceSeparationRange() == range_mid ==
              bcl::math::Range<size_t>
                [ 12 , 23 ]
=std=bcl=> successful example check:  stats_enum_counts_long.GetUseRatio() == 0
=std=bcl=> successful example check:
               stats_enum_counts_long.GetSequenceSeparationRange() == range_long ==
              bcl::math::Range<size_t>
                [ 24 , nan ]
=std=bcl=> successful example check:  stats_enum_ratio_short.GetUseRatio() == 1
=std=bcl=> successful example check:
               stats_enum_ratio_short.GetSequenceSeparationRange() == range_short ==
              bcl::math::Range<size_t>
                [ 6 , 11 ]
=std=bcl=> successful example check:  stats_enum_ratio_mid.GetUseRatio() == 1
=std=bcl=> successful example check:
               stats_enum_ratio_mid.GetSequenceSeparationRange() == range_mid ==
              bcl::math::Range<size_t>
                [ 12 , 23 ]
=std=bcl=> successful example check:  stats_enum_ratio_long.GetUseRatio() == 1
=std=bcl=> successful example check:
               stats_enum_ratio_long.GetSequenceSeparationRange() == range_long ==
              bcl::math::Range<size_t>
                [ 24 , nan ]
=std=bcl=> successful example check:  stats_counts.GetUseRatio() == 0
=std=bcl=> successful example check:
               stats_counts.GetSequenceSeparationRange() == range_default ==
              bcl::math::Range<size_t>
                [ 6 , nan ]
=std=bcl=> successful example check:  stats_counts_long.GetUseRatio() == 0
=std=bcl=> successful example check:
               stats_counts_long.GetSequenceSeparationRange() == range_long ==
              bcl::math::Range<size_t>
                [ 24 , nan ]
=std=bcl=> successful example check:  stats_ratio_long.GetUseRatio() == 1
=std=bcl=> successful example check:
               stats_ratio_long.GetSequenceSeparationRange() == range_long ==
              bcl::math::Range<size_t>
                [ 24 , nan ]
=std=bcl=> successful example check:
              contact::Statistics::GetStatisticTypeDescriptor( contact::Statistics::e_NumberContacts) == NumberContacts
=std=bcl=> successful example check:
              contact::Statistics::GetStatisticTypeDescriptor( contact::Statistics::e_NumberContactsShort) ==
              NumberContactsShort
=std=bcl=> successful example check:
              contact::Statistics::GetStatisticTypeDescriptor( contact::Statistics::e_NumberContactsMid) ==
              NumberContactsMid
=std=bcl=> successful example check:
              contact::Statistics::GetStatisticTypeDescriptor( contact::Statistics::e_NumberContactsLong) ==
              NumberContactsLong
=std=bcl=> successful example check:
              contact::Statistics::GetStatisticTypeDescriptor( contact::Statistics::e_RatioContactsShort) ==
              RatioContactsShort
=std=bcl=> successful example check:
              contact::Statistics::GetStatisticTypeDescriptor( contact::Statistics::e_RatioContactsMid) == RatioContactsMid
=std=bcl=> successful example check:
              contact::Statistics::GetStatisticTypeDescriptor( contact::Statistics::e_RatioContactsLong) ==
              RatioContactsLong
=std=bcl=> Testing operator()
=std=bcl=> counts_total: 134
=std=bcl=> successful example check:  counts_total == expected_counts_total == 134
=std=bcl=> counts_total_b: 134
=std=bcl=> successful example check:  counts_total_b == expected_counts_total == 134
=std=bcl=> counts_short: 25
=std=bcl=> successful example check:  counts_short == expected_counts_short == 25
=std=bcl=> counts_mid: 29
=std=bcl=> successful example check:  counts_mid == expected_counts_mid == 29
=std=bcl=> counts_long: 80
=std=bcl=> successful example check:  counts_long == expected_counts_long == 80
=std=bcl=> ratio_short: 18.6567
=std=bcl=> successful example check:  ratio_short == expected_ratio_short == 18.6567
=std=bcl=> ratio_mid: 21.6418
=std=bcl=> successful example check:  ratio_mid == expected_ratio_mid == 21.6418
=std=bcl=> ratio_long: 59.7015
=std=bcl=> successful example check:  ratio_long == expected_ratio_long == 59.7015
=std=bcl=> successful example check:  stats_counts.GetUseRatio() == stats_read.GetUseRatio() == 0
=std=bcl=> successful example check:
               stats_counts.GetSequenceSeparationRange() ==
              stats_read.GetSequenceSeparationRange() == bcl::math::Range<size_t>
                [ 6 , nan ]
=std=bcl=> counts read: 134
=std=bcl=> successful example check:  counts_total_read == expected_counts_total == 134
=std=bcl::app=> BCL Example | END  : ContactStatistics ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>    success      error error_string 
ContactStatistics_total                  38          0              
total                                    38          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 65 MB
