./build/linux64_release/bin/bcl-example-static.exe Examples -exec ClusterOutputPymolLabelString 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> ClusterOutputPymolLabelString
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: ClusterOutputPymolLabelString ====================
=crt=bcl::util=> Read in table has run for 9e-05 seconds
=crt=bcl::util=>  Input Table HandleInput  has run for 0.000146 seconds
=crt=bcl::util=>  initializenode  has run for 2e-06 seconds
=crt=bcl::util=>  get_initial_linkages  has run for 1.9e-05 seconds
=std=bcl::cluster=> initial linkages_nodes size 6
=std=bcl=> successful example check:
              io::File::FilesMatchWithinAbsoluteTolerance ( dendrogram_basename + ".py", dendrogram_filename_correct, 0.001 )
              == 1
=std=bcl=> successful example check:
              io::File::FilesMatch ( dendrogram_basename + "_node_" + util::Format()( list) + ".ls", AddExampleOutputPathToFilename( dendrogram, "dendrogram_OutputPymolLabelString_node_" + util::Format()( list) + "_correct.ls") )
              == 1
=std=bcl=> successful example check:
              io::File::FilesMatch ( dendrogram_basename + "_node_" + util::Format()( list) + ".ls", AddExampleOutputPathToFilename( dendrogram, "dendrogram_OutputPymolLabelString_node_" + util::Format()( list) + "_correct.ls") )
              == 1
=std=bcl=> successful example check:
              io::File::FilesMatch ( dendrogram_basename + "_node_" + util::Format()( list) + ".ls", AddExampleOutputPathToFilename( dendrogram, "dendrogram_OutputPymolLabelString_node_" + util::Format()( list) + "_correct.ls") )
              == 1
=std=bcl=> successful example check:
              io::File::FilesMatch ( dendrogram_basename + "_node_" + util::Format()( list) + ".ls", AddExampleOutputPathToFilename( dendrogram, "dendrogram_OutputPymolLabelString_node_" + util::Format()( list) + "_correct.ls") )
              == 1
=std=bcl=> successful example check:
              io::File::FilesMatch ( dendrogram_basename + "_node_" + util::Format()( list) + ".ls", AddExampleOutputPathToFilename( dendrogram, "dendrogram_OutputPymolLabelString_node_" + util::Format()( list) + "_correct.ls") )
              == 1
=std=bcl=> successful example check:
              io::File::FilesMatch ( dendrogram_basename + "_node_" + util::Format()( list) + ".ls", AddExampleOutputPathToFilename( dendrogram, "dendrogram_OutputPymolLabelString_node_" + util::Format()( list) + "_correct.ls") )
              == 1
=std=bcl=> successful example check:
              io::File::FilesMatchWithinAbsoluteTolerance ( dendrogram_basename + ".py", dendrogram_filename_correct, 0.001 )
              == 1
=std=bcl=> successful example check:
              io::File::FilesMatch ( dendrogram_basename + "_node_" + util::Format()( list) + ".ls", AddExampleOutputPathToFilename( dendrogram, "dendrogram_OutputPymolLabelString_node_" + util::Format()( list) + "_correct.ls") )
              == 1
=std=bcl=> successful example check:
              io::File::FilesMatch ( dendrogram_basename + "_node_" + util::Format()( list) + ".ls", AddExampleOutputPathToFilename( dendrogram, "dendrogram_OutputPymolLabelString_node_" + util::Format()( list) + "_correct.ls") )
              == 1
=std=bcl=> successful example check:
              io::File::FilesMatch ( dendrogram_basename + "_node_" + util::Format()( list) + ".ls", AddExampleOutputPathToFilename( dendrogram, "dendrogram_OutputPymolLabelString_node_" + util::Format()( list) + "_correct.ls") )
              == 1
=std=bcl=> successful example check:
              io::File::FilesMatch ( dendrogram_basename + "_node_" + util::Format()( list) + ".ls", AddExampleOutputPathToFilename( dendrogram, "dendrogram_OutputPymolLabelString_node_" + util::Format()( list) + "_correct.ls") )
              == 1
=std=bcl=> successful example check:
              io::File::FilesMatch ( dendrogram_basename + "_node_" + util::Format()( list) + ".ls", AddExampleOutputPathToFilename( dendrogram, "dendrogram_OutputPymolLabelString_node_" + util::Format()( list) + "_correct.ls") )
              == 1
=std=bcl=> successful example check:
              io::File::FilesMatch ( dendrogram_basename + "_node_" + util::Format()( list) + ".ls", AddExampleOutputPathToFilename( dendrogram, "dendrogram_OutputPymolLabelString_node_" + util::Format()( list) + "_correct.ls") )
              == 1
=std=bcl=> successful example check:
              io::File::FilesMatchWithinAbsoluteTolerance ( dendrogram_basename + ".py", dendrogram_filename_correct, 0.001 )
              == 1
=std=bcl=> successful example check:
              io::File::FilesMatch ( dendrogram_basename + "_node_" + util::Format()( list) + ".ls", AddExampleOutputPathToFilename( dendrogram, "dendrogram_OutputPymolLabelString_node_" + util::Format()( list) + "_correct.ls") )
              == 1
=std=bcl=> successful example check:
              io::File::FilesMatch ( dendrogram_basename + "_node_" + util::Format()( list) + ".ls", AddExampleOutputPathToFilename( dendrogram, "dendrogram_OutputPymolLabelString_node_" + util::Format()( list) + "_correct.ls") )
              == 1
=std=bcl=> successful example check:
              io::File::FilesMatch ( dendrogram_basename + "_node_" + util::Format()( list) + ".ls", AddExampleOutputPathToFilename( dendrogram, "dendrogram_OutputPymolLabelString_node_" + util::Format()( list) + "_correct.ls") )
              == 1
=std=bcl=> successful example check:
              io::File::FilesMatch ( dendrogram_basename + "_node_" + util::Format()( list) + ".ls", AddExampleOutputPathToFilename( dendrogram, "dendrogram_OutputPymolLabelString_node_" + util::Format()( list) + "_correct.ls") )
              == 1
=std=bcl=> successful example check:
              io::File::FilesMatch ( dendrogram_basename + "_node_" + util::Format()( list) + ".ls", AddExampleOutputPathToFilename( dendrogram, "dendrogram_OutputPymolLabelString_node_" + util::Format()( list) + "_correct.ls") )
              == 1
=std=bcl=> successful example check:
              io::File::FilesMatch ( dendrogram_basename + "_node_" + util::Format()( list) + ".ls", AddExampleOutputPathToFilename( dendrogram, "dendrogram_OutputPymolLabelString_node_" + util::Format()( list) + "_correct.ls") )
              == 1
=std=bcl=> successful example check:
               param_constr.GetClassIdentifier() ==
              GetStaticClassName( cluster::OutputPymolLabelString< double>()) ==
              bcl::cluster::OutputPymolLabelString<double>
=std=bcl=> successful example check:
              cluster::OutputPymolLabelString< double>::GetCylinderText ( "o_cluster_output_pymol_protein_model_0_0", 0, 3, 57.1429, "6", 0.05, 0.4, util::GetColors().e_Magenta )
              ==
              "axes=[[  0.0,0.0,0.4],[0.0,0.4,0.0],[0.0,0.0,0.0]]\n" "cyl_text(o_cluster_output_pymol_protein_model_0_0,plain,[0,3,57.1429],'6',0.05,color=Magenta,axes=axes)\n"
              ==
              axes=[[  0.0,0.0,0.4],[0.0,0.4,0.0],[0.0,0.0,0.0]]
              cyl_text(o_cluster_output_pymol_protein_model_0_0,plain,[0,3,57.1429],'6',0.05,color=Magenta,axes=axes)
=std=bcl=> successful example check:
              util::SplitString ( cluster::OutputPymolLabelString< double>::GetLabelCommand ( dendrogram.GetNode(), "test", 0.0, 10.0, 5.0, 2.0, util::GetColors().e_Magenta ) )
              ==
              util::SplitString ( "test=[]\n" "axes=[[ 0.0,0.0,0.25],[0.0,0.25,0.0],[0.0,0.0,0.0]]\n" "cyl_text(test,plain,[0,6.25,1.20536],'4',0.03125,color=Magenta,axes=axes)\n" "axes=[[ 0.0,0.0,0.25],[0.0,0.25,0.0],[0.0,0.0,0.0]]\n" "cyl_text(test,plain,[0,5.9375,1.20536],'14',0.03125,color=Magenta,axes=axes)\n" "axes=[[ 0.0,0.0,0.25],[0.0,0.25,0.0],[0.0,0.0,0.0]]\n" "cyl_text(test,plain,[0,6.5625,1.20536],'5',0.03125,color=Magenta,axes=axes)\n" "labels_all.extend( test)" )
              output of result suppressed (result was 503 bytes), set message verbosity to Detail to override
=std=bcl=> successful example check:
               cluster::OutputPymolLabelString< double>::GetTextZCoordinate( 175.0, 50.0) == 200.0
              == 200
=std=bcl=> successful example check:  cluster::OutputPymolLabelString< double>::GetTextBlockSize( 40.0, 20.0) == 1.0 == 1
=std=bcl=> successful example check:  cluster::OutputPymolLabelString< double>::GetCylinderTextRadius( 32.0) == 4.0 == 4
=std=bcl::app=> BCL Example | END  : ClusterOutputPymolLabelString ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>       success      error error_string 
ClusterOutputPymolLabelString_total         27          0              
total                                       27          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 64 MB
