./build/linux64_release/bin/bcl-example-static.exe Examples -exec StorageTable 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> StorageTable
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: StorageTable ====================
=std=bcl=> successful example check:  storage::Table< double>().IsEmpty() == 1
=std=bcl=> successful example check:
               storage::Table< double>( table_header).GetHeader() == table_header ==
              bcl::storage::TableHeader
                3
                "score"
                "rmsd"
                "rmsd100"
=std=bcl=> successful example check:
               storage::Table< double>( sp_table_header).GetHeader() == *sp_table_header ==
              bcl::storage::TableHeader
                3
                "score"
                "rmsd"
                "rmsd100"
=std=bcl=> successful example check:
               storage::Table< double>( table_a) == table_a ==
              bcl::storage::Table<double>
              bcl::util::ShPtr<bcl::storage::TableHeader>
                12345678
                bcl::storage::TableHeader
                  3
                  "score"
                  "rmsd"
                  "rmsd100"
              bcl::storage::List<bcl::storage::Pair<std::string,bcl::storage::Row<double>>>
                0
=std=bcl=> successful example check:
               *util::ShPtr< storage::Table< double> >( table_a.Clone()) == table_a ==
              bcl::storage::Table<double>
              bcl::util::ShPtr<bcl::storage::TableHeader>
                12345678
                bcl::storage::TableHeader
                  3
                  "score"
                  "rmsd"
                  "rmsd100"
              bcl::storage::List<bcl::storage::Pair<std::string,bcl::storage::Row<double>>>
                0
=std=bcl=> successful example check:
               table_a.GetClassIdentifier() == GetStaticClassName( table_a) ==
              bcl::storage::Table<double>
=std=bcl=> Checking GetSize function
=std=bcl=> successful example check:  storage::Table< double>().GetSize() == 0
=std=bcl=> Inserting 5 elements into table_a
=std=bcl=> GetSize() after 5 calls to InsertRow test succeeded:  table_a.GetSize() == 5
=std=bcl=> successful example check:
               storage::Table< double>( table_a.Begin(), table_a.End()) == table_a
              output of result suppressed (result was 1975 bytes), set message verbosity to Detail to override
=std=bcl=> successful example check:
               table_a.GetRowNames() == row_names_list ==
              bcl::storage::List<std::string>
                5
                "0"
                "1"
                "2"
                "3"
                "4"
=std=bcl=> Checking HasRow with an existing row name
=std=bcl=> successful example check:  table_a.HasRow( "1") == 1
=std=bcl=> Checking HasRow with a non-existing row name
=std=bcl=> successful example check:  !table_a.HasRow( "5") == 1
=std=bcl=> successful example check:  table_a.RowIndex( "1") == 1
=std=bcl=> successful example check:
               table_a[ "0"].GetData() == storage::Vector< double>::Create( -500, 5.0, 6.0) ==
              bcl::storage::Vector<double>
                3
                -500
                5
                6
=std=bcl=> table_a.RemoveRow( "4") test succeeded:  table_a.HasRow( "4") == 0
=std=bcl=> InsertRow called 4 times test succeeded:  table_b.GetSize() == 4
=std=bcl=> InsertRows test succeeded:  table_c.GetSize() == 9
=std=bcl=> Testing the append function by appending table_b to table_a
=std=bcl=> Append test succeeded:  table_a.GetSize() == 8
=std=bcl=> testing formatted output to file for different sorts
=std=bcl=> Sorting table_a by score column
=std=bcl=> Sorting table_a by rmsd column
=std=bcl=> Sorting table_a by row names
=std=bcl=> testing read and write functionalities
=std=bcl=> compare written and read objects
=std=bcl=> I/O test succeeded:
               table_a == table_read
              output of result suppressed (result was 3019 bytes), set message verbosity to Detail to override
=std=bcl=> Testing GetWidestRowName function
=std=bcl=> successful example check:  table_c.GetWidestRowName() == this_the_name_of_the_last_row
=std=bcl::app=> BCL Example | END  : StorageTable ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>    success      error error_string 
StorageTable_total                       41          0              
total                                    41          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 64 MB
