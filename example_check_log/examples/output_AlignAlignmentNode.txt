./build/linux64_release/bin/bcl-example-static.exe Examples -exec AlignAlignmentNode 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> AlignAlignmentNode
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: AlignAlignmentNode ====================
=std=bcl=> 1: AlignmentLeaf( SequenceInterface) constructor
=std=bcl=> 1:  test succeeded:
               ConditionCheck( alignment_a, exp_child_alignment_size, exp_depth, exp_size, exp_empty) ==
              1
=std=bcl=> 2: AlignmentLeaf( list of SequenceInterface) constructor
=std=bcl=> 2:  test succeeded:
               ConditionCheck( alignment_b, exp_child_alignment_size, exp_depth, exp_size, exp_empty) ==
              1
=std=bcl=> 3: AlignmentNode( AlignmentInterface=Leaf1, AlignmentInterface=Leaf1)
=std=bcl=> 3:  test succeeded:
               ConditionCheck( alignment_c, exp_child_alignment_size, exp_depth, exp_size, exp_empty) ==
              1
=std=bcl=> 4: AlignmentNode( AlignmentInterface=Leaf1, AlignmentInterface=Node)
=std=bcl=> 4:  test succeeded:
               ConditionCheck( alignment_d, exp_child_alignment_size, exp_depth, exp_size, exp_empty) ==
              1
=std=bcl=> 5: AlignmentNode( AlignmentInterface=Leaf2, AlignmentInterface=Node)
=std=bcl=> 5:  test succeeded:
               ConditionCheck( alignment_e, exp_child_alignment_size, exp_depth, exp_size, exp_empty) ==
              1
=std=bcl=> 6: AlignmentNode( ShPtrList< AlignmentInterface> correct)
=std=bcl=> 6:  test succeeded:
               ConditionCheck( alignment_f, exp_child_alignment_size, exp_depth, exp_size, exp_empty) ==
              1
=std=bcl=> 7: AlignmentNode( ShPtrList< AlignmentInterface> incorrect)
=std=bcl=> 7:  test succeeded:
               ConditionCheck( alignment_g, exp_child_alignment_size, exp_depth, exp_size, exp_empty) ==
              1
=std=bcl=> 8: AlignmentNode.Clone()
=std=bcl=> 8:  test succeeded:
               ConditionCheck( alignment_h, exp_child_alignment_size, exp_depth, exp_size, exp_empty) ==
              1
=std=bcl=> 9: Prepend.success==0
=std=bcl=> 9: Prepend.success==0!=false test succeeded:  success == 0
=std=bcl=> 9:  test succeeded:
               ConditionCheck( alignment_c, exp_child_alignment_size, exp_depth, exp_size, exp_empty) ==
              1
=std=bcl=> 10: Append.success==0
=std=bcl=> 10: Append.success==0!=false test succeeded:  success == 0
=std=bcl=> 10:  test succeeded:
               ConditionCheck( alignment_c, exp_child_alignment_size, exp_depth, exp_size, exp_empty)
              == 1
=std=bcl=> 11: Prepend.success==1
=std=bcl=> 11: Prepend.success==1!=true test succeeded:  success == 1
=std=bcl=> 11:  test succeeded:
               ConditionCheck( alignment_c, exp_child_alignment_size, exp_depth, exp_size, exp_empty)
              == 1
=std=bcl=> successful example check:  alignment_c->Append( assignment_correct) == 1
=std=bcl=> 12:  test succeeded:
               ConditionCheck( alignment_c, exp_child_alignment_size, exp_depth, exp_size, exp_empty)
              == 1
=std=bcl=> successful example check:  alignment_h->Prepend( alignment_c->GetAssignments()) == 1
=std=bcl=> 13:  test succeeded:
               ConditionCheck( alignment_h, exp_child_alignment_size, exp_depth, exp_size, exp_empty)
              == 1
=std=bcl=> 14: ResetAssignments()
=std=bcl=> 14:  test succeeded:
               ConditionCheck( alignment_c, exp_child_alignment_size, exp_depth, exp_size, exp_empty)
              == 1
=std=bcl=> 14: ResetAssignments()
=std=bcl=> successful example check:  alignment_c->Append( alignment_h->GetAssignments()) == 1
=std=bcl=> 15:  test succeeded:
               ConditionCheck( alignment_c, exp_child_alignment_size, exp_depth, exp_size, exp_empty)
              == 1
=std=bcl=> 16: AlignmentLeaf( AlignmentInterface=Node) 
=std=bcl=> 16:  test succeeded:
               ConditionCheck( alignment_i, exp_child_alignment_size, exp_depth, exp_size, exp_empty)
              == 1
=std=bcl::align=> Leaf(1) -> Node conversion not supported.
=std=bcl=> 17: AlignmentNode( AlignmentInterface=Leaf1) 
=std=bcl=> 17:  test succeeded:
               ConditionCheck( alignment_j, exp_child_alignment_size, exp_depth, exp_size, exp_empty)
              == 1
=std=bcl::align=> Leaf(2) -> Node conversion not supported.
=std=bcl=> 18: AlignmentNode( AlignmentInterface=Leaf2) 
=std=bcl=> 18:  test succeeded:
               ConditionCheck( alignment_k, exp_child_alignment_size, exp_depth, exp_size, exp_empty)
              == 1
=std=bcl::app=> BCL Example | END  : AlignAlignmentNode ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>    success      error error_string 
AlignAlignmentNode_total                 24          0              
total                                    24          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 64 MB
