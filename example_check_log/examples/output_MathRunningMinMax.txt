./build/linux64_release/bin/bcl-example-static.exe Examples -exec MathRunningMinMax 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> MathRunningMinMax
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: MathRunningMinMax ====================
=std=bcl=> successful example check:  running_min_max_double.GetMin() == std::numeric_limits< double>::infinity() == nan
=std=bcl=> successful example check:  running_min_max_double.GetMax() == -std::numeric_limits< double>::infinity() == nan
=std=bcl=> successful example check:  running_min_max_ints.GetMin() == std::numeric_limits< int>::max() == 2147483647
=std=bcl=> successful example check:  running_min_max_ints.GetMax() == std::numeric_limits< int>::min() == -2147483648
=std=bcl=> successful example check:
               running_min_max_vector_3d.GetMin() == linal::Vector3D( 0.0, 0.0, 0.0) ==
              bcl::linal::Vector3D
                0	0	0
=std=bcl=> successful example check:
               running_min_max_vector_3d.GetMin() == running_min_max_vector_3d.GetMax() ==
              bcl::linal::Vector3D
                0	0	0
=std=bcl=> successful example check:
               running_var_ave_vector_2d.GetMin() == linal::Vector< double>( 2, 0.0) ==
              bcl::linal::Vector<double>
                2
                0	0	
=std=bcl=> successful example check:  ( running_min_max_double += 5.1).GetMax() == 5.1
=std=bcl=> successful example check:  running_min_max_double.GetMin() == 5.1
=std=bcl=> successful example check:  ( running_min_max_double += 10.0).GetMax() == 10.0 == 10
=std=bcl=> successful example check:  running_min_max_double.GetMin() == 5.1
=std=bcl=> successful example check:  ( running_min_max_double += -5.0).GetMax() == 10.0 == 10
=std=bcl=> successful example check:  running_min_max_double.GetMin() == -5.0 == -5
=std=bcl=> successful example check:  running_min_max_double.GetMin() == std::numeric_limits< double>::infinity() == nan
=std=bcl=> successful example check:  running_min_max_double.GetMax() == -std::numeric_limits< double>::infinity() == nan
=std=bcl=> running_min_max_double += 1.0 += 2.0 += 3.0 += 4.0 += 5.0 test succeeded:
               running_min_max_double.GetMin() ==
              1.0 == 1
=std=bcl=> running_min_max_double += 1.0 += 2.0 += 3.0 += 4.0 += 5.0 test succeeded:
               running_min_max_double.GetMax() ==
              5.0 == 5
=std=bcl=> successful example check:
               ( running_min_max_vector_3d += x1).GetMin() == linal::Vector3D( 0.0, -1.5, 0.0) ==
              bcl::linal::Vector3D
                0	-1.5	0
=std=bcl=> successful example check:
               ( running_min_max_vector_3d += x1).GetMax() == linal::Vector3D( 1.0, 0.0, 0.1) ==
              bcl::linal::Vector3D
                1	0	0.1
=std=bcl=> Reset test succeeded:
               running_min_max_vector_3d.GetMin() == y2z3 == bcl::linal::Vector3D
                0	2	3
=std=bcl=> Reset test succeeded:
               running_min_max_vector_3d.GetMax() == y2z3 == bcl::linal::Vector3D
                0	2	3
=std=bcl=> Adding vectors to running min/max test succeeded:
               running_min_max_vector_3d.GetMin() == yn2zn3 ==
              bcl::linal::Vector3D
                0	-2	-3
=std=bcl=> Adding vectors to running min/max test succeeded:
               running_min_max_vector_3d.GetMax() ==
              linal::Vector3D( 1.0, 2.0, 3.0) == bcl::linal::Vector3D
                1	2	3
=std=bcl=> successful example check:
               ( running_var_ave_vector_2d += x2).GetMin() ==
              linal::MakeVector< double>( 0.0, -1.0) == bcl::linal::Vector<double>
                2
                0	-1	
=std=bcl=> successful example check:
               ( running_var_ave_vector_2d += x2).GetMax() ==
              linal::MakeVector< double>( 2.0, 0.0) == bcl::linal::Vector<double>
                2
                2	0	
=std=bcl=> I/O test succeeded:  TestBCLObjectIOForSymmetry( running_min_max_double, math::RunningMinMax< double>()) == 1
=std=bcl::app=> BCL Example | END  : MathRunningMinMax ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>    success      error error_string 
MathRunningMinMax_total                  26          0              
total                                    26          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 64 MB
