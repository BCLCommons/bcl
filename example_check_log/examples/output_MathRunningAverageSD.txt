./build/linux64_release/bin/bcl-example-static.exe Examples -exec MathRunningAverageSD 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> MathRunningAverageSD
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: MathRunningAverageSD ====================
=std=bcl=> successful example check:  running_var_ave_double.GetAverage() == 0.0 == 0
=std=bcl=> successful example check:  running_var_ave_double.GetWeight() == 0.0 == 0
=std=bcl=> successful example check:
               running_var_ave_vector_3d.GetAverage() == linal::Vector3D( 0.0, 0.0, 0.0) ==
              bcl::linal::Vector3D
                0	0	0
=std=bcl=> successful example check:
               running_var_ave_vector_2d.GetAverage() == linal::Vector< double>() ==
              bcl::linal::Vector<double>
                0
                
=std=bcl=> successful example check:
               running_var_ave_vector_2d.GetVariance() == linal::Vector< double>() ==
              bcl::linal::Vector<double>
                0
                
=std=bcl=> successful example check:  ( running_var_ave_double += 5.0).GetAverage() == 5.0 == 5
=std=bcl=> successful example check:  running_var_ave_double.GetVariance() == 0.0 == 0
=std=bcl=> successful example check:  ( running_var_ave_double += 10.0).GetAverage() == 7.5
=std=bcl=> successful example check:  running_var_ave_double.GetVariance() == 6.25
=std=bcl=> successful example check:  ( running_var_ave_double -= 5.0).GetAverage() == 10.0 == 10
=std=bcl=> successful example check:  running_var_ave_double.GetVariance() == 0.0 == 0
=std=bcl=> running_var_ave_double += 1.0 += 2.0 += 3.0 += 4.0 += 5.0 test succeeded:
               running_var_ave_double.GetAverage()
              == 3.0 == 3
=std=bcl=> running_var_ave_double += 1.0 += 2.0 += 3.0 += 4.0 += 5.0 test succeeded:
              running_var_ave_double.GetVariance() == 2.0 == 2
=std=bcl=> successful example check:  ( running_var_ave_double -= 1.0).GetAverage() == 3.5
=std=bcl=> operator-= test succeeded:  running_var_ave_double.GetVariance() == 1.25
=std=bcl=> operator-= test succeeded:  running_var_ave_double.GetWeight() == 4.0 == 4
=std=bcl=> successful example check:
               running_var_ave_double.AddWeightedObservation( 5.0, 2.5).GetAverage() ==
              ( 2.0 + 3.0 + 4.0 + 5.0 * 3.5) / 6.5 == 4.07692
=std=bcl=> AddWeightedObservation test succeeded:
              math::EqualWithinTolerance ( running_var_ave_double.GetVariance(), 1.3017751479, 1e-7 ) == 1
=std=bcl=> successful example check:
               ( running_var_ave_vector_3d += x1).GetVariance() == linal::Vector3D( 0.0) ==
              bcl::linal::Vector3D
                0	0	0
=std=bcl=> Reset test succeeded:
               running_var_ave_vector_3d.GetAverage() == y2z3 == bcl::linal::Vector3D
                0	2	3
=std=bcl=> Reset test succeeded:
               running_var_ave_vector_3d.GetVariance() == linal::Vector3D( 0.0) ==
              bcl::linal::Vector3D
                0	0	0
=std=bcl=> successful example check:
              math::EqualWithinTolerance ( running_var_ave_vector_3d.GetAverage(), x1 / 3.0, 1e-7 ) == 1
=std=bcl=> Adding up number preserves variances; got bcl::linal::Vector3D
                0.222222	2.66667	6 expected: bcl::linal::Vector3D
                0.222222	2.66667	6 test succeeded:
              math::EqualWithinTolerance ( running_var_ave_vector_3d.GetVariance(), expected_variance, 1e-7 ) == 1
=std=bcl=> successful example check:
               linal::Vector< double>( ( running_var_ave_vector_2d += x2).GetVariance()) ==
              linal::MakeVector< double>( 0.0, 0.0) == bcl::linal::Vector<double>
                2
                0	0	
=std=bcl=> Reset test succeeded:
               linal::Vector< double>( ( running_var_ave_vector_2d += y1).GetVariance()) ==
              linal::MakeVector< double>( 0.0, 0.0) == bcl::linal::Vector<double>
                2
                0	0	
=std=bcl=> successful example check:
              math::EqualWithinTolerance ( running_var_ave_vector_2d.GetAverage(), linal::Vector< double>( x2 / 3.0), 1e-7 )
              == 1
=std=bcl=> Adding up number preserves variances; got bcl::linal::Vector<double>
                2
                0.888889	0.666667	 expected: bcl::linal::Vector<double>
                2
                0.888889	0.666667	 test succeeded:
              math::EqualWithinTolerance ( running_var_ave_vector_2d.GetVariance(), expected_variances_2d, 1e-7 ) == 1
=std=bcl=> I/O test succeeded:
               TestBCLObjectIOForSymmetry( running_var_ave_double, math::RunningAverageSD< double>()) ==
              1
=std=bcl::app=> BCL Example | END  : MathRunningAverageSD ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>    success      error error_string 
MathRunningAverageSD_total               28          0              
total                                    28          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 64 MB
