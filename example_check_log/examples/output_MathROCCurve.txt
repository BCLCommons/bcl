./build/linux64_release/bin/bcl-example-static.exe Examples -exec MathROCCurve 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> MathROCCurve
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: MathROCCurve ====================
=std=bcl=> Creating data set for classified and unclassified data
=std=bcl=> Creating a ROC curve from classified data
=std=bcl=> Creating a ROC curve from unclassified data with a threshold of 0.55
=std=bcl=> Creating empty ROC curve and then initializing with classified data
=std=bcl=> calculating integrals for roc curves from classified data and unclassified data
=std=bcl=> classified integral: 0.709695
=std=bcl=> Creating empty ROC curve and then initializing with unclassified data
=std=bcl=> unclassified integral: 0.709695
=std=bcl=> successful example check:  roc_from_classified_b.Integral( 0.5) == 0.438596  (+/- 0.001%)
=std=bcl=> successful example check:
              roc_from_classified_b.Integral ( double( 0.5), &math::ContingencyMatrix::GetFalsePositiveRate, &math::ContingencyMatrix::GetTruePositiveRate )
              == 0.438596  (+/- 0.0001%)
=std=bcl=> the entire integral of classified weighted with f(x)=1-x : 0.31412
=std=bcl=> the entire integral of classified weighted with f(x)=(1-x)^2 : 0.188379
=std=bcl=> integral of roc curve plotting FractionPredictedPositives (FPP) vs Precision (PPV): 0.72376
=std=bcl=> integral of roc curve plotting FractionPredictedPositives (FPP) vs Precision (PPV) for 40pct of integral: 0.881626
=std=bcl=> Outputting the sorted counts
=std=bcl=> bcl::storage::Vector<bcl::math::ROCCurve::Point>
  20
  bcl::math::ROCCurve::Point
    0
    1
    0.99
  bcl::math::ROCCurve::Point
    0
    2
    0.9
  bcl::math::ROCCurve::Point
    0
    3
    0.85
  bcl::math::ROCCurve::Point
    1
    3
    0.82
  bcl::math::ROCCurve::Point
    1
    4
    0.8
  bcl::math::ROCCurve::Point
    1
    5
    0.75
  bcl::math::ROCCurve::Point
    2
    5
    0.71
  bcl::math::ROCCurve::Point
    2
    6
    0.63
  bcl::math::ROCCurve::Point
    2
    7
    0.55
  bcl::math::ROCCurve::Point
    3
    7
    0.47
  bcl::math::ROCCurve::Point
    4
    7
    0.42
  bcl::math::ROCCurve::Point
    4
    8
    0.38
  bcl::math::ROCCurve::Point
    5
    8
    0.35
  bcl::math::ROCCurve::Point
    6
    8
    0.26
  bcl::math::ROCCurve::Point
    7
    8
    0.2
  bcl::math::ROCCurve::Point
    8
    8
    0.15
  bcl::math::ROCCurve::Point
    8
    9
    0.12
  bcl::math::ROCCurve::Point
    8
    10
    0.06
  bcl::math::ROCCurve::Point
    9
    10
    0.05
  bcl::math::ROCCurve::Point
    10
    10
    0

=std=bcl=> This roc curve consists of : 10false positives 10true positives making 20results in total
=std=bcl=> Writing the ROC curve to file and read it back in
=std=bcl=> Checking the values for read roc curve' values
=std=bcl=> integral of read roc curve: 0.709695
=std=bcl=> Writing the ROC curve to plot file test.roc_plot
=std=bcl=> Read the ROC curve from plot file test.roc_plot
=std=bcl=> Comparing the read roc plot files' values
=std=bcl=> integral of read roc plot file: 0.703324
=std=bcl=> Writing a thinned (periodicity of 2) ROC curve to plot file test.roc_plot_thinned
=std=bcl::app=> BCL Example | END  : MathROCCurve ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>    success      error error_string 
MathROCCurve_total                        9          0              
total                                     9          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 64 MB
