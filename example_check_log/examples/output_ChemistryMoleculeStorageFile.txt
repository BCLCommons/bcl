./build/linux64_release/bin/bcl-example-static.exe Examples -exec ChemistryMoleculeStorageFile 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> ChemistryMoleculeStorageFile
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: ChemistryMoleculeStorageFile ====================
=std=bcl=> successful example check:  molecule_retrieve->GetAllKeys().GetSize() == 0
=std=bcl=> successful example check:  molecule_retrieve->GetSize() == 0
=std=bcl=> Before calling store the first time: bcl::storage::Vector<bcl::sdf::BondInfo>
  35
  bcl::sdf::BondInfo
    0	13	"ConjugatedSingleBond"
  bcl::sdf::BondInfo
    1	8	"ConjugatedDoubleBond"
  bcl::sdf::BondInfo
    2	5	"ConjugatedSingleBondInRing"
  bcl::sdf::BondInfo
    2	8	"ConjugatedSingleBondInRing"
  bcl::sdf::BondInfo
    2	12	"NonConjugatedSingleBond"
  bcl::sdf::BondInfo
    3	6	"ConjugatedDoubleBondInRing"
  bcl::sdf::BondInfo
    3	7	"NonConjugatedSingleBondInRing"
  bcl::sdf::BondInfo
    4	5	"AromaticDoubleBond"
  bcl::sdf::BondInfo
    4	6	"ConjugatedSingleBondInRing"
  bcl::sdf::BondInfo
    4	10	"AromaticSingleBond"
  bcl::sdf::BondInfo
    5	11	"AromaticSingleBond"
  bcl::sdf::BondInfo
    6	9	"ConjugatedSingleBond"
  bcl::sdf::BondInfo
    7	8	"NonConjugatedSingleBondInRing"
  bcl::sdf::BondInfo
    7	20	"NonConjugatedSingleBond"
  bcl::sdf::BondInfo
    7	21	"NonConjugatedSingleBond"
  bcl::sdf::BondInfo
    9	15	"AromaticDoubleBond"
  bcl::sdf::BondInfo
    9	16	"AromaticSingleBond"
  bcl::sdf::BondInfo
    10	13	"AromaticDoubleBond"
  bcl::sdf::BondInfo
    10	22	"NonConjugatedSingleBond"
  bcl::sdf::BondInfo
    11	14	"AromaticDoubleBond"
  bcl::sdf::BondInfo
    11	23	"NonConjugatedSingleBond"
  bcl::sdf::BondInfo
    12	24	"NonConjugatedSingleBond"
  bcl::sdf::BondInfo
    12	25	"NonConjugatedSingleBond"
  bcl::sdf::BondInfo
    12	26	"NonConjugatedSingleBond"
  bcl::sdf::BondInfo
    13	14	"AromaticSingleBond"
  bcl::sdf::BondInfo
    14	27	"NonConjugatedSingleBond"
  bcl::sdf::BondInfo
    15	17	"AromaticSingleBond"
  bcl::sdf::BondInfo
    15	28	"NonConjugatedSingleBond"
  bcl::sdf::BondInfo
    16	18	"AromaticDoubleBond"
  bcl::sdf::BondInfo
    16	29	"NonConjugatedSingleBond"
  bcl::sdf::BondInfo
    17	19	"AromaticDoubleBond"
  bcl::sdf::BondInfo
    17	30	"NonConjugatedSingleBond"
  bcl::sdf::BondInfo
    18	19	"AromaticSingleBond"
  bcl::sdf::BondInfo
    18	31	"NonConjugatedSingleBond"
  bcl::sdf::BondInfo
    19	32	"NonConjugatedSingleBond"

=std=bcl=> After calling store the first time: bcl::storage::Vector<bcl::sdf::BondInfo>
  35
  bcl::sdf::BondInfo
    0	13	"ConjugatedSingleBond"
  bcl::sdf::BondInfo
    1	8	"ConjugatedDoubleBond"
  bcl::sdf::BondInfo
    2	5	"ConjugatedSingleBondInRing"
  bcl::sdf::BondInfo
    2	8	"ConjugatedSingleBondInRing"
  bcl::sdf::BondInfo
    2	12	"NonConjugatedSingleBond"
  bcl::sdf::BondInfo
    3	6	"ConjugatedDoubleBondInRing"
  bcl::sdf::BondInfo
    3	7	"NonConjugatedSingleBondInRing"
  bcl::sdf::BondInfo
    4	5	"AromaticDoubleBond"
  bcl::sdf::BondInfo
    4	6	"ConjugatedSingleBondInRing"
  bcl::sdf::BondInfo
    4	10	"AromaticSingleBond"
  bcl::sdf::BondInfo
    5	11	"AromaticSingleBond"
  bcl::sdf::BondInfo
    6	9	"ConjugatedSingleBond"
  bcl::sdf::BondInfo
    7	8	"NonConjugatedSingleBondInRing"
  bcl::sdf::BondInfo
    7	20	"NonConjugatedSingleBond"
  bcl::sdf::BondInfo
    7	21	"NonConjugatedSingleBond"
  bcl::sdf::BondInfo
    9	15	"AromaticDoubleBond"
  bcl::sdf::BondInfo
    9	16	"AromaticSingleBond"
  bcl::sdf::BondInfo
    10	13	"AromaticDoubleBond"
  bcl::sdf::BondInfo
    10	22	"NonConjugatedSingleBond"
  bcl::sdf::BondInfo
    11	14	"AromaticDoubleBond"
  bcl::sdf::BondInfo
    11	23	"NonConjugatedSingleBond"
  bcl::sdf::BondInfo
    12	24	"NonConjugatedSingleBond"
  bcl::sdf::BondInfo
    12	25	"NonConjugatedSingleBond"
  bcl::sdf::BondInfo
    12	26	"NonConjugatedSingleBond"
  bcl::sdf::BondInfo
    13	14	"AromaticSingleBond"
  bcl::sdf::BondInfo
    14	27	"NonConjugatedSingleBond"
  bcl::sdf::BondInfo
    15	17	"AromaticSingleBond"
  bcl::sdf::BondInfo
    15	28	"NonConjugatedSingleBond"
  bcl::sdf::BondInfo
    16	18	"AromaticDoubleBond"
  bcl::sdf::BondInfo
    16	29	"NonConjugatedSingleBond"
  bcl::sdf::BondInfo
    17	19	"AromaticDoubleBond"
  bcl::sdf::BondInfo
    17	30	"NonConjugatedSingleBond"
  bcl::sdf::BondInfo
    18	19	"AromaticSingleBond"
  bcl::sdf::BondInfo
    18	31	"NonConjugatedSingleBond"
  bcl::sdf::BondInfo
    19	32	"NonConjugatedSingleBond"

=std=bcl=> Stored key a1 test succeeded:  store_a1_key == 0
=std=bcl=> Storing a molecule already in the storage returns the key of that molecule test succeeded:
              molecule_storage->Store( diazepam) == store_a1_key == 0
=std=bcl=> successful example check:  molecule_retrieve_new->GetKeySize( store_a1_key) == diazepam.GetNumberAtoms() == 33
=std=bcl=> successful example check:  molecule_retrieve_new->GetKeySize( store_a2_key) == taxol.GetNumberAtoms() == 113
=std=bcl=> storing a new molecule should increment the key test succeeded:  store_a2_key == 1
=std=bcl=> store ensemble test succeeded:  store_a4a5_keys.GetSize() == 2
=std=bcl=> store ensemble test succeeded:  store_a4a5_keys( 0) == 2
=std=bcl=> store ensemble test succeeded:  store_a4a5_keys( 1) == 3
=std=bcl=> get all keys test succeeded:  molecule_retrieve->GetAllKeys().GetSize() == 4
=std=bcl::chemistry=> finished reading ensemble with 1 molecules.
=std=bcl=> retrieve by source and key1 test succeeded:  sp_model1.GetNumberAtoms() == 33
=std=bcl::chemistry=> finished reading ensemble with 2 molecules.
=std=bcl=> retrieve ensemble for source from keys test succeeded:
               ensemble_retrieved.GetSize() ==
              store_a4a5_keys.GetSize() == 2
=std=bcl::chemistry=> finished reading ensemble with 2 molecules.
=std=bcl=> retrieve by range test succeeded:
               molecule_retrieve->RetrieveEnsemble( math::Range< size_t>( 0, 1)).GetSize()
              == 2
=std=bcl::app=> BCL Example | END  : ChemistryMoleculeStorageFile ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>      success      error error_string 
ChemistryMoleculeStorageFile_total         14          0              
total                                      14          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 65 MB
