./build/linux64_release/bin/bcl-example-static.exe Examples -exec GraphConstGraph 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> GraphConstGraph
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: GraphConstGraph ====================
=std=bcl=> successful example check:  default_const_graph.GetSize() == 0
=std=bcl=> successful example check:  default_const_graph.NumEdges() == 0
=std=bcl=> successful example check:  subject_graph_undirected.GetSize() == subject_names.GetSize() == 3
=std=bcl=> successful example check:  subject_graph_undirected.NumEdges() == 2
=std=bcl=> successful example check:
               subject_graph_undirected.GetVertices() == subject_names ==
              bcl::storage::Vector<std::string>
                3
                "politics"
                "physics"
                "chemistry"
=std=bcl=> successful example check:  subject_graph_undirected.IsDirected() == 0
=std=bcl=> successful example check:  subject_graph_undirected.IsUndirected() == 1
=std=bcl=> successful example check:  subject_graph_undirected.GetVertexData( 1) == physics
=std=bcl=> successful example check:
               subject_graph_undirected.GetEdgeDataMatrix() == subject_relations_undirected ==
              bcl::linal::Matrix<size_t>
                3	  3
                nan	nan	nan	
                nan	nan	5	
                nan	5	nan	
=std=bcl=> successful example check:  subject_graph_directed.GetSize() == subject_names.GetSize() == 3
=std=bcl=> successful example check:  subject_graph_directed.NumEdges() == 1
=std=bcl=> successful example check:
               subject_graph_directed.GetVertices() == subject_names ==
              bcl::storage::Vector<std::string>
                3
                "politics"
                "physics"
                "chemistry"
=std=bcl=> successful example check:  subject_graph_directed.IsDirected() == 1
=std=bcl=> successful example check:  subject_graph_directed.IsUndirected() == 0
=std=bcl=> successful example check:  subject_graph_directed.GetVertexData( 1) == physics
=std=bcl=> successful example check:
              std::equal ( subject_graph_directed.GetEdgeDataMatrix().Begin(), subject_graph_directed.GetEdgeDataMatrix().End(), subject_relations_directed.Begin() )
              == 1
=std=bcl=> successful example check:  shptr_subject_graph_directed.IsDefined() == 1
=std=bcl=> successful example check:  shptr_subject_graph_directed->GetSize() == subject_names.GetSize() == 3
=std=bcl=> successful example check:  shptr_subject_graph_directed->NumEdges() == 1
=std=bcl=> successful example check:
               shptr_subject_graph_directed->GetVertices() == subject_names ==
              bcl::storage::Vector<std::string>
                3
                "politics"
                "physics"
                "chemistry"
=std=bcl=> successful example check:  shptr_subject_graph_directed->IsDirected() == 1
=std=bcl=> successful example check:  shptr_subject_graph_directed->IsUndirected() == 0
=std=bcl=> successful example check:  shptr_subject_graph_directed->GetVertexData( 1) == physics
=std=bcl=> successful example check:  subject_graph_directed.GetNeighborData( 0).GetSize() == 0
=std=bcl=> successful example check:  subject_graph_directed.GetNeighborData( 1).GetSize() == 0
=std=bcl=> successful example check:  subject_graph_directed.GetNeighborData( 2).GetSize() == 1
=std=bcl=> successful example check:  subject_graph_directed.GetNeighborData( 2)( 0) == 5
=std=bcl=> successful example check:  subject_graph_directed.GetNeighborIndices( 2).GetSize() == 1
=std=bcl=> successful example check:  subject_graph_directed.GetNeighborIndices( 2)( 0) == 1
=std=bcl=> successful example check:  subject_graph_directed.GetEdgeData( 2, 1) == 5
=std=bcl=> successful example check:
               subject_graph_directed.GetEdgeData( 1, 2) == util::GetUndefined< size_t>() ==
              18446744073709551615
=std=bcl=> successful example check:  subject_graph_directed.AreConnected( 2, 1) == 1
=std=bcl=> successful example check:  subject_graph_directed.AreConnected( 1, 2) == 0
=std=bcl=> successful example check:  subject_graph_undirected.AreConnected( 1, 2) == 1
=std=bcl=> successful example check:  subject_graph_directed.AreVerticesConnected( "chemistry", "physics") == 1
=std=bcl=> successful example check:  subject_graph_directed.AreVerticesConnected( "physics", "chemistry") == 0
=std=bcl=> successful example check:  subject_graph_undirected.AreVerticesConnected( "physics", "chemistry") == 1
=std=bcl=> successful example check:
              chemistry_and_physics_undirected_subgraph.AreVerticesConnected( "chemistry", "physics") == 1
=std=bcl=> successful example check:
              chemistry_and_physics_undirected_subgraph.AreVerticesConnected( "physics", "chemistry") == 1
=std=bcl=> successful example check:
              chemistry_and_physics_undirected_subgraph.AreVerticesConnected( "physics", "physics") == 0
=std=bcl=> successful example check:  chemistry_and_physics_undirected_subgraph.GetSize() == 2
=std=bcl=> successful example check:  chemistry_and_physics_undirected_subgraph.IsUndirected() == 1
=std=bcl=> successful example check:  chemistry_and_physics_undirected_subgraph.GetVertexData( 0) == chemistry
=std=bcl=> successful example check:  chemistry_and_physics_undirected_subgraph.GetVertexData( 1) == physics
=std=bcl=> subgraph has correct number of vertices mapped test succeeded:
               number_mapped ==
              chemistry_and_physics_undirected_subgraph_w_mapping.GetSize() == 2
=std=bcl=> Here is the basic connectivity for the undirected subject const graph:
0 <-> 
1 <-> 2, 
2 <-> 1, 

=std=bcl=> GetVertexTypeCountMap test succeeded:  vertex_counts.GetSize() == 3
=std=bcl=> GetVertexTypeCountMap test succeeded:  vertex_counts[ "physics"] == 1
=std=bcl=> GetVertexTypeCountMap test succeeded:  vertex_counts[ "music"] == 0
=std=bcl=> GetEdgeTypeCountMap test succeeded:  edge_counts.GetSize() == 1
=std=bcl=> GetEdgeTypeCountMap test succeeded:  edge_counts.Begin()->first == 5
=std=bcl=> GetEdgeTypeCountMap test succeeded:  edge_counts.Begin()->second == 2
=std=bcl=> ChangeEdge test succeeded:  subject_graph_undirected.NumEdges() == 0
=std=bcl=> ChangeEdge test succeeded:  subject_graph_undirected.GetNeighborData( 1).GetSize() == 0
=std=bcl=> ChangeEdge test succeeded:  subject_graph_undirected.GetNeighborIndices( 1).GetSize() == 0
=std=bcl=> ChangeEdge test succeeded:  subject_graph_undirected.GetNeighborData( 2).GetSize() == 0
=std=bcl=> ChangeEdge test succeeded:  subject_graph_undirected.GetNeighborIndices( 2).GetSize() == 0
=std=bcl=> ChangeEdge test succeeded:  subject_graph_undirected.NumEdges() == 2
=std=bcl=> ChangeEdge test succeeded:  subject_graph_undirected.GetNeighborData( 1).GetSize() == 1
=std=bcl=> ChangeEdge test succeeded:  subject_graph_undirected.GetNeighborIndices( 1).GetSize() == 1
=std=bcl=> ChangeEdge test succeeded:  subject_graph_undirected.GetNeighborData( 2).GetSize() == 1
=std=bcl=> ChangeEdge test succeeded:  subject_graph_undirected.GetNeighborIndices( 2).GetSize() == 1
=std=bcl=> ChangeEdge test succeeded:  subject_graph_undirected.GetNeighborData( 2)( 0) == 5
=std=bcl=> ChangeEdge test succeeded:  subject_graph_undirected.GetNeighborIndices( 2)( 0) == 1
=std=bcl=> ChangeEdge test succeeded:  subject_graph_directed.NumEdges() == 0
=std=bcl=> ChangeEdge test succeeded:  subject_graph_directed.GetNeighborData( 1).GetSize() == 0
=std=bcl=> ChangeEdge test succeeded:  subject_graph_directed.GetNeighborIndices( 1).GetSize() == 0
=std=bcl=> ChangeEdge test succeeded:  subject_graph_directed.GetNeighborData( 2).GetSize() == 0
=std=bcl=> ChangeEdge test succeeded:  subject_graph_directed.GetNeighborIndices( 2).GetSize() == 0
=std=bcl=> ChangeEdge test succeeded:  subject_graph_directed.NumEdges() == 1
=std=bcl=> ChangeEdge test succeeded:  subject_graph_directed.GetNeighborData( 1).GetSize() == 0
=std=bcl=> ChangeEdge test succeeded:  subject_graph_directed.GetNeighborIndices( 1).GetSize() == 0
=std=bcl=> ChangeEdge test succeeded:  subject_graph_directed.GetNeighborData( 2).GetSize() == 1
=std=bcl=> ChangeEdge test succeeded:  subject_graph_directed.GetNeighborIndices( 2).GetSize() == 1
=std=bcl=> ChangeEdge test succeeded:  subject_graph_directed.GetNeighborData( 2)( 0) == 5
=std=bcl=> ChangeEdge test succeeded:  subject_graph_directed.GetNeighborIndices( 2)( 0) == 1
=std=bcl=> ChangeEdge test succeeded:  subject_graph_directed.AreVerticesConnected( "chemistry", "physics") == 1
=std=bcl=> ChangeEdge test succeeded:  subject_graph_directed.AreVerticesConnected( "physics", "chemistry") == 0
=std=bcl=> ConstGraph I/O test succeeded:
              TestBCLObjectIOForSymmetry( chemistry_and_physics_undirected_subgraph, default_const_graph) == 1
=std=bcl::app=> BCL Example | END  : GraphConstGraph ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>    success      error error_string 
GraphConstGraph_total                    78          0              
total                                    78          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 64 MB
