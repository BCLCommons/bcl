./build/linux64_release/bin/bcl-example-static.exe Examples -exec IoFile 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> IoFile
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: IoFile ====================
=std=bcl=> check that TryOpenOfstream can correctly return true
=std=bcl=> successful example check:  io::File::TryOpenOFStream( ofstream, example_output_file) == 1
=std=bcl=> TryOpenOFStream on valid file test succeeded:  ofstream.is_open() == 1
=std=bcl=> check that MustOpenOfstream can correctly NOT assert
=std=bcl=> MustOpenOFStream test succeeded:  ofstream.is_open() == 1
=std=bcl=> check that MustOpenIfstream can correctly NOT assert
=std=bcl=> MustOpenIFStream test succeeded:  ifstream.is_open() == 1
=std=bcl=> check that TryOpenIfstream can correctly return true
=std=bcl=> successful example check:  io::File::TryOpenIFStream( ifstream, example_input_file) == 1
=std=bcl=> TryOpenIFStream test succeeded:  ifstream.is_open() == 1
=std=bcl=> check that TryOpenIfstream can correctly return false
=std=bcl::io=> Uncompressed does not support the given open mode: 24
=std=bcl=> successful example check:
              io::File::TryOpenOFStream ( ifstream, AddExampleOutputPathToFilename( util::GetNamespaceIdentifier(), "example_tryopenifstream.txt"), std::ios_base::in )
              == 0
=std=bcl=> make sure that the Size function works
=std=bcl=> file existence detection test succeeded:  io::File::Size( file).First() == 1
=std=bcl=> file size detection test succeeded:  io::File::Size( file).Second() == 106
=std=bcl=> full extension of "/home/bcl/.test.file.extension.*" is "file.extension."
=std=bcl=> successful example check:  io::File::GetFullExtension( FILENAME) == CORRECT_FULL_EXTENSION == file.extension.
=std=bcl=> last extension of "/home/bcl/.test.file.extension.*" is ""
=std=bcl=> successful example check:  io::File::GetLastExtension( FILENAME) == CORRECT_LAST_EXTENSION ==
=std=bcl=> last extension of "/home/bcl/.test.file.extension.last~" is "last"
=std=bcl=> successful example check:  io::File::GetLastExtension( FILENAME) == CORRECT_LAST_EXTENSION == last
=std=bcl=> cleaned name of "/home/bcl/.test.file.extension.*" is ".test.file.extension."
=std=bcl=> successful example check:
               io::File::CleanFilename( FILENAME, "~*%") == CORRECT_CLEAN_FILENAME ==
              .test.file.extension.
=std=bcl=> name of "/home/bcl/.test.file.extension.last~" without last extension is "/home/bcl/.test.file.extension"
=std=bcl=> successful example check:
               io::File::RemoveLastExtension( FILENAME) == CORRECT_NEW_FILENAME ==
              /home/bcl/.test.file.extension
=std=bcl=> name of "/home/bcl/.test.file.extension.*" without last extension is "/home/bcl/.test.file.extension"
=std=bcl=> successful example check:
               io::File::RemoveLastExtension( FILENAME) == CORRECT_NEW_FILENAME ==
              /home/bcl/.test.file.extension
=std=bcl=> name of "/home/bcl/.test.file.extension.last~" without full extension is "/home/bcl/.test"
=std=bcl=> successful example check:  io::File::RemoveFullExtension( FILENAME) == CORRECT_NEW_FILENAME == /home/bcl/.test
=std=bcl=> name of "/home/bcl/.test.file.extension.*" without full extension is "/home/bcl/.test"
=std=bcl=> successful example check:  io::File::RemoveFullExtension( FILENAME) == CORRECT_NEW_FILENAME == /home/bcl/.test
=std=bcl::app=> BCL Example | END  : IoFile ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>    success      error error_string 
IoFile_total                             17          0              
total                                    17          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 64 MB
