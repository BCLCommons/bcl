./build/linux64_release/bin/bcl-example-static.exe Examples -exec ChemistryAtomVector 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> ChemistryAtomVector
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: ChemistryAtomVector ====================
=std=bcl=> successful example check:  HCN_atom_vector.GetSize() == initialize.GetSize() == 3
=std=bcl=> successful example check:
               HCN_atom_vector( 1).GetAtomType() == initialize( 1).GetAtomType() ==
              bcl::chemistry::AtomTypes::Enum
                "C_DiDiPiPi"
=std=bcl=> successful example check:
               HCN_atom_vector.First().GetAtomType() == initialize.FirstElement().GetAtomType() ==
              bcl::chemistry::AtomTypes::Enum
                "H_S"
=std=bcl=> successful example check:
               HCN_atom_vector.Last().GetAtomType() == initialize.LastElement().GetAtomType() ==
              bcl::chemistry::AtomTypes::Enum
                "N_Di2DiPiPi"
=std=bcl=> successful example check:  copy_atom_vector.GetSize() == initialize.GetSize() == 3
=std=bcl=> successful example check:
               copy_atom_vector( 1).GetAtomType() == initialize( 1).GetAtomType() ==
              bcl::chemistry::AtomTypes::Enum
                "C_DiDiPiPi"
=std=bcl=> successful example check:
               copy_atom_vector.First().GetAtomType() == initialize.FirstElement().GetAtomType()
              == bcl::chemistry::AtomTypes::Enum
                "H_S"
=std=bcl=> successful example check:
               copy_atom_vector.Last().GetAtomType() == initialize.LastElement().GetAtomType() ==
              bcl::chemistry::AtomTypes::Enum
                "N_Di2DiPiPi"
=std=bcl=> successful example check:  HCN_atom_vector.Begin() != copy_atom_vector.Begin() == 1
=std=bcl=> successful example check:  HCN_atom_vector( 1).GetBonds().GetSize() == 2
=std=bcl=> successful example check:  HCN_atom_vector( 2).GetBonds().GetSize() == 1
=std=bcl=> successful example check:
               HCN_atom_vector( 2).GetBonds().FirstElement().GetTargetAtom().GetAtomType() ==
              HCN_atom_vector( 1).GetAtomType() == bcl::chemistry::AtomTypes::Enum
                "C_DiDiPiPi"
=std=bcl=> successful example check:  copy1_atom_vector.GetSize() == initialize.GetSize() == 3
=std=bcl=> successful example check:
               copy1_atom_vector( 1).GetAtomType() == initialize( 1).GetAtomType() ==
              bcl::chemistry::AtomTypes::Enum
                "C_DiDiPiPi"
=std=bcl=> successful example check:
               copy1_atom_vector.First().GetAtomType() == initialize.FirstElement().GetAtomType()
              == bcl::chemistry::AtomTypes::Enum
                "H_S"
=std=bcl=> successful example check:
               copy1_atom_vector.Last().GetAtomType() == initialize.LastElement().GetAtomType() ==
              bcl::chemistry::AtomTypes::Enum
                "N_Di2DiPiPi"
=std=bcl=> successful example check:
               HCN_atom_vector.GetBondInfo() == bonds ==
              bcl::storage::Vector<bcl::sdf::BondInfo>
                2
                bcl::sdf::BondInfo
                  0	1	"NonConjugatedSingleBond"
                bcl::sdf::BondInfo
                  1	2	"ConjugatedTripleBond"
=std=bcl=> successful example check:
               HCN_atom_vector.GetBondInfo() == copy_atom_vector.GetBondInfo() ==
              bcl::storage::Vector<bcl::sdf::BondInfo>
                2
                bcl::sdf::BondInfo
                  0	1	"NonConjugatedSingleBond"
                bcl::sdf::BondInfo
                  1	2	"ConjugatedTripleBond"
=std=bcl=> successful example check:  HCN_atom_vector.IsEmpty() == 0
=std=bcl=> successful example check:  default_atom_vector.IsEmpty() == 1
=std=bcl=> successful example check:  NCH_atom_vector.GetSize() == initialize.GetSize() == 3
=std=bcl=> reorder test succeeded:
               NCH_atom_vector( i).GetAtomType() ==
              HCN_atom_vector( reordered_indices( i)).GetAtomType() == bcl::chemistry::AtomTypes::Enum
                "N_Di2DiPiPi"
=std=bcl=> reorder test succeeded:
               NCH_atom_vector( i).GetBonds().GetSize() ==
              HCN_atom_vector( reordered_indices( i)).GetBonds().GetSize() == 1
=std=bcl=> reorder test succeeded:
               NCH_atom_vector( i).GetBonds().FirstElement().GetTargetAtom().GetAtomType() ==
              HCN_atom_vector( reordered_indices( i)).GetBonds().LastElement().GetTargetAtom().GetAtomType() ==
              bcl::chemistry::AtomTypes::Enum
                "C_DiDiPiPi"
=std=bcl=> reorder test succeeded:
               NCH_atom_vector( i).GetAtomType() ==
              HCN_atom_vector( reordered_indices( i)).GetAtomType() == bcl::chemistry::AtomTypes::Enum
                "H_S"
=std=bcl=> reorder test succeeded:
               NCH_atom_vector( i).GetBonds().GetSize() ==
              HCN_atom_vector( reordered_indices( i)).GetBonds().GetSize() == 1
=std=bcl=> reorder test succeeded:
               NCH_atom_vector( i).GetBonds().FirstElement().GetTargetAtom().GetAtomType() ==
              HCN_atom_vector( reordered_indices( i)).GetBonds().LastElement().GetTargetAtom().GetAtomType() ==
              bcl::chemistry::AtomTypes::Enum
                "C_DiDiPiPi"
=std=bcl=> reorder test succeeded:
               NCH_atom_vector( i).GetAtomType() ==
              HCN_atom_vector( reordered_indices( i)).GetAtomType() == bcl::chemistry::AtomTypes::Enum
                "C_DiDiPiPi"
=std=bcl=> reorder test succeeded:
               NCH_atom_vector( i).GetBonds().GetSize() ==
              HCN_atom_vector( reordered_indices( i)).GetBonds().GetSize() == 2
=std=bcl=> reorder test succeeded:
               NCH_atom_vector( i).GetBonds().FirstElement().GetTargetAtom().GetAtomType() ==
              HCN_atom_vector( reordered_indices( i)).GetBonds().LastElement().GetTargetAtom().GetAtomType() ==
              bcl::chemistry::AtomTypes::Enum
                "N_Di2DiPiPi"
=std=bcl::app=> BCL Example | END  : ChemistryAtomVector ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>    success      error error_string 
ChemistryAtomVector_total                30          0              
total                                    30          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 64 MB
