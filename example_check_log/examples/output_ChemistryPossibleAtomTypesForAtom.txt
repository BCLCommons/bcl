./build/linux64_release/bin/bcl-example-static.exe Examples -exec ChemistryPossibleAtomTypesForAtom 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> ChemistryPossibleAtomTypesForAtom
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: ChemistryPossibleAtomTypesForAtom ====================
=std=bcl=> successful example check:  possible_atom_types_sp.IsDefined() == 1
=std=bcl=> successful example check:
               possible_atom_types_def.GetClassIdentifier() ==
              bcl::chemistry::PossibleAtomTypesForAtom
=std=bcl=> successful example check:  possible_atom_types_def.GetNumberPossibleTypes() == 0
=std=bcl=> successful example check:  possible_atom_types_c_trtrtrpi.GetNumberPossibleTypes() == 1
=std=bcl=> successful example check:  possible_atom_types_uncharged_carbons.GetNumberPossibleTypes() == 4
=std=bcl=> successful example check:
               possible_atom_types_def.GetMostStableType() ==
              chemistry::GetAtomTypes().e_Undefined == bcl::chemistry::AtomTypes::Enum
                "Undefined"
=std=bcl=> successful example check:
              possible_atom_types_def.CouldHaveHybridization( chemistry::GetHybridOrbitalTypes().e_SP) == 0
=std=bcl=> successful example check:
              possible_atom_types_def.CouldHaveHybridization( chemistry::GetHybridOrbitalTypes().e_SP2) == 0
=std=bcl=> successful example check:
              possible_atom_types_def.CouldHaveHybridization( chemistry::GetHybridOrbitalTypes().e_SP3) == 0
=std=bcl=> successful example check:
              possible_atom_types_def.CouldHaveHybridization( chemistry::GetHybridOrbitalTypes().e_Unhybridized) == 0
=std=bcl=> successful example check:  possible_atom_types_def.GetNumberPossibleTypes() == 0
=std=bcl=> successful example check:  possible_atom_types_def.CouldBeConjugated() == 0
=std=bcl=> successful example check:  possible_atom_types_def.MustBeConjugated() == 0
=std=bcl=> successful example check:  possible_atom_types_def.GetMaxElectronsParticipatingInPiSystem() == 0
=std=bcl=> successful example check:
               possible_atom_types_c_trtrtrpi.GetMostStableType() ==
              chemistry::GetAtomTypes().C_TrTrTrPi == bcl::chemistry::AtomTypes::Enum
                "C_TrTrTrPi"
=std=bcl=> successful example check:
              possible_atom_types_c_trtrtrpi.CouldHaveHybridization( chemistry::GetHybridOrbitalTypes().e_SP) == 0
=std=bcl=> successful example check:
              possible_atom_types_c_trtrtrpi.CouldHaveHybridization( chemistry::GetHybridOrbitalTypes().e_SP2) == 1
=std=bcl=> successful example check:
              possible_atom_types_c_trtrtrpi.CouldHaveHybridization( chemistry::GetHybridOrbitalTypes().e_SP3) == 0
=std=bcl=> successful example check:
              possible_atom_types_c_trtrtrpi.CouldHaveHybridization( chemistry::GetHybridOrbitalTypes().e_Unhybridized) == 0
=std=bcl=> successful example check:  possible_atom_types_c_trtrtrpi.CouldBeConjugated() == 1
=std=bcl=> successful example check:  possible_atom_types_c_trtrtrpi.MustBeConjugated() == 1
=std=bcl=> successful example check:  possible_atom_types_c_trtrtrpi.GetMaxElectronsParticipatingInPiSystem() == 1
=std=bcl=> successful example check:
               possible_atom_types_uncharged_carbons.GetMostStableType() ==
              chemistry::GetAtomTypes().C_TeTeTeTe == bcl::chemistry::AtomTypes::Enum
                "C_TeTeTeTe"
=std=bcl=> successful example check:
              possible_atom_types_uncharged_carbons.CouldHaveHybridization( chemistry::GetHybridOrbitalTypes().e_SP) == 1
=std=bcl=> successful example check:
              possible_atom_types_uncharged_carbons.CouldHaveHybridization( chemistry::GetHybridOrbitalTypes().e_SP2) == 1
=std=bcl=> successful example check:
              possible_atom_types_uncharged_carbons.CouldHaveHybridization( chemistry::GetHybridOrbitalTypes().e_SP3) == 1
=std=bcl=> successful example check:
              possible_atom_types_uncharged_carbons.CouldHaveHybridization( chemistry::GetHybridOrbitalTypes().e_Unhybridized)
              == 1
=std=bcl=> successful example check:  possible_atom_types_uncharged_carbons.CouldBeConjugated() == 1
=std=bcl=> successful example check:  possible_atom_types_uncharged_carbons.MustBeConjugated() == 0
=std=bcl=> successful example check:  possible_atom_types_uncharged_carbons.GetMaxElectronsParticipatingInPiSystem() == 2
=std=bcl=> FinalizeUnhybridized test succeeded:
              chemistry::PossibleAtomTypesForAtom( chlorine, 1, 1, 0, false).GetMostStableType() ==
              chemistry::GetAtomTypes().Cl_S2P2P2P == bcl::chemistry::AtomTypes::Enum
                "Cl_S2P2P2P"
=std=bcl=> FinalizeUnhybridized test succeeded:
              chemistry::PossibleAtomTypesForAtom( chlorine, 1, 1, 0, false).GetNumberPossibleTypes() == 1
=std=bcl=> Internal Finalize test succeeded:
              chemistry::PossibleAtomTypesForAtom( carbon, 3, 3, 0, false).GetMostStableType() ==
              chemistry::GetAtomTypes().C_TrTrTr == bcl::chemistry::AtomTypes::Enum
                "C_TrTrTr"
=std=bcl=> Internal Finalize test succeeded:
              chemistry::PossibleAtomTypesForAtom( carbon, 3, 3, 0, false).GetNumberPossibleTypes() == 1
=std=bcl=> Internal Finalize test succeeded:
              chemistry::PossibleAtomTypesForAtom( boron, 3, 3, 0, false).GetMostStableType() ==
              chemistry::GetAtomTypes().B_TrTrTr == bcl::chemistry::AtomTypes::Enum
                "B_TrTrTr"
=std=bcl=> Internal Finalize test succeeded:
              chemistry::PossibleAtomTypesForAtom( carbon, 4, 4, 0, false).GetMostStableType() ==
              chemistry::GetAtomTypes().C_TeTeTeTe == bcl::chemistry::AtomTypes::Enum
                "C_TeTeTeTe"
=std=bcl=> Finalize Aromatic with type that should not exist in an aromatic ring test succeeded:
              chemistry::PossibleAtomTypesForAtom( carbon, 4, 4, 0, true).GetMostStableType().IsDefined() == 0
=std=bcl=> Nitrogen with three bonds could be trigonal or tetrahedral test succeeded:
              chemistry::PossibleAtomTypesForAtom( nitrogen, 3, 3, 0, false).GetNumberPossibleTypes() == 2
=std=bcl=> Nitrogen with two bonds, one unsaturated could be trigonal or tetrahedral test succeeded:
              chemistry::PossibleAtomTypesForAtom( nitrogen, 3, 2, 0, false).GetNumberPossibleTypes() == 2
=std=bcl=> Nitrogen with two bonds, one unsaturated could be trigonal or digonal test succeeded:
              chemistry::PossibleAtomTypesForAtom( nitrogen, 3, 2, 0, false).CouldHaveHybridization( chemistry::GetHybridOrbitalTypes().e_SP2) && chemistry::PossibleAtomTypesForAtom( nitrogen, 3, 2, 0, false).CouldHaveHybridization( chemistry::GetHybridOrbitalTypes().e_SP) && !chemistry::PossibleAtomTypesForAtom( nitrogen, 3, 2, 0, false).CouldHaveHybridization( chemistry::GetHybridOrbitalTypes().e_SP3)
              == 1
=std=bcl=> atom typing scheme test succeeded:  io::File::StreamsMatch( input, test_output) == 1
=std=bcl=> Chemistry::PossibleAtomTypesForAtom read and/or write are broken test succeeded:
              ExampleInterface::TestBCLObjectIOForSymmetry ( possible_atom_types_c_trtrtrpi, chemistry::PossibleAtomTypesForAtom() )
              == 1
=std=bcl::app=> BCL Example | END  : ChemistryPossibleAtomTypesForAtom ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>           success      error error_string 
ChemistryPossibleAtomTypesForAtom_total         42          0              
total                                           42          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 64 MB
