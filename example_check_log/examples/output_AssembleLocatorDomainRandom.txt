./build/linux64_release/bin/bcl-example-static.exe Examples -exec AssembleLocatorDomainRandom 
BCL v4.0.0, r5417, compiled on Mon Nov  2 10:35:50 2020
=std=bcl=> executing application: Examples
=crt=bcl::random=> Seed was set to 5489!
=crt=bcl::random=> Seed was set to 5489!

==================================================================================================================================================

BCL FLAGS

-message_level not set
   <level> Standard (default)
   <verbosity> Summary (default)
-logger not set
   <> Default (default)
   <identifier>  (default)
-help not set
-readme not set
-file_compressed_alternatives not set
-file_compression not set
   <compression_type> Uncompressed (default)
-enums_files not set
-random_seed not set
   <seed> 5489 (default)
-model_path not set
   <model_path_name> model/ (default)
-histogram_path not set
   <path> histogram/ (default)
-opencl not set
   <platform> Disable (default)
-scheduler not set
   <scheduler> Serial (default)
   <number_cpus> 1 (default)

==================================================================================================================================================

APPLICATION FLAGS

-help not set
-readme not set
-namespace not set
-exclude_namespace not set
-exec set
   <example> AssembleLocatorDomainRandom
-all not set
-example_path not set
   <path> example/example_files/ (default)
-application_example_path not set
   <path> /dors/meilerlab/apps/bcl/app_example_files/ (default)

==================================================================================================================================================

=crt=bcl=> WARNING: Examples is a deprecated name for this application.  Use bcl:Examples instead!
=crt=bcl::app=> BCL Example | BEGIN: All Examples ====================
=crt=bcl::app=> BCL Example | BEGIN: AssembleLocatorDomainRandom ====================
=std=bcl=> successful example check:
               locator_default.GetDomainSizeRange() == range_default ==
              bcl::math::Range<size_t>
                [ 1 , 1 ]
=std=bcl=> successful example check:
               locator_default.GetSSType() == biol::GetSSTypes().COIL ==
              bcl::biol::SSTypes::Enum
                "COIL"
=std=bcl=> successful example check:
               locator_b.GetDomainSizeRange() == range_b == bcl::math::Range<size_t>
                [ 2 , 4 ]
=std=bcl=> successful example check:
               locator_b.GetSSType() == biol::GetSSTypes().STRAND ==
              bcl::biol::SSTypes::Enum
                "STRAND"
=std=bcl=> successful example check:
               locator_c.GetDomainSizeRange() == range_c == bcl::math::Range<size_t>
                [ 20 , 30 ]
=std=bcl=> successful example check:
               locator_c.GetSSType() == biol::GetSSTypes().STRAND ==
              bcl::biol::SSTypes::Enum
                "STRAND"
=std=bcl=> Test GetDomainSizeRange()
=std=bcl=> successful example check:
               locator_a.GetDomainSizeRange() == range_a == bcl::math::Range<size_t>
                [ 2 , 2 ]
=std=bcl=> Test GetSSType()
=std=bcl=> successful example check:
               locator_a.GetSSType() == biol::GetSSTypes().HELIX ==
              bcl::biol::SSTypes::Enum
                "HELIX"
=std=bcl=> Test Locate function locator_a
=std=bcl=> successful example check:  sp_domain_a.IsDefined() == 1
=std=bcl=> successful example check:  sp_domain_a->GetNumberSSEs() == 2
=std=bcl=> successful example check:  sp_domain_a->GetNumberSSE( biol::GetSSTypes().HELIX) == 2
=std=bcl=> Test Locate function with locator_b
=std=bcl=> successful example check:  sp_domain_b.IsDefined() == 1
=std=bcl=> successful example check:
               sp_domain_b->GetNumberSSEs() ==
              sp_domain_b->GetNumberSSE( biol::GetSSTypes().STRAND) == 2
=std=bcl=> successful example check:  range_b.IsWithin( sp_domain_b->GetNumberSSE( biol::GetSSTypes().STRAND)) == 1
=std=bcl=> Test Locate function with locator_c
=std=bcl=> successful example check:  sp_domain_c.IsDefined() == 0
=std=bcl=> The read function failed test succeeded:
              locator_read.GetDomainSizeRange() == locator_a.GetDomainSizeRange() && locator_read.GetSSType() == locator_a.GetSSType()
              == 1
=std=bcl::app=> BCL Example | END  : AssembleLocatorDomainRandom ====================
=crt=bcl::app=> BCL Example | END  : All Examples ====================
=std=bcl::app=> The results table
bcl::storage::Table<std::string>     success      error error_string 
AssembleLocatorDomainRandom_total         16          0              
total                                     16          0              

==================================================================================================================================================
=slt=bcl=> bcl has run for 00:00:00, peak virtual memory used: 132 MB, peak physical RAM used: 65 MB
