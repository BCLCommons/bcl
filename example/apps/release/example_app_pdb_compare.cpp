// (c) Copyright BCL @ Vanderbilt University 2014
// (c) BCL Homepage: http://www.meilerlab.org/bclcommons
// (c) BCL Code Repository: https://github.com/BCLCommons/bcl
// (c)
// (c) The BioChemical Library (BCL) was originally developed by contributing members of the Meiler Lab @ Vanderbilt University.
// (c)
// (c) The BCL is now made available as an open-source software package distributed under the permissive MIT license,
// (c) developed and maintained by the Meiler Lab at Vanderbilt University and contributing members of the BCL Commons.
// (c)
// (c) External code contributions to the BCL are welcome. Please visit the BCL Commons GitHub page for information on how you can contribute.
// (c)
// (c) This file is part of the BCL software suite and is made available under the MIT license.
// (c)

// include example header
#include "example.h"
// include the header of the class which this example is for
#include "release/bcl_app_pdb_compare.h"

// includes from bcl - sorted alphabetically
#include "example_application_example_helper.h"
#include "sched/bcl_sched_schedulers.h"

// external includes - sorted alphabetically

namespace bcl
{
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //!
  //! @example example_app_pdb_compare.cpp
  //!
  //! @author alexanns
  //! @date Jan 14, 2012
  //! @remarks status complete
  //!
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  class ExampleAppPDBCompare :
    public ExampleInterface
  {
  public:

    ExampleAppPDBCompare *Clone() const
    {
      return new ExampleAppPDBCompare( *this);
    }

  /////////////////
  // data access //
  /////////////////

    //! @brief returns class name
    //! @return the class name as const ref std::string
    const std::string &GetClassIdentifier() const
    {
      return GetStaticClassName( *this);
    }

    int Run() const
    {
    ////////////////
    // unit tests //
    ////////////////

      // unit tests of application class functions, if applicable, go here

    ////////////////////
    // initialization //
    ////////////////////

      // create a helper to run this application
      ApplicationExampleHelper quality( app::ProteinCompare::PDBCompare_Instance);

    ///////////
    // files //
    ///////////

      // create filenames for any input/output files used/generated by the test

      // the native pdb file
      const std::string native_pdb_filename( "1bgca");

      // the list of pdbs that will be compared against the native pdb
      const std::string test_pdb_list_filename( AddExampleInputPathToFilename( e_Quality, "1bgca_pdbs.ls"));

    ///////////////////////
    // integration tests //
    ///////////////////////

      // set flags; check valid and invalid command lines; check results

      // flags for calculating native versus a list of pdbs
      quality.SetFlag( "reference_pdb", native_pdb_filename);
      quality.SetFlag( "pdb_list", test_pdb_list_filename);
      quality.SetFlag( "atoms", "CA");
      quality.SetFlag( "prefix", "native_versus_list");
      quality.SetFlag( "input_pdb_prefix", AddExampleInputPathToFilename( e_Quality, ""));
      quality.SetFlag( "input_pdb_postfix", ".pdb");
      quality.SetFlag( "output_dir", AddExampleOutputPathToFilename( quality::GetNamespaceIdentifier(), ""));
      quality.SetFlag( "quality", "RMSD");

      // check a valid set of flags.  Since all later commands depend on this command succeeding, make it an assert
      BCL_MessageStd( "The command line is " + quality.GetCurrentCommandLine());

      BCL_ExampleCheck( quality.CheckCommandString( true), true);

      // run a valid set of flags, check that the return status is 0
      if( BCL_ExampleCheck( quality.RunCommand(), 0))
      {
        // if the application ran successfully, check that files match
        const std::string correct_table( AddExampleOutputPathToFilename( quality::GetNamespaceIdentifier(), "correct_native_vs_list.table"));
        const std::string calculated_table( AddExampleOutputPathToFilename( quality::GetNamespaceIdentifier(), "native_versus_listRMSD.txt"));
        BCL_ExampleIndirectCheck
        (
          io::File::FilesMatch( correct_table, calculated_table),
          true,
          "PDBCompare application wrote different quality matrix file"
        );
      }

      // unset native pdb flag so that pairwise qualities will be calculated between pdbs in list
      quality.UnsetFlag( "reference_pdb");
      quality.UnsetFlag( "prefix");
      quality.SetFlag( "prefix", "matrix");
      BCL_ExampleCheck( quality.CheckCommandString( true), true);

      // run a valid set of flags, check that the return status is 0
      if( BCL_ExampleCheck( quality.RunCommand(), 0))
      {
        // if the application ran successfully, check that files match
        const std::string correct_table( AddExampleOutputPathToFilename( quality::GetNamespaceIdentifier(), "correct_matrix.table"));
        const std::string calculated_table( AddExampleOutputPathToFilename( quality::GetNamespaceIdentifier(), "matrixRMSD.txt"));
        BCL_ExampleIndirectCheck
        (
          io::File::FilesMatch( correct_table, calculated_table),
          true,
          "quality application failed"
        );
      }

      // test computing matrix using threads
      // if threading is available, make use of it; this way we also test that threads are working properly
      if( sched::Scheduler( "PThread").IsDefined())
      {
        quality.UnsetFlag( "prefix");
        quality.SetFlag( "prefix", "pthread_matrix");
        quality.UnsetFlag( "scheduler");
        quality.SetFlag( "scheduler", storage::Vector< std::string>::Create( "PThread", "8"));
        quality.UnsetFlag( "quality");
        quality.SetFlag( "quality", "GDT_TS");

        // BCL_ExampleCheck( quality.CheckCommandString( true), true);

        // run a valid set of flags, check that the return status is 0
        if( BCL_ExampleCheck( quality.RunCommand(), 0))
        {
          // if the application ran successfully, check that files match
          const std::string correct_table( AddExampleOutputPathToFilename( quality::GetNamespaceIdentifier(), "correct_pthread_matrix.table"));
          const std::string calculated_table( AddExampleOutputPathToFilename( quality::GetNamespaceIdentifier(), "pthread_matrixGDT_TS.txt"));
          BCL_ExampleIndirectCheck
          (
            io::File::FilesMatch( correct_table, calculated_table),
            true,
            "quality application failed"
          );
        }
      }

      return 0;
    }

    static const ExampleClass::EnumType s_Instance;

  }; //end ExampleAppPDBCompare

  const ExampleClass::EnumType ExampleAppPDBCompare::s_Instance
  (
    GetExamples().AddEnum( ExampleAppPDBCompare())
  );

} // namespace bcl
