// (c) Copyright BCL @ Vanderbilt University 2014
// (c) BCL Homepage: http://www.meilerlab.org/bclcommons
// (c) BCL Code Repository: https://github.com/BCLCommons/bcl
// (c)
// (c) The BioChemical Library (BCL) was originally developed by contributing members of the Meiler Lab @ Vanderbilt University.
// (c)
// (c) The BCL is now made available as an open-source software package distributed under the permissive MIT license,
// (c) developed and maintained by the Meiler Lab at Vanderbilt University and contributing members of the BCL Commons.
// (c)
// (c) External code contributions to the BCL are welcome. Please visit the BCL Commons GitHub page for information on how you can contribute.
// (c)
// (c) This file is part of the BCL software suite and is made available under the MIT license.
// (c)

// include example header
#include "example.h"
// include the header of the class which this example is for
#include "descriptor/bcl_app_descriptor_refine_by_score.h"

// includes from bcl - sorted alphabetically
#include "example_application_example_helper.h"
#include "io/bcl_io_file.h"
#include "model/bcl_model.h"

// external includes - sorted alphabetically
#include <stdio.h>

namespace bcl
{
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //!
  //! @example example_app_descriptor_refine_by_score.cpp
  //!
  //! @author butkiem1
  //! @date Aug 23, 2012
  //! @remarks status complete
  //! @remarks reviewed by nobody on
  //!
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  class ExampleAppDescriptorRefineByScore :
    public ExampleInterface
  {
  public:

    ExampleAppDescriptorRefineByScore *Clone() const
    {
      return new ExampleAppDescriptorRefineByScore( *this);
    }

  /////////////////
  // data access //
  /////////////////

    //! @brief returns class name
    //! @return the class name as const ref std::string
    const std::string &GetClassIdentifier() const
    {
      return GetStaticClassName( *this);
    }

    int Run() const
    {

    //////////////////////////////////
    // construction and destruction //
    //////////////////////////////////

      ApplicationExampleHelper descriptor_refine_helper( app::DescriptorRefineByScore::s_Instance);

    /////////////////
    // data access //
    /////////////////

      // try running the command with no options, which should fail
      BCL_ExampleCheck( descriptor_refine_helper.CheckCommandString( false), false);

      // get the path to scores, generated by another application
      const std::string score_file( AddExampleInputPathToFilename( e_Model, "aid891_infogain.scores"));
      const std::string output_descriptor_filename
      (
        AddExampleOutputPathToFilename( model::GetNamespaceIdentifier(), "aid891_top50_infogain.object")
      );

      // add the flag to access this score file
      descriptor_refine_helper.SetFlag( "score_file", score_file);

      // select the top 50 descriptors
      descriptor_refine_helper.SetFlag( "select", "Top(50)");

      // add the output flag
      descriptor_refine_helper.SetFlag( "output", output_descriptor_filename);

      // test that the command can be run
      if( BCL_ExampleCheck( descriptor_refine_helper.CheckCommandString( true), true))
      {
        // run the command; expect 0 errors
        if( BCL_ExampleCheck( descriptor_refine_helper.RunCommand(), 0))
        {
          // command ran, check files
          if
          (
            BCL_ExampleIndirectCheck
            (
              io::File::FilesMatch( output_descriptor_filename, output_descriptor_filename + ".correct"),
              true,
              descriptor_refine_helper.GetCurrentCommandLine()
            )
          )
          {
            // file was fine, remove the newly-generated output file
            remove( output_descriptor_filename.c_str());
          }
        }
      }

      // reset flags
      descriptor_refine_helper.ResetFlagsAndParameters();

      // try flag that compares score files
      const std::string fscore_file( AddExampleInputPathToFilename( e_Model, "aid891_fscore.scores"));
      descriptor_refine_helper.SetFlag( "score_file", score_file);
      descriptor_refine_helper.SetFlag( "compare_score_file", fscore_file);

      const std::string log_filename
      (
        AddExampleOutputPathToFilename( model::GetNamespaceIdentifier(), "RefineByScore.log")
      );

      // write to the logger to catch the comparison value
      descriptor_refine_helper.SetFlag( "logger", storage::Vector< std::string>::Create( "File", log_filename));

      // test that the command line is valid and that it runs.  Note that it will not produce any output files
      if( BCL_ExampleCheck( descriptor_refine_helper.CheckCommandString( true), true))
      {
        // run the command; expect 0 errors
        if( BCL_ExampleCheck( descriptor_refine_helper.RunCommand(), 0))
        {
          // get all strings from the file
          io::IFStream input;
          BCL_ExampleMustOpenInputFile( input, log_filename);
          storage::Vector< std::string> file_lines( util::StringLineListFromIStream( input));
          io::File::CloseClearFStream( input);
          std::string correlation_str;
          for
          (
            storage::Vector< std::string>::const_iterator itr( file_lines.Begin()), itr_end( file_lines.End());
            itr != itr_end;
            ++itr
          )
          {
            if( util::StartsWith( *itr, "Spearman"))
            {
              correlation_str = util::SplitString( *itr).LastElement();
              break;
            }
          }

          // check correlation value
          if
          (
            BCL_ExampleIndirectCheckWithinAbsTolerance
            (
              util::ConvertStringToNumericalValue< double>( correlation_str),
              0.41403,
              0.001,
              "Correlation coefficient"
            )
          )
          {
            remove( log_filename.c_str());
          }
        }
      }

    //////////////////////
    // input and output //
    //////////////////////

    //////////////////////
    // helper functions //
    //////////////////////

      return 0;
    } // Run

    static const ExampleClass::EnumType s_Instance;

  }; //end Exampleexample_name

  const ExampleClass::EnumType ExampleAppDescriptorRefineByScore::s_Instance
  (
    GetExamples().AddEnum( ExampleAppDescriptorRefineByScore())
  );

} // namespace bcl
