// (c) Copyright BCL @ Vanderbilt University 2014
// (c) BCL Homepage: http://www.meilerlab.org/bclcommons
// (c) BCL Code Repository: https://github.com/BCLCommons/bcl
// (c)
// (c) The BioChemical Library (BCL) was originally developed by contributing members of the Meiler Lab @ Vanderbilt University.
// (c)
// (c) The BCL is now made available as an open-source software package distributed under the permissive MIT license,
// (c) developed and maintained by the Meiler Lab at Vanderbilt University and contributing members of the BCL Commons.
// (c)
// (c) External code contributions to the BCL are welcome. Please visit the BCL Commons GitHub page for information on how you can contribute.
// (c)
// (c) This file is part of the BCL software suite and is made available under the MIT license.
// (c)

// include example header
#include "example.h"
// include the header of the class which this example is for
#include "restraint/bcl_restraint_handler_body.h"

// includes from bcl - sorted alphabetically
#include "example_proteins.h"
#include "assemble/bcl_assemble_protein_model.h"
#include "io/bcl_io_file.h"
#include "restraint/bcl_restraint_assignment.h"
#include "restraint/bcl_restraint_body.h"
#include "restraint/bcl_restraint_contains_body_origin.h"

// external includes - sorted alphabetically

namespace bcl
{
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //!
  //! @example example_restraint_handler_body.cpp
  //!
  //! @author alexanns
  //! @date
  //! @remarks status incomplete
  //! @remarks reviewed by nobody on
  //!
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  class ExampleRestraintHandlerBody :
    public ExampleInterface
  {
  public:

    ExampleRestraintHandlerBody *Clone() const
    { return new ExampleRestraintHandlerBody( *this);}

  /////////////////
  // data access //
  /////////////////

    //! @brief returns class name
    //! @return the class name as const ref std::string
    virtual const std::string &GetClassIdentifier() const
    {
      return GetStaticClassName( *this);
    }

    int Run() const
    {

      BCL_MessageStd( GetStaticClassName< restraint::HandlerBody>());

      // create string "pdb_filename" which has path for example pdb file
      const std::string pdb_filename( AddExampleInputPathToFilename( e_Biology, "1ubi_ideal_model.pdb"));
      // create ProteinModel "protein_model" from "pdb"
      BCL_MessageStd( "building models from pdb chains and sse information");
      storage::Map< biol::SSType, size_t> ssetype_min_size;
      ssetype_min_size[ biol::GetSSTypes().HELIX] = 9;
      ssetype_min_size[ biol::GetSSTypes().STRAND] = 5;
      assemble::ProteinModel protein_model
      (
        Proteins::GetModel( pdb_filename, biol::GetAAClasses().e_AABackBone, ssetype_min_size)
      );

      // get the helix secondary structure elements of "protein_model"
      util::SiPtrVector< const assemble::SSE> helix_sses
      (
        protein_model.GetChains()( 0)->GetSSEs( biol::GetSSTypes().HELIX)
      );

      io::IFStream read;
      // open stream to pdb file
      BCL_MessageStd( "read pdb file: " + pdb_filename);
      BCL_ExampleMustOpenInputFile( read, pdb_filename);

      // create HandlerBody "handler"
      restraint::HandlerBody handler
      (
        // initialize with ShPtr to a restraint::ContainsBodyOrigin to determine occupancies
        util::ShPtr< util::BinaryFunctionInterface< assemble::SSEGeometryInterface, assemble::SSE, bool> >
        (
          new restraint::ContainsBodyOrigin()
        )
      );

      // create ShPtrVector "restraint_vector" to hold the restraint::Body created from "handler" and "read"
      util::ShPtrVector< restraint::Body> restraint_vector( handler.CreateRestraintsBody( read));

      // close and clear stream
      io::File::CloseClearFStream( read);

      // make sure "restraint_vector" has one item in it
      BCL_Example_Check
      (
        restraint_vector.GetSize() == 1, "size of restraint_vector should be 1 but is "
        + util::Format()( restraint_vector.GetSize())
      );

      // create Assignment "body_assignment" and initialize with the assignments generated by the restraint::Body
      // of "restraint_vector"
      restraint::SSEAssignment body_assignment
      (
        ( *restraint_vector.Begin())->GenerateAssignment( helix_sses)
      );

      // make sure "body_assignment" has the correct total depth
      BCL_MessageStd( "\ncheck total depth\n");
      BCL_Example_Check
      (
        body_assignment.GetGroupCollection().TotalDepth() == 1, "total depth should be one but is "
        + util::Format()( body_assignment.GetGroupCollection().TotalDepth())
      );

      // make sure that "body_assignment" has the correct number of the coord::Bodies as the restraint
      BCL_MessageStd( "\ncheck number of the coord::Bodies\n");
      BCL_Example_Check
      (
        body_assignment.GetRestraint()->GetSize() == 5,
        "number of bodies as the restraint of body_assignment should be 5 but is "
        + util::Format()( body_assignment.GetRestraint()->GetSize())
      );

      // end
      return 0;
    }

    static const ExampleClass::EnumType s_Instance;

  }; //end ExampleRestraintHandlerBody

  const ExampleClass::EnumType ExampleRestraintHandlerBody::s_Instance
  (
    GetExamples().AddEnum( ExampleRestraintHandlerBody())
  );

} // namespace bcl
