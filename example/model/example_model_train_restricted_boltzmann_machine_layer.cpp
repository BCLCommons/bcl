// (c) Copyright BCL @ Vanderbilt University 2014
// (c) BCL Homepage: http://www.meilerlab.org/bclcommons
// (c) BCL Code Repository: https://github.com/BCLCommons/bcl
// (c)
// (c) The BioChemical Library (BCL) was originally developed by contributing members of the Meiler Lab @ Vanderbilt University.
// (c)
// (c) The BCL is now made available as an open-source software package distributed under the permissive MIT license,
// (c) developed and maintained by the Meiler Lab at Vanderbilt University and contributing members of the BCL Commons.
// (c)
// (c) External code contributions to the BCL are welcome. Please visit the BCL Commons GitHub page for information on how you can contribute.
// (c)
// (c) This file is part of the BCL software suite and is made available under the MIT license.
// (c)

// include example header
#include "example.h"
// include the header of the class which this example is for
#include "model/bcl_model_train_restricted_boltzmann_machine_layer.h"

// includes from bcl - sorted alphabetically
#include "descriptor/bcl_descriptor_dataset.h"
#include "linal/bcl_linal_vector_reference.h"
#include "math/bcl_math_running_average.h"
#include "math/bcl_math_template_instantiations.h"
#include "model/bcl_model_neural_network_update_weights_interface.h"
#include "model/bcl_model_transfer_sigmoid.h"
#include "storage/bcl_storage_template_instantiations.h"
#include "util/bcl_util_implementation.h"

// external includes - sorted alphabetically

namespace bcl
{
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //!
  //! @example example_model_train_restricted_boltzmann_machine_layer.cpp
  //!
  //! @author mendenjl
  //! @date Aug 12, 2013
  //! @remarks status complete
  //! @remarks reviewed by nobody on
  //!
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  class ExampleModelTrainRestrictedBoltzmannMachineLayer :
    public ExampleInterface
  {
  public:

    ExampleModelTrainRestrictedBoltzmannMachineLayer *Clone() const
    {
      return new ExampleModelTrainRestrictedBoltzmannMachineLayer( *this);
    }

  /////////////////
  // data access //
  /////////////////

    //! @brief returns class name
    //! @return the class name as const ref std::string
    const std::string &GetClassIdentifier() const
    {
      return GetStaticClassName( *this);
    }

    int Run() const
    {
      static const size_t s_number_rows( 500);
      static const size_t s_number_cols( 2);
      // these example data are from the code given on http://imonad.com/rbm/restricted-boltzmann-machine/
      // depicting several comma-like ellipsoidal regions
      static const float data[ s_number_rows * s_number_cols] =
      {
        0.87280071,  0.52097261, 0.33249259, 0.37589872, 0.14657505, 0.097202502, 0.84873545, 0.41865131, 0.90638041,
        0.83182514,  0.062945023, 0.48037153, 0.76934135, 0.40921712, 0.93662584, 0.55035049, 0.43320626, 0.67677581,
        0.7623564,   0.37933066, 0.40954039, 0.64074641, 0.334351, 0.65552264, 0.076038592, 0.18778512, 0.53399485,
        0.32138944,  0.33409181, 0.64470094, 0.75174874, 0.37181374, 0.91886568, 0.59297818, 0.85952622, 0.41054162,
        0.874201,    0.74353248, 0.3768695, 0.66604233, 0.926943, 0.74515015, 0.29809955, 0.62278897, 0.47467148,
        0.63591313,  0.70363694, 0.32946697, 0.81286311, 0.42654365, 0.16922505, 0.59642136, 0.17541173, 0.5969224,
        0.12122424,  0.51912999, 0.14202712, 0.5608266, 0.28308341, 0.68284607, 0.11608178, 0.16345522, 0.89729154,
        0.80850559,  0.87971425, 0.59912449, 0.40711313, 0.42800778, 0.49361095, 0.30789527, 0.50493711, 0.37177619,
        0.87757623,  0.51658517, 0.90346813, 0.90560073, 0.90627265, 0.59465754, 0.10952549, 0.33889806, 0.84808892,
        0.43216118,  0.8778047, 0.42477652, 0.33236268, 0.67439145, 0.47649887, 0.36974639, 0.10687476, 0.19018042,
        0.87851506,  0.80730772, 0.088912822, 0.42392108, 0.76217729, 0.35704663, 0.12119471, 0.21907467, 0.77189773,
        0.44206896,  0.76037169, 0.36940703, 0.34049481, 0.36750576, 0.19584268, 0.63841206, 0.92114806, 0.66374207,
        0.11642437,  0.24172987, 0.54177368, 0.65278149, 0.26895487, 0.68800777, 0.60031575, 0.30869392, 0.13574982,
        0.16298704,  0.35992306, 0.64324671, 0.74155527, 0.32240877, 0.71292329, 0.33772138, 0.72210336, 0.31931421,
        0.94462091,  0.67085266, 0.53031868, 0.67058074, 0.072077267, 0.1912037, 0.104058, 0.27427128, 0.080704682,
        0.24996898,  0.50171024, 0.68992698, 0.35434777, 0.66818982, 0.55015403, 0.61316997, 0.27384397, 0.62992084,
        0.71512336,  0.31004062, 0.76072586, 0.42162982, 0.12725696, 0.14136559, 0.9301191, 0.74339801, 0.90055937,
        0.70876503,  0.14857861, 0.14801627, 0.058561426, 0.28582242, 0.74595648, 0.3511816, 0.061675292, 0.34097564,
        0.7677629,   0.36145747, 0.21105261, 0.62906271, 0.31206843, 0.62163758, 0.91535217, 0.52500987, 0.50128597,
        0.37105581,  0.34725595, 0.37699097, 0.5802846, 0.35639596, 0.10605642, 0.42098013, 0.38988438, 0.36019108,
        0.67343116,  0.29693076, 0.093840815, 0.41372952, 0.14571352, 0.49171671, 0.51405138, 0.31587681, 0.49251282,
        0.69009668,  0.73190027, 0.37949547, 0.80973816, 0.3728517, 0.8900196, 0.67108905, 0.561984, 0.34251419,
        0.64331317,  0.33905885, 0.47313794, 0.70829469, 0.40460217, 0.40343055, 0.93926585, 0.62875241, 0.60560167,
        0.64673036,  0.84118086, 0.4319075, 0.25389197, 0.59020555, 0.40510064, 0.41167963, 0.96329576, 0.59260529,
        0.95498866,  0.56636596, 0.87938327, 0.9292084, 0.88187498, 0.49482352, 0.54709899, 0.62871492, 0.9024449,
        0.47005782,  0.87797344, 0.62531972, 0.88353777, 0.78578818, 0.54727095, 0.31612733, 0.11758737, 0.32288897,
        0.86412174,  0.8531388, 0.89433384, 0.53319001, 0.54463917, 0.32286334, 0.29228324, 0.69890767, 0.48006412,
        0.65574276,  0.48291203, 0.32538497, 0.094378009, 0.38539892, 0.64385378, 0.6330629, 0.39593494, 0.7009936,
        0.10944887,  0.28980598, 0.039050296, 0.22803558, 0.41142464, 0.39583927, 0.63608289, 0.59891844, 0.54055589,
        0.29424202,  0.52065212, 0.67775059, 0.8191008, 0.37679815, 0.46239588, 0.35885897, 0.55889934, 0.31118101,
        0.13561249,  0.43106225, 0.92018247, 0.74159169, 0.072978057, 0.25343207, 0.95614159, 0.79181373, 0.81570214,
        0.38715705,  0.372224, 0.40471631, 0.14472306, 0.60451126, 0.84974235, 0.85846502, 0.89285237, 0.62035364,
        0.34099463,  0.63803035, 0.21181804, 0.5541876, 0.34431544, 0.64838636, 0.92235601, 0.80739468, 0.80651611,
        0.47814354,  0.42253208, 0.71040344, 0.71976805, 0.30745322, 0.20430264, 0.60112691, 0.92101496, 0.73090124,
        0.86079514,  0.42871636, 0.33253485, 0.64845771, 0.20485175, 0.59992808, 0.17106733, 0.12659086, 0.54533225,
        0.61220372,  0.85984409, 0.85138798, 0.5769797, 0.59318, 0.27172586, 0.62662268, 0.57371813, 0.280628,
        0.14370176,  0.47834697, 0.54994702, 0.29276162, 0.39013132, 0.63491142, 0.4697966, 0.33678362, 0.71786183,
        0.33620191,  0.95252514, 0.59176582, 0.62972951, 0.32403666, 0.095191382, 0.48845366, 0.95194501, 0.79849398,
        0.42119408,  0.34818327, 0.5600366, 0.59730071, 0.40279201, 0.64976269, 0.11286014, 0.22399892, 0.92600048,
        0.59488654,  0.8981421, 0.52262282, 0.11454865, 0.44408697, 0.048058461, 0.35606885, 0.096392095, 0.43363616,
        0.89400363,  0.68340296, 0.11254966, 0.073711969, 0.65813899, 0.38591728, 0.18195114, 0.52288586, 0.26920694,
        0.65344822,  0.92350072, 0.48772952, 0.94212788, 0.5999732, 0.11632917, 0.14064534, 0.082366109, 0.23227088,
        0.62382972,  0.28813788, 0.08828067, 0.43855906, 0.91265529, 0.66518855, 0.13200426, 0.20280133, 0.055053499,
        0.38263598,  0.30857673, 0.59887642, 0.91682327, 0.64549553, 0.30941394, 0.684223, 0.88089097, 0.64763647,
        0.49278679,  0.66444916, 0.91806793, 0.8502053, 0.94528192, 0.78123325, 0.97351897, 0.643085, 0.95733023,
        0.64361417,  0.089882225, 0.14078943, 0.8704564, 0.55604923, 0.42590925, 0.65678281, 0.101485, 0.08355137,
        0.029259527, 0.24766694, 0.14012304, 0.12954621, 0.12075113, 0.21339175, 0.43927634, 0.34476933, 0.85062295,
        0.85839164,  0.65201569, 0.32212344, 0.82529294, 0.39877504, 0.25191429, 0.58191353, 0.92761171, 0.78472418,
        0.31752914,  0.67249817, 0.72020549, 0.32995209, 0.89226139, 0.65651679, 0.24995692, 0.57546705, 0.73799562,
        0.37821543,  0.12174517, 0.43606555, 0.10517617, 0.38178471, 0.06684573, 0.47453335, 0.45396101, 0.69758993,
        0.91717905,  0.78486794, 0.94711399, 0.74774224, 0.86614865, 0.5299108, 0.46172938, 0.35810027, 0.03666456,
        0.39642224,  0.93691283, 0.52479291, 0.11567048, 0.14477067, 0.078277312, 0.30319828, 0.065301768, 0.38327676,
        0.78820902,  0.39985311, 0.067080244, 0.32651773, 0.41220301, 0.32118389, 0.42466906, 0.691369, 0.88881195,
        0.77917987,  0.35911861, 0.6780023, 0.45884922, 0.31353211, 0.473627, 0.71355462, 0.21814719, 0.64846075,
        0.64567965,  0.35057703, 0.73962367, 0.32341811, 0.97183222, 0.7303341, 0.67271739, 0.35625505, 0.23841669,
        0.63688642,  0.30153206, 0.69294435, 0.065979555, 0.21725518, 0.046561938, 0.44107765, 0.10778935, 0.48910049,
        0.11444836,  0.53623182, 0.88731998, 0.55094969, 0.083442554, 0.27298918, 0.62124658, 0.31778687, 0.1326967,
        0.42718428,  0.56435394, 0.29793987, 0.2334435, 0.63679534, 0.94819808, 0.67535889, 0.95042729, 0.81770504,
        0.96798337,  0.65804201, 0.37926334, 0.36520052, 0.95585179, 0.55869645, 0.040434238, 0.35799292, 0.052957337,
        0.36924851,  0.18141787, 0.5557335, 0.30823281, 0.65528059, 0.051235169, 0.28450328, 0.8895095, 0.54271549,
        0.97638535,  0.728248, 0.95074618, 0.68619627, 0.6152916, 0.30296919, 0.072541073, 0.35449278, 0.86451048,
        0.48046771,  0.13119617, 0.58551121, 0.92165142, 0.5304907, 0.026451487, 0.27506599, 0.12008723, 0.24042775,
        0.021525603, 0.33806494, 0.13564374, 0.53643256, 0.49977329, 0.3334415, 0.051588215, 0.37177575, 0.5019272,
        0.63247669,  0.37364465, 0.38069844, 0.90164983, 0.87510937, 0.95524055, 0.75999391, 0.31214753, 0.64630353,
        0.11949904,  0.12313452, 0.071840808, 0.17511241, 0.58261722, 0.62547028, 0.099597819, 0.50199974, 0.89396578,
        0.54947507,  0.4859736, 0.37762737, 0.14629124, 0.14308608, 0.94958848, 0.70243257, 0.34184885, 0.6750055,
        0.052044127, 0.22568147, 0.94750857, 0.55183935, 0.95459425, 0.67741883, 0.93049109, 0.61753768, 0.55304146,
        0.64577359,  0.89012539, 0.93109411, 0.46793926, 0.35187557, 0.42776468, 0.40084967, 0.47815424, 0.38727969,
        0.63537627,  0.33017305, 0.96579272, 0.6905154, 0.13884109, 0.17033899, 0.13318308, 0.13640308, 0.91992015,
        0.88600928,  0.6730026, 0.36613676, 0.58044422, 0.57674628, 0.26205179, 0.6492241, 0.42787755, 0.66274798,
        0.61248249,  0.29010108, 0.51293904, 0.64521414, 0.45226502, 0.32259876, 0.66388822, 0.28958842, 0.095380284,
        0.30334657,  0.24921846, 0.58944786, 0.62011981, 0.58788586, 0.49620453, 0.3456116, 0.18417943, 0.56311584,
        0.083515972, 0.15675722, 0.79145169, 0.43315771, 0.91677421, 0.69130033, 0.27726853, 0.6212824, 0.10983226,
        0.55044281,  0.40120119, 0.35811752, 0.10195345, 0.43446487, 0.55591565, 0.65068328, 0.79296464, 0.41764823,
        0.93196321,  0.67865783, 0.12236603, 0.12988335, 0.53149819, 0.30037796, 0.29463077, 0.66808981, 0.11368591,
        0.28790742,  0.47059214, 0.70372933, 0.71371692, 0.34441778, 0.33222196, 0.70862669, 0.49701366, 0.39082995,
        0.6279673 ,  0.28396207, 0.92096138, 0.7785539, 0.40294185, 0.62140387, 0.47697377, 0.31445667, 0.88169169,
        0.67496818,  0.073085077, 0.14003378, 0.10670476, 0.35484964, 0.87953728, 0.81906891, 0.82916385, 0.50712347,
        0.44941604,  0.65074432, 0.10142466, 0.52502483, 0.93994111, 0.51236886, 0.034028158, 0.3295078, 0.81343275,
        0.43083912,  0.57516623, 0.35276061, 0.58769464, 0.62180287, 0.87854403, 0.71265924, 0.60582954, 0.62909353,
        0.4876062 ,  0.38265926, 0.38112172, 0.62126034, 0.3911418, 0.33278987, 0.29656184, 0.61685336, 0.63637018,
        0.59160149,  0.058836062, 0.36329347, 0.8314234, 0.44803548, 0.89828551, 0.74001682, 0.35289261, 0.69194227,
        0.9414894 ,  0.58183503, 0.34932774, 0.65684396, 0.58918345, 0.28523636, 0.14822935, 0.48327968, 0.60325783,
        0.36400703,  0.47629383, 0.29618812, 0.69279057, 0.31340721, 0.94041872, 0.61960238, 0.47586596, 0.33589029,
        0.41365364,  0.42743292, 0.88317704, 0.53982711, 0.5462746, 0.36963788, 0.50852829, 0.61740321, 0.060875043,
        0.27638656,  0.4319922, 0.39153919, 0.35248193, 0.67985588, 0.94902843, 0.60740274, 0.46355978, 0.69987917,
        0.70895082,  0.31050727, 0.57922113, 0.2835086, 0.89264506, 0.88051903, 0.85937643, 0.85699308, 0.29914364,
        0.64832914,  0.20907709, 0.63708347, 0.42072862, 0.33738571, 0.90494961, 0.84432161, 0.037824236, 0.26941442,
        0.95052755,  0.69108635, 0.3955842, 0.70895272, 0.48072892, 0.35901934, 0.88652354, 0.65054554, 0.87473345,
        0.46896905,  0.82606971, 0.40623114, 0.36982793, 0.63484704, 0.60768092, 0.35184032, 0.44613972, 0.34644637,
        0.34647572,  0.69846725, 0.10305426, 0.27898192, 0.48298201, 0.62268251, 0.048452206, 0.24318293, 0.51666832,
        0.65056717,  0.10277265, 0.43757612, 0.3591516, 0.67328787, 0.45419309, 0.31352103, 0.0971018, 0.094296277,
        0.92580283,  0.61803055, 0.08456824, 0.10246583, 0.72626203, 0.34898263, 0.17263554, 0.12888122, 0.60470575,
        0.59680068,  0.90837562, 0.79444277, 0.3365272, 0.3744356, 0.7292977, 0.38674811, 0.87242323, 0.54540199,
        0.36981964,  0.64212483, 0.20273384, 0.56001359, 0.10873051, 0.1588172, 0.51421851, 0.3236759, 0.95724958,
        0.55125457,  0.88802719, 0.75671637, 0.88243651, 0.45370355, 0.9637211, 0.73908436, 0.086942792, 0.22408719,
        0.11301724,  0.39249006, 0.63061994, 0.30745801, 0.5844264, 0.58874947, 0.89327449, 0.45731807, 0.53075683,
        0.31893981,  0.88077027, 0.44228777, 0.12755416, 0.51423419, 0.10020515, 0.47156551, 0.91895795, 0.7677784,
        0.4570516 ,  0.68925989, 0.5529353, 0.65124452, 0.6159572, 0.62565565, 0.72006667, 0.35091531, 0.91096717,
        0.76556617,  0.93112719, 0.77267396, 0.11548086, 0.36199582, 0.14155914, 0.15409133, 0.89691186, 0.61444837,
        0.22159415,  0.58667845, 0.065063938, 0.19495207, 0.11182886, 0.17224599, 0.44685265, 0.35992599, 0.10547691,
        0.46722344,  0.49767277, 0.70498097, 0.94988596, 0.71621358, 0.91845691, 0.69427085, 0.4921335, 0.38117701,
        0.87247157,  0.86644691, 0.4491044, 0.32050765, 0.24606924, 0.65627617, 0.12209235, 0.43743014, 0.57765412,
        0.65019077,  0.96958399, 0.70754653, 0.60692734, 0.60628748, 0.087103583, 0.36870793, 0.94549471, 0.55897039,
        0.31749132,  0.62863076, 0.087037072, 0.45630753, 0.86269271, 0.51450545, 0.1299168, 0.46249008, 0.72054267,
        0.30625591,  0.091104813, 0.21959257, 0.88450187, 0.77143914, 0.03673226, 0.37875888, 0.91347831, 0.68108577,
        0.78741831,  0.35213366, 0.58713859, 0.57609391, 0.91609031, 0.8675617, 0.64500993, 0.36507338, 0.21730641,
        0.58601445,  0.53261226, 0.68660432, 0.86345661, 0.83301222, 0.10017639, 0.55624264, 0.096463665, 0.51279783,
        0.46180969,  0.39410624, 0.93365145, 0.58666068, 0.048314199, 0.31041485, 0.56368279, 0.35030064, 0.55846733,
        0.64185017,  0.062471818, 0.46411103, 0.40686247, 0.71130157, 0.612409, 0.34467971, 0.09732201, 0.33157283,
        0.80168074,  0.42338285, 0.70734686, 0.40218216, 0.8041662, 0.44686496, 0.21162671, 0.64232278, 0.58692545,
        0.67060614
      };

      //initializing
      linal::Matrix< float> features_results_setup( s_number_rows, s_number_cols, data);

    //////////////////////////////////
    // construction and destruction //
    //////////////////////////////////

      // construct a simple boltzmann network
      static const size_t s_number_hidden_neurons( 8);

      model::FeatureDataSet< float> fds( features_results_setup);

    /////////////////
    // data access //
    /////////////////

    ///////////////
    // operators //
    ///////////////

      util::Implementation< model::NeuralNetworkUpdateWeightsInterface> weight_updater( "Simple( alpha=0.5,eta=0.5)");
      util::Implementation< model::NeuralNetworkUpdateWeightsInterface> hidden_bias_updater( "Simple( alpha=0.5,eta=0.5)");
      util::Implementation< model::NeuralNetworkUpdateWeightsInterface> hidden_noise_updater( "Simple( alpha=0.5,eta=0.5)");
      util::Implementation< model::NeuralNetworkUpdateWeightsInterface> visible_bias_updater( "Simple( alpha=0.5,eta=0.5)");
      util::Implementation< model::NeuralNetworkUpdateWeightsInterface> visible_noise_updater( "Simple( alpha=0.5,eta=0.5)");

      for
      (
        model::RestrictedBoltzmannMachineLayer::TypeEnum type;
        type != model::RestrictedBoltzmannMachineLayer::s_NumberTypes;
        ++type
      )
      {
        model::RestrictedBoltzmannMachineLayer boltz_type
        (
          s_number_cols,
          s_number_hidden_neurons,
          type
        );
        BCL_MessageStd( "Training a network with method: " + type.GetString());
        model::TrainRestrictedBoltzmannMachineLayer trainer( boltz_type, 3);
        weight_updater->Initialize( s_number_cols * s_number_hidden_neurons);
        hidden_bias_updater->Initialize( s_number_hidden_neurons);
        hidden_noise_updater->Initialize( s_number_hidden_neurons);
        visible_bias_updater->Initialize( s_number_cols);
        visible_noise_updater->Initialize( s_number_cols);

        // for 200 iterations
        for( size_t iteration( 0); iteration < 200; ++iteration)
        {
          BCL_MessageStd
          (
            "Iteration: " + util::Format()( iteration)
            + " reconstruction error: " + util::Format()( boltz_type.ComputeReconstructionError( fds))
          );
          // train each row
          for( size_t i( 0); i < s_number_rows; ++i)
          {
            trainer.Train( fds( i));
          }
          trainer.UpdateLayer
          (
            0.0001,
            *weight_updater,
            *visible_bias_updater,
            *hidden_bias_updater,
            *visible_noise_updater,
            *hidden_noise_updater
          );
          trainer.Reset();
        }

        BCL_ExampleIndirectCheckWithinAbsTolerance
        (
          boltz_type.ComputeReconstructionError( fds),
          0.0,
          0.2,
          "Training reconstruction ave variance with method " + type.GetString()
        );
      }

    ////////////////
    // operations //
    ////////////////

    //////////////////////
    // input and output //
    //////////////////////

    //////////////////////
    // helper functions //
    //////////////////////

      return 0;
    } // Run

    static const ExampleClass::EnumType s_Instance;

  };
  //end ExampleModelTrainRestrictedBoltzmannMachineLayer

  const ExampleClass::EnumType ExampleModelTrainRestrictedBoltzmannMachineLayer::s_Instance
  (
    GetExamples().AddEnum( ExampleModelTrainRestrictedBoltzmannMachineLayer())
  );

} // namespace bcl
