// (c) Copyright BCL @ Vanderbilt University 2014
// (c) BCL Homepage: http://www.meilerlab.org/bclcommons
// (c) BCL Code Repository: https://github.com/BCLCommons/bcl
// (c)
// (c) The BioChemical Library (BCL) was originally developed by contributing members of the Meiler Lab @ Vanderbilt University.
// (c)
// (c) The BCL is now made available as an open-source software package distributed under the permissive MIT license,
// (c) developed and maintained by the Meiler Lab at Vanderbilt University and contributing members of the BCL Commons.
// (c)
// (c) External code contributions to the BCL are welcome. Please visit the BCL Commons GitHub page for information on how you can contribute.
// (c)
// (c) This file is part of the BCL software suite and is made available under the MIT license.
// (c)

// initialize the static initialization fiasco finder, if macro ENABLE_FIASCO_FINDER is defined
#include "util/bcl_util_static_initialization_fiasco_finder.h"
BCL_StaticInitializationFiascoFinder

// include header of this class
#include "score/bcl_score_aa_assignment_phat.h"

// includes from bcl - sorted alphabetically
#include "biol/bcl_biol_aa_base.h"

// external includes - sorted alphabetically

namespace bcl
{
  namespace score
  {

  ///////////
  // enums //
  ///////////

    //! @brief TableType as string
    //! @param PHAT_TABLE the message level
    //! @return the TableType as string
    const std::string &AAAssignmentPHAT::GetTableTypeString( const AAAssignmentPHAT::TableType &PHAT_TABLE)
    {
      static const std::string s_phat_table_strings[] =
      {
        "PHAT_85",
        "PHAT_80",
        "PHAT_75",
        "PHAT_70",
        GetStaticClassName< TableType>()
      };

      return s_phat_table_strings[ PHAT_TABLE];
    }

  //////////
  // data //
  //////////

    // instantiate s_Instance
    const util::SiPtr< const util::ObjectInterface> AAAssignmentPHAT::s_Instance
    (
      GetObjectInstances().AddInstance( new AAAssignmentPHAT())
    );

    //! The PHAT (Predicted Hydrophobic And Transmembrane) scoring matrices are built from predicted
    //! hydrophobic and transmembrane regions.
    //! It has been shown to perform better than BLOSUM (Henikoff and Henikoff, 1992),
    //! JTT-modified PAM (Jones, Taylor, Thornton, 1992) and other transmembrane matrices (Jones, Taylor,
    //! Thornton, 1994) at aligning transmembrane regions of proteins.
    //!
    //! The PHAT matrices are built from target frequencies obtained from BLOCKS predicted to be
    //! transmembrane by PHDhtm and background frequencies from hydrophobic and transmembrane
    //! regions as determined by Persson-Argos transmembrane propensity values.
    //! There are four matrices built on different levels of sequence identity attributed to
    //! PHDhtm (T) and Persson-Argos (B):
    //!
    //! PHAT T=85 (H = 0.5937), B=82 (H = 0.5949): Entropy =   0.6899, Expected =  -0.6002
    //! PHAT T=80 (H = 0.5550), B=78 (H = 0.5556): Entropy =   0.6124, Expected =  -0.5269
    //! PHAT T=75 (H = 0.5007), B=73 (H = 0.5038): Entropy =   0.5605, Expected =  -0.4732
    //! PHAT T=70 (H = 0.4318), B=66 (H = 0.4311): Entropy =   0.4795, Expected =  -0.3933
    //!
    //! It was found that PHAT T=75, B=73 worked best for transmembrane regions, although all
    //! PHAT matrices showed significant improvement over BLOSUM64, JTT-modified PAM and the
    //! JTT transmembrane matrix.
    //!
    //! Note: On the website, the values for amino acid X are different in the *.iij and *.bla files.
    //! The ones used here are the values from the *.iij files, which are a more accurate representation
    //! of the average values over                                                                                                                                                                                                     all the amino acids.
    //!
    //! http://blocks.fhcrc.org/sift/PHAT.html
    //! PHAT: a transmembrane-specific substitution matrix
    //! (Ng, Henikoff, Henikoff 2000 Bioinformatics 16: 760-766 + Errata in Bioinformatics 17:290)

    const double AAAssignmentPHAT::s_PHATTable[][ biol::AATypes::s_NumberStandardAATypes + 4][ biol::AATypes::s_NumberStandardAATypes + 4] =
    {
      //PHAT_85
      {
//        ALA  ARG  ASN  ASP  CYS  GLN  GLU  GLY  HIS  ILE  LEU  LYS  MET  PHE  PRO  SER  THR  TRP  TYR  VAL  ASX  GLX  XXX  GAP
        { 0.3,-0.5,-0.1,-0.4, 0.0,-0.2,-0.4, 0.1,-0.2, 0.0, 0.0,-0.5,-0.1,-0.1,-0.3, 0.1, 0.0,-0.4,-0.3, 0.1,-0.2,-0.3, 0.0,-0.8}, //ALA
        {-0.5, 0.6,-0.2,-0.6,-0.6,-0.1,-0.5,-0.4,-0.3,-0.5,-0.4,-0.1,-0.4,-0.5,-0.6,-0.4,-0.4,-0.5,-0.5,-0.5,-0.3,-0.3,-0.1,-0.8}, //ARG
        {-0.1,-0.2, 0.8, 0.2,-0.1, 0.1,-0.1,-0.1, 0.3,-0.3,-0.2,-0.2,-0.2,-0.1,-0.3, 0.1, 0.0,-0.3, 0.1,-0.3, 0.7, 0.1,-0.1,-0.8}, //ASN
        {-0.4,-0.6, 0.2, 0.8,-0.6, 0.0, 0.4,-0.2,-0.1,-0.5,-0.5,-0.4,-0.4,-0.4,-0.5,-0.3,-0.4,-0.6,-0.3,-0.4, 0.4, 0.2,-0.1,-0.8}, //ASP
        { 0.0,-0.6,-0.1,-0.6, 0.5,-0.4,-0.6,-0.2,-0.5,-0.2,-0.1,-0.8,-0.1,-0.1,-0.7, 0.1, 0.0,-0.3,-0.2,-0.1,-0.2,-0.5,-0.2,-0.8}, //CYS
        {-0.2,-0.1, 0.1, 0.0,-0.4, 0.7, 0.0,-0.2, 0.1,-0.2,-0.2,-0.1,-0.1,-0.2,-0.3,-0.1,-0.2, 0.0,-0.1,-0.2, 0.1, 0.4,-0.1,-0.8}, //GLN
        {-0.4,-0.5,-0.1, 0.4,-0.6, 0.0, 0.8,-0.3,-0.1,-0.4,-0.4,-0.3,-0.4,-0.4,-0.4,-0.2,-0.4,-0.4,-0.3,-0.4, 0.1, 0.4,-0.1,-0.8}, //GLU
        { 0.1,-0.4,-0.1,-0.2,-0.2,-0.2,-0.3, 0.6,-0.3,-0.2,-0.2,-0.4,-0.1,-0.2,-0.3, 0.1,-0.1,-0.4,-0.3,-0.1,-0.1,-0.2,-0.1,-0.8}, //GLY
        {-0.2,-0.3, 0.3,-0.1,-0.5, 0.1,-0.1,-0.3, 0.8,-0.4,-0.3,-0.4,-0.3,-0.1,-0.6,-0.2,-0.2,-0.2, 0.1,-0.4, 0.2, 0.0,-0.1,-0.8}, //HIS
        { 0.0,-0.5,-0.3,-0.5,-0.2,-0.2,-0.4,-0.2,-0.4, 0.3, 0.1,-0.6, 0.2, 0.0,-0.4,-0.2, 0.0,-0.3,-0.2, 0.2,-0.3,-0.3,-0.1,-0.8}, //ILE
        { 0.0,-0.4,-0.2,-0.5,-0.1,-0.2,-0.4,-0.2,-0.3, 0.1, 0.3,-0.6, 0.2, 0.0,-0.4,-0.2, 0.0,-0.2,-0.2, 0.1,-0.3,-0.3,-0.1,-0.8}, //LEU
        {-0.5,-0.1,-0.2,-0.4,-0.8,-0.1,-0.3,-0.4,-0.4,-0.6,-0.6, 0.3,-0.4,-0.6,-0.3,-0.4,-0.4,-0.5,-0.4,-0.6,-0.2,-0.2,-0.1,-0.8}, //LYS
        {-0.1,-0.4,-0.2,-0.4,-0.1,-0.1,-0.4,-0.1,-0.3, 0.2, 0.2,-0.4, 0.5, 0.0,-0.3,-0.1, 0.1,-0.3,-0.2, 0.1,-0.2,-0.2,-0.1,-0.8}, //MET
        {-0.1,-0.5,-0.1,-0.4,-0.1,-0.2,-0.4,-0.2,-0.1, 0.0, 0.0,-0.6, 0.0, 0.4,-0.5,-0.1,-0.1, 0.0, 0.2,-0.1,-0.2,-0.3,-0.1,-0.8}, //PHE
        {-0.3,-0.6,-0.3,-0.5,-0.7,-0.3,-0.4,-0.3,-0.6,-0.4,-0.4,-0.3,-0.3,-0.5, 0.9,-0.3,-0.3,-0.5,-0.5,-0.4,-0.4,-0.4,-0.2,-0.8}, //PRO
        { 0.1,-0.4, 0.1,-0.3, 0.1,-0.1,-0.2, 0.1,-0.2,-0.2,-0.2,-0.4,-0.1,-0.1,-0.3, 0.4, 0.1,-0.4,-0.2,-0.1, 0.0,-0.2, 0.0,-0.8}, //SER
        { 0.0,-0.4, 0.0,-0.4, 0.0,-0.2,-0.4,-0.1,-0.2, 0.0, 0.0,-0.4, 0.1,-0.1,-0.3, 0.1, 0.3,-0.5,-0.2, 0.0,-0.1,-0.3, 0.0,-0.8}, //THR
        {-0.4,-0.5,-0.3,-0.6,-0.3, 0.0,-0.4,-0.4,-0.2,-0.3,-0.2,-0.5,-0.3, 0.0,-0.5,-0.4,-0.5, 0.8, 0.0,-0.3,-0.4,-0.2,-0.2,-0.8}, //TRP
        {-0.3,-0.5, 0.1,-0.3,-0.2,-0.1,-0.3,-0.3, 0.1,-0.2,-0.2,-0.4,-0.2, 0.2,-0.5,-0.2,-0.2, 0.0, 0.7,-0.2, 0.0,-0.2,-0.1,-0.8}, //TYR
        { 0.1,-0.5,-0.3,-0.4,-0.1,-0.2,-0.4,-0.1,-0.4, 0.2, 0.1,-0.6, 0.1,-0.1,-0.4,-0.1, 0.0,-0.3,-0.2, 0.3,-0.3,-0.3,-0.1,-0.8}, //VAL
        {-0.2,-0.3, 0.7, 0.4,-0.2, 0.1, 0.1,-0.1, 0.2,-0.3,-0.3,-0.2,-0.2,-0.2,-0.4, 0.0,-0.1,-0.4, 0.0,-0.3, 0.6, 0.0,-0.1,-0.8}, //ASX
        {-0.3,-0.3, 0.1, 0.2,-0.5, 0.4, 0.4,-0.2, 0.0,-0.3,-0.3,-0.2,-0.2,-0.3,-0.4,-0.2,-0.3,-0.2,-0.2,-0.3, 0.0, 0.4,-0.1,-0.8}, //GLX
        { 0.0,-0.4,-0.1,-0.4,-0.1,-0.2,-0.4,-0.1,-0.2, 0.0, 0.0,-0.5, 0.0, 0.0,-0.3,-0.1,-0.1,-0.3,-0.1, 0.0,-0.2,-0.4,-0.1,-0.8}, //XXX
        {-0.8,-0.8,-0.8,-0.8,-0.8,-0.8,-0.8,-0.8,-0.8,-0.8,-0.8,-0.8,-0.8,-0.8,-0.8,-0.8,-0.8,-0.8,-0.8,-0.8,-0.8,-0.8,-0.8, 0.1}  //GAP
      },
      //PHAT_80
      {
//        ALA  ARG  ASN  ASP  CYS  GLN  GLU  GLY  HIS  ILE  LEU  LYS  MET  PHE  PRO  SER  THR  TRP  TYR  VAL  ASX  GLX  XXX  GAP
        { 0.5,-0.6,-0.2,-0.5, 0.0,-0.3,-0.5, 0.2,-0.3,-0.1,-0.1,-0.7,-0.1,-0.2,-0.4, 0.2, 0.1,-0.5,-0.3, 0.1,-0.3,-0.4, 0.0,-1.1}, //ALA
        {-0.6, 1.0,-0.3,-0.7,-0.8,-0.2,-0.6,-0.6,-0.5,-0.7,-0.6,-0.1,-0.6,-0.8,-0.8,-0.6,-0.6,-0.7,-0.6,-0.7,-0.4,-0.4,-0.1,-1.1}, //ARG
        {-0.2,-0.3, 1.1, 0.2,-0.2, 0.2, 0.0,-0.1, 0.4,-0.3,-0.3,-0.2,-0.2,-0.1,-0.4, 0.2, 0.0,-0.4, 0.1,-0.4, 0.8, 0.1,-0.1,-1.1}, //ASN
        {-0.5,-0.7, 0.2, 1.3,-0.7, 0.1, 0.7,-0.2,-0.1,-0.6,-0.6,-0.5,-0.5,-0.5,-0.6,-0.3,-0.5,-0.8,-0.4,-0.5, 0.6, 0.3,-0.1,-1.1}, //ASP
        { 0.0,-0.8,-0.2,-0.7, 0.7,-0.5,-0.7,-0.2,-0.7,-0.3,-0.2,-1.1,-0.2,-0.1,-1.0, 0.1,-0.1,-0.5,-0.2,-0.2,-0.4,-0.6,-0.2,-1.1}, //CYS
        {-0.3,-0.2, 0.2, 0.1,-0.5, 1.0, 0.1,-0.2, 0.2,-0.3,-0.3,-0.1,-0.1,-0.2,-0.4,-0.1,-0.3, 0.1, 0.0,-0.3, 0.1, 0.6,-0.1,-1.1}, //GLN
        {-0.5,-0.6, 0.0, 0.7,-0.7, 0.1, 1.2,-0.3,-0.1,-0.5,-0.6,-0.4,-0.5,-0.6,-0.5,-0.3,-0.5,-0.7,-0.3,-0.5, 0.2, 0.6,-0.1,-1.1}, //GLU
        { 0.2,-0.6,-0.1,-0.2,-0.2,-0.2,-0.3, 0.9,-0.4,-0.2,-0.2,-0.5,-0.1,-0.2,-0.4, 0.2,-0.1,-0.6,-0.3,-0.2,-0.1,-0.3,-0.1,-1.1}, //GLY
        {-0.3,-0.5, 0.4,-0.1,-0.7, 0.2,-0.1,-0.4, 1.1,-0.5,-0.4,-0.6,-0.4,-0.1,-0.7,-0.2,-0.3,-0.3, 0.3,-0.5, 0.3, 0.1,-0.1,-1.1}, //HIS
        {-0.1,-0.7,-0.3,-0.6,-0.3,-0.3,-0.5,-0.2,-0.5, 0.5, 0.2,-0.8, 0.3,-0.1,-0.5,-0.2,-0.1,-0.4,-0.3, 0.3,-0.4,-0.4,-0.1,-1.1}, //ILE
        {-0.1,-0.6,-0.3,-0.6,-0.2,-0.3,-0.6,-0.2,-0.4, 0.2, 0.4,-0.8, 0.2, 0.0,-0.5,-0.2,-0.1,-0.3,-0.2, 0.1,-0.4,-0.4,-0.1,-1.1}, //LEU
        {-0.7,-0.1,-0.2,-0.5,-1.1,-0.1,-0.4,-0.5,-0.6,-0.8,-0.8, 0.5,-0.6,-0.8,-0.5,-0.5,-0.6,-0.8,-0.5,-0.8,-0.3,-0.3,-0.1,-1.1}, //LYS
        {-0.1,-0.6,-0.2,-0.5,-0.2,-0.1,-0.5,-0.1,-0.4, 0.3, 0.2,-0.6, 0.6, 0.0,-0.6,-0.2, 0.0,-0.4,-0.3, 0.1,-0.3,-0.3,-0.1,-1.1}, //MET
        {-0.2,-0.8,-0.1,-0.5,-0.1,-0.2,-0.6,-0.2,-0.1,-0.1, 0.0,-0.8, 0.0, 0.6,-0.6,-0.2,-0.2, 0.0, 0.4,-0.1,-0.2,-0.4,-0.1,-1.1}, //PHE
        {-0.4,-0.8,-0.4,-0.6,-1.0,-0.4,-0.5,-0.4,-0.7,-0.5,-0.5,-0.5,-0.6,-0.6, 1.2,-0.4,-0.4,-0.7,-0.6,-0.5,-0.5,-0.5,-0.2,-1.1}, //PRO
        { 0.2,-0.6, 0.2,-0.3, 0.1,-0.1,-0.3, 0.2,-0.2,-0.2,-0.2,-0.5,-0.2,-0.2,-0.4, 0.6, 0.1,-0.5,-0.2,-0.2, 0.0,-0.2, 0.0,-1.1}, //SER
        { 0.1,-0.6, 0.0,-0.5,-0.1,-0.3,-0.5,-0.1,-0.3,-0.1,-0.1,-0.6, 0.0,-0.2,-0.4, 0.1, 0.4,-0.7,-0.3, 0.0,-0.2,-0.4, 0.0,-1.1}, //THR
        {-0.5,-0.7,-0.4,-0.8,-0.5, 0.1,-0.7,-0.6,-0.3,-0.4,-0.3,-0.8,-0.4, 0.0,-0.7,-0.5,-0.7, 1.2, 0.1,-0.5,-0.5,-0.3,-0.2,-1.1}, //TRP
        {-0.3,-0.6, 0.1,-0.4,-0.2, 0.0,-0.3,-0.3, 0.3,-0.3,-0.2,-0.5,-0.3, 0.4,-0.6,-0.2,-0.3, 0.1, 1.0,-0.3,-0.1,-0.2,-0.1,-1.1}, //TYR
        { 0.1,-0.7,-0.4,-0.5,-0.2,-0.3,-0.5,-0.2,-0.5, 0.3, 0.1,-0.8, 0.1,-0.1,-0.5,-0.2, 0.0,-0.5,-0.3, 0.4,-0.4,-0.4,-0.1,-1.1}, //VAL
        {-0.3,-0.4, 0.8, 0.6,-0.4, 0.1, 0.2,-0.1, 0.3,-0.4,-0.4,-0.3,-0.3,-0.2,-0.5, 0.0,-0.2,-0.5,-0.1,-0.4, 0.8, 0.1,-0.1,-1.1}, //ASX
        {-0.4,-0.4, 0.1, 0.3,-0.6, 0.6, 0.6,-0.3, 0.1,-0.4,-0.4,-0.3,-0.3,-0.4,-0.5,-0.2,-0.4,-0.3,-0.2,-0.4, 0.1, 0.6,-0.1,-1.1}, //GLX
        { 0.0,-0.6,-0.1,-0.4,-0.2,-0.2,-0.4,-0.1,-0.3, 0.0, 0.0,-0.7, 0.0, 0.0,-0.5,-0.1,-0.1,-0.4,-0.2, 0.0,-0.2,-0.5,-0.1,-1.1}, //XXX
        {-1.1,-1.1,-1.1,-1.1,-1.1,-1.1,-1.1,-1.1,-1.1,-1.1,-1.1,-1.1,-1.1,-1.1,-1.1,-1.1,-1.1,-1.1,-1.1,-1.1,-1.1,-1.1,-1.1, 0.1}  //GAP
      },
      //PHAT_75
      {
//        ALA  ARG  ASN  ASP  CYS  GLN  GLU  GLY  HIS  ILE  LEU  LYS  MET  PHE  PRO  SER  THR  TRP  TYR  VAL  ASX  GLX  XXX  GAP
        { 0.5,-0.6,-0.2,-0.5, 0.1,-0.3,-0.5, 0.1,-0.3, 0.0,-0.1,-0.7,-0.1,-0.1,-0.3, 0.2, 0.0,-0.4,-0.3, 0.1,-0.3,-0.4, 0.0,-1.0}, //ALA
        {-0.6, 0.9,-0.3,-0.7,-0.8,-0.2,-0.6,-0.5,-0.4,-0.6,-0.6,-0.1,-0.6,-0.7,-0.7,-0.6,-0.6,-0.7,-0.6,-0.7,-0.4,-0.4,-0.6,-1.0}, //ARG
        {-0.2,-0.3, 1.1, 0.2,-0.2, 0.2, 0.0,-0.1, 0.4,-0.3,-0.3,-0.2,-0.2,-0.1,-0.4, 0.1,-0.1,-0.5, 0.2,-0.3, 0.8, 0.1,-0.1,-1.0}, //ASN
        {-0.5,-0.7, 0.2, 1.2,-0.7, 0.0, 0.6,-0.2,-0.1,-0.5,-0.5,-0.5,-0.5,-0.5,-0.5,-0.4,-0.5,-0.7,-0.4,-0.5, 0.5, 0.3,-0.4,-1.0}, //ASP
        { 0.1,-0.8,-0.2,-0.7, 0.7,-0.5,-0.7,-0.2,-0.7,-0.3,-0.2,-1.0,-0.2, 0.0,-0.8, 0.1,-0.1,-0.4,-0.1,-0.2,-0.4,-0.6,-0.2,-1.0}, //CYS
        {-0.3,-0.2, 0.2, 0.0,-0.5, 0.9, 0.1,-0.2, 0.2,-0.3,-0.3,-0.1,-0.1,-0.2,-0.3,-0.1,-0.3, 0.1, 0.0,-0.3, 0.1, 0.6,-0.2,-1.0}, //GLN
        {-0.5,-0.6, 0.0, 0.6,-0.7, 0.1, 1.2,-0.3,-0.1,-0.5,-0.5,-0.4,-0.5,-0.5,-0.5,-0.3,-0.5,-0.7,-0.2,-0.5, 0.2, 0.6,-0.4,-1.0}, //GLU
        { 0.1,-0.5,-0.1,-0.2,-0.2,-0.2,-0.3, 0.9,-0.4,-0.2,-0.2,-0.5,-0.1,-0.2,-0.3, 0.1,-0.1,-0.5,-0.3,-0.2,-0.1,-0.2,-0.1,-1.0}, //GLY
        {-0.3,-0.4, 0.4,-0.1,-0.7, 0.2,-0.1,-0.4, 1.1,-0.5,-0.4,-0.5,-0.4,-0.2,-0.6,-0.2,-0.4,-0.3, 0.3,-0.5, 0.2, 0.1,-0.3,-1.0}, //HIS
        { 0.0,-0.6,-0.3,-0.5,-0.3,-0.3,-0.5,-0.2,-0.5, 0.5, 0.2,-0.7, 0.3, 0.0,-0.4,-0.2,-0.1,-0.4,-0.3, 0.3,-0.4,-0.4, 0.0,-1.0}, //ILE
        {-0.1,-0.6,-0.3,-0.5,-0.2,-0.3,-0.5,-0.2,-0.4, 0.2, 0.4,-0.7, 0.2, 0.1,-0.5,-0.2,-0.1,-0.3,-0.2, 0.1,-0.3,-0.4, 0.0,-1.0}, //LEU
        {-0.7,-0.1,-0.2,-0.5,-1.0,-0.1,-0.4,-0.5,-0.5,-0.7,-0.7, 0.5,-0.6,-0.7,-0.4,-0.5,-0.6,-0.8,-0.4,-0.8,-0.3,-0.3,-0.6,-1.0}, //LYS
        {-0.1,-0.6,-0.2,-0.5,-0.2,-0.1,-0.5,-0.1,-0.4, 0.3, 0.2,-0.6, 0.6, 0.0,-0.5,-0.2, 0.0,-0.4,-0.2, 0.1,-0.3,-0.3, 0.0,-1.0}, //MET
        {-0.1,-0.7,-0.1,-0.5, 0.0,-0.2,-0.5,-0.2,-0.2, 0.0, 0.1,-0.7, 0.0, 0.6,-0.5,-0.2,-0.2, 0.0, 0.4,-0.1,-0.3,-0.3, 0.0,-1.0}, //PHE
        {-0.3,-0.7,-0.4,-0.5,-0.8,-0.3,-0.5,-0.3,-0.6,-0.4,-0.5,-0.4,-0.5,-0.5, 1.3,-0.3,-0.4,-0.6,-0.5,-0.4,-0.4,-0.4,-0.4,-1.0}, //PRO
        { 0.2,-0.6, 0.1,-0.4, 0.1,-0.1,-0.3, 0.1,-0.2,-0.2,-0.2,-0.5,-0.2,-0.2,-0.3, 0.6, 0.1,-0.5,-0.2,-0.2, 0.0,-0.2,-0.1,-1.0}, //SER
        { 0.0,-0.6,-0.1,-0.5,-0.1,-0.3,-0.5,-0.1,-0.4,-0.1,-0.1,-0.6, 0.0,-0.2,-0.4, 0.1, 0.3,-0.7,-0.3, 0.0,-0.2,-0.4,-0.1,-1.0}, //THR
        {-0.4,-0.7,-0.5,-0.7,-0.4, 0.1,-0.7,-0.5,-0.3,-0.4,-0.3,-0.8,-0.4, 0.0,-0.6,-0.5,-0.7, 1.1, 0.1,-0.4,-0.5,-0.3,-0.3,-1.0}, //TRP
        {-0.3,-0.6, 0.2,-0.4,-0.1, 0.0,-0.2,-0.3, 0.3,-0.3,-0.2,-0.4,-0.2, 0.4,-0.5,-0.2,-0.3, 0.1, 1.1,-0.3, 0.0,-0.1,-0.1,-1.0}, //TYR
        { 0.1,-0.7,-0.3,-0.5,-0.2,-0.3,-0.5,-0.2,-0.5, 0.3, 0.1,-0.8, 0.1,-0.1,-0.4,-0.2, 0.0,-0.4,-0.3, 0.4,-0.4,-0.4, 0.0,-1.0}, //VAL
        {-0.3,-0.4, 0.8, 0.5,-0.4, 0.1, 0.2,-0.1, 0.2,-0.4,-0.3,-0.3,-0.3,-0.3,-0.4, 0.0,-0.2,-0.5, 0.0,-0.4, 0.7, 0.1,-0.2,-1.0}, //ASX
        {-0.4,-0.4, 0.1, 0.3,-0.6, 0.6, 0.6,-0.2, 0.1,-0.4,-0.4,-0.3,-0.3,-0.3,-0.4,-0.2,-0.4,-0.3,-0.1,-0.4, 0.1, 0.6,-0.4,-1.0}, //GLX
        { 0.0,-0.6,-0.1,-0.4,-0.2,-0.2,-0.4,-0.1,-0.3, 0.0, 0.0,-0.6, 0.0, 0.0,-0.4,-0.1,-0.1,-0.3,-0.1, 0.0,-0.2,-0.4,-0.1,-1.0}, //XXX
        {-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0, 0.1}  //GAP
      },
      //PHAT_70
      {
//        ALA  ARG  ASN  ASP  CYS  GLN  GLU  GLY  HIS  ILE  LEU  LYS  MET  PHE  PRO  SER  THR  TRP  TYR  VAL  ASX  GLX  XXX  GAP
        { 0.5,-0.5,-0.1,-0.4, 0.1,-0.2,-0.3, 0.2,-0.3, 0.0,-0.1,-0.5, 0.0,-0.1,-0.2, 0.2, 0.0,-0.3,-0.2, 0.1,-0.2,-0.3, 0.0,-0.9}, //ALA
        {-0.5, 0.9,-0.2,-0.6,-0.7,-0.1,-0.5,-0.4,-0.3,-0.6,-0.5, 0.0,-0.5,-0.6,-0.6,-0.5,-0.6,-0.6,-0.5,-0.6,-0.3,-0.3,-0.5,-0.9}, //ARG
        {-0.1,-0.2, 1.0, 0.2,-0.3, 0.2, 0.1, 0.0, 0.4,-0.3,-0.3,-0.2,-0.2,-0.2,-0.3, 0.2, 0.0,-0.3, 0.0,-0.3, 0.8, 0.1,-0.1,-0.9}, //ASN
        {-0.4,-0.6, 0.2, 1.2,-0.6, 0.0, 0.7,-0.1,-0.1,-0.5,-0.5,-0.4,-0.5,-0.4,-0.4,-0.3,-0.5,-0.5,-0.3,-0.4, 0.5, 0.3,-0.4,-0.9}, //ASP
        { 0.1,-0.7,-0.3,-0.6, 0.7,-0.5,-0.6,-0.2,-0.6,-0.3,-0.2,-0.9,-0.2,-0.1,-0.8, 0.1,-0.2,-0.4,-0.1,-0.1,-0.4,-0.5,-0.2,-0.9}, //CYS
        {-0.2,-0.1, 0.2, 0.0,-0.5, 0.9, 0.2,-0.1, 0.2,-0.2,-0.2,-0.1, 0.0,-0.2,-0.2,-0.1,-0.2, 0.0, 0.0,-0.3, 0.1, 0.6,-0.1,-0.9}, //GLN
        {-0.3,-0.5, 0.1, 0.7,-0.6, 0.2, 1.3,-0.2, 0.0,-0.4,-0.4,-0.4,-0.4,-0.4,-0.4,-0.2,-0.4,-0.5,-0.2,-0.4, 0.2, 0.7,-0.3,-0.9}, //GLU
        { 0.2,-0.4, 0.0,-0.1,-0.2,-0.1,-0.2, 0.9,-0.3,-0.2,-0.2,-0.4,-0.1,-0.1,-0.2, 0.2,-0.1,-0.4,-0.2,-0.2,-0.1,-0.1,-0.1,-0.9}, //GLY
        {-0.3,-0.3, 0.4,-0.1,-0.6, 0.2, 0.0,-0.3, 1.0,-0.4,-0.4,-0.4,-0.4,-0.2,-0.5,-0.2,-0.4,-0.2, 0.4,-0.4, 0.3, 0.1,-0.3,-0.9}, //HIS
        { 0.0,-0.6,-0.3,-0.5,-0.3,-0.2,-0.4,-0.2,-0.4, 0.5, 0.2,-0.6, 0.2, 0.0,-0.4,-0.2,-0.1,-0.3,-0.2, 0.3,-0.3,-0.3, 0.0,-0.9}, //ILE
        {-0.1,-0.5,-0.3,-0.5,-0.2,-0.2,-0.4,-0.2,-0.4, 0.2, 0.3,-0.6, 0.2, 0.0,-0.4,-0.2,-0.2,-0.3,-0.2, 0.1,-0.3,-0.3, 0.0,-0.9}, //LEU
        {-0.5, 0.0,-0.2,-0.4,-0.9,-0.1,-0.4,-0.4,-0.4,-0.6,-0.6, 0.5,-0.5,-0.6,-0.3,-0.4,-0.5,-0.6,-0.4,-0.7,-0.2,-0.2,-0.5,-0.9}, //LYS
        { 0.0,-0.5,-0.2,-0.5,-0.2, 0.0,-0.4,-0.1,-0.4, 0.2, 0.2,-0.5, 0.6, 0.0,-0.4,-0.1, 0.0,-0.3,-0.2, 0.1,-0.3,-0.2, 0.0,-0.9}, //MET
        {-0.1,-0.6,-0.2,-0.4,-0.1,-0.2,-0.4,-0.1,-0.2, 0.0, 0.0,-0.6, 0.0, 0.6,-0.5,-0.1,-0.2, 0.1, 0.4,-0.1,-0.2,-0.3, 0.0,-0.9}, //PHE
        {-0.2,-0.6,-0.3,-0.4,-0.8,-0.2,-0.4,-0.2,-0.5,-0.4,-0.4,-0.3,-0.4,-0.5, 1.2,-0.3,-0.3,-0.5,-0.4,-0.4,-0.3,-0.3,-0.3,-0.9}, //PRO
        { 0.2,-0.5, 0.2,-0.3, 0.1,-0.1,-0.2, 0.2,-0.2,-0.2,-0.2,-0.4,-0.1,-0.1,-0.3, 0.6, 0.1,-0.4,-0.1,-0.1, 0.0,-0.1,-0.1,-0.9}, //SER
        { 0.0,-0.6, 0.0,-0.5,-0.2,-0.2,-0.4,-0.1,-0.4,-0.1,-0.2,-0.5, 0.0,-0.2,-0.3, 0.1, 0.2,-0.6,-0.3,-0.1,-0.2,-0.3,-0.1,-0.9}, //THR
        {-0.3,-0.6,-0.3,-0.5,-0.4, 0.0,-0.5,-0.4,-0.2,-0.3,-0.3,-0.6,-0.3, 0.1,-0.5,-0.4,-0.6, 1.1, 0.1,-0.3,-0.4,-0.2,-0.3,-0.9}, //TRP
        {-0.2,-0.5, 0.0,-0.3,-0.1, 0.0,-0.2,-0.2, 0.4,-0.2,-0.2,-0.4,-0.2, 0.4,-0.4,-0.1,-0.3, 0.1, 1.0,-0.3,-0.1,-0.1,-0.1,-0.9}, //TYR
        { 0.1,-0.6,-0.3,-0.4,-0.1,-0.3,-0.4,-0.2,-0.4, 0.3, 0.1,-0.7, 0.1,-0.1,-0.4,-0.1,-0.1,-0.3,-0.3, 0.3,-0.3,-0.3, 0.0,-0.9}, //VAL
        {-0.2,-0.3, 0.8, 0.5,-0.4, 0.1, 0.2,-0.1, 0.3,-0.3,-0.3,-0.2,-0.3,-0.2,-0.3, 0.0,-0.2,-0.4,-0.1,-0.3, 0.7, 0.1,-0.2,-0.9}, //ASX
        {-0.3,-0.3, 0.1, 0.3,-0.5, 0.6, 0.7,-0.1, 0.1,-0.3,-0.3,-0.2,-0.2,-0.3,-0.3,-0.1,-0.3,-0.2,-0.1,-0.3, 0.1, 0.6,-0.3,-0.9}, //GLX
        { 0.0,-0.5,-0.1,-0.4,-0.2,-0.1,-0.3,-0.1,-0.3, 0.0, 0.0,-0.5, 0.0, 0.0,-0.3,-0.1,-0.1,-0.3,-0.1, 0.0,-0.2,-0.3,-0.1,-0.9}, //XXX
        {-0.9,-0.9,-0.9,-0.9,-0.9,-0.9,-0.9,-0.9,-0.9,-0.9,-0.9,-0.9,-0.9,-0.9,-0.9,-0.9,-0.9,-0.9,-0.9,-0.9,-0.9,-0.9,-0.9, 0.1}  //GAP
      }
    };

  //////////////////////////////////
  // construction and destruction //
  //////////////////////////////////

    //! @brief constructor from a PHAT table
    //! @param PHAT_TABLE TableType to be used
    AAAssignmentPHAT::AAAssignmentPHAT( const TableType &PHAT_TABLE) :
      m_PHATTable( PHAT_TABLE)
    {
    }

    //! @brief virtual copy constructor
    //! @return pointer to a new AAAssignmentPHAT copied from this one
    AAAssignmentPHAT *AAAssignmentPHAT::Clone() const
    {
      return new AAAssignmentPHAT( *this);
    }

  /////////////////
  // data access //
  /////////////////

    //! @brief returns class name
    //! @return the class name as const ref std::string
    const std::string &AAAssignmentPHAT::GetClassIdentifier() const
    {
      return GetStaticClassName( *this);
    }

    //! @brief returns the requested PHAT table as a matrix
    //! @param PHAT_TABLE requested Phat table name
    //! @return the requested PHAT table as a matrix
    linal::Matrix< double> AAAssignmentPHAT::GetPHATMatrix( const TableType &PHAT_TABLE)
    {
      // construct the matrix and return it
      return linal::Matrix< double>
      (
        biol::AATypes::s_NumberStandardAATypes + 4,
        biol::AATypes::s_NumberStandardAATypes + 4,
        &s_PHATTable[ PHAT_TABLE][ 0][ 0]
      );
    }

  ////////////////
  // operations //
  ////////////////

    //! @brief return the mutation probability for two AAs given a table
    //! @param PHAT_TABLE TableType to be used
    //! @param AA_TYPE_A first AAType of interest
    //! @param AA_TYPE_B second AAType of interest
    //! @return the mutation probability for two AAs given a table
    double AAAssignmentPHAT::Probability
    (
      const TableType &PHAT_TABLE,
      const biol::AAType &AA_TYPE_A,
      const biol::AAType &AA_TYPE_B
    )
    {
      return pow( 10, s_PHATTable[ PHAT_TABLE][ AA_TYPE_A][ AA_TYPE_B]) / double( 20);
    }

  ///////////////
  // operators //
  ///////////////

    //! @brief operator that calculates the score between two assigned members
    //! @param MEMBER_A amino acid A that is compared
    //! @param MEMBER_B amino acid A that is compared
    //! @return value from the m_PHATTable for this combination of amino acids
    double AAAssignmentPHAT::operator()( const biol::AABase &MEMBER_A, const biol::AABase &MEMBER_B) const
    {
      static const size_t matrix_dim( biol::AATypes::s_NumberStandardAATypes + 4);

      // check that the types are valid, if not, return undefined
      if( MEMBER_A.GetType() >= matrix_dim || MEMBER_B.GetType() >= matrix_dim)
      {
        return util::GetUndefined< double>();
      }

      return s_PHATTable[ m_PHATTable][ MEMBER_A.GetType()][ MEMBER_B.GetType()];
    }

  //////////////////////
  // input and output //
  //////////////////////

    //! @brief write to ostream
    //! @param OSTREAM is the output stream
    //! @param INDENT indentation
    //! @return returns the output stream
    std::ostream &AAAssignmentPHAT::Write( std::ostream &OSTREAM, const size_t INDENT) const
    {
      // write members
      io::Serialize::Write( m_PHATTable, OSTREAM, INDENT);

      // end
      return OSTREAM;
    }

    //! @brief read from istream
    //! @param ISTREAM is the input stream
    //! @return returns the input stream
    std::istream &AAAssignmentPHAT::Read( std::istream &ISTREAM)
    {
      // read members
      io::Serialize::Read( m_PHATTable, ISTREAM);

      // end
      return ISTREAM;
    }

  } // namespace score
} // namespace bcl
