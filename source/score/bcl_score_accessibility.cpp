// (c) Copyright BCL @ Vanderbilt University 2014
// (c) BCL Homepage: http://www.meilerlab.org/bclcommons
// (c) BCL Code Repository: https://github.com/BCLCommons/bcl
// (c)
// (c) The BioChemical Library (BCL) was originally developed by contributing members of the Meiler Lab @ Vanderbilt University.
// (c)
// (c) The BCL is now made available as an open-source software package distributed under the permissive MIT license,
// (c) developed and maintained by the Meiler Lab at Vanderbilt University and contributing members of the BCL Commons.
// (c)
// (c) External code contributions to the BCL are welcome. Please visit the BCL Commons GitHub page for information on how you can contribute.
// (c)
// (c) This file is part of the BCL software suite and is made available under the MIT license.
// (c)

// initialize the static initialization fiasco finder, if macro ENABLE_FIASCO_FINDER is defined
#include "util/bcl_util_static_initialization_fiasco_finder.h"
BCL_StaticInitializationFiascoFinder

// include header of this class
#include "assemble/bcl_assemble_protein_model.h"
#include "restraint/bcl_restraint_accessibility_profile.h"
#include "restraint/bcl_restraint_accessibility_profile_assignment.h"
#include "score/bcl_score_accessibility.h"

// includes from bcl - sorted alphabetically

// external includes - sorted alphabetically

namespace bcl
{
  namespace score
  {

  //////////
  // data //
  //////////

    //! single instance of that class
    const util::SiPtr< const util::ObjectInterface> Accessibility::s_Instance
    (
      GetObjectInstances().AddInstance( new Accessibility())
    );

    //! @brief returns default scheme
    //! @return default scheme
    const std::string &Accessibility::GetDefaultScheme()
    {
      // static string
      static const std::string s_default_scheme( "access");

      // end
      return s_default_scheme;
    }

  //////////////////////////////////
  // construction and destruction //
  //////////////////////////////////

    //! @brief default constructor
    Accessibility::Accessibility() :
      m_ScoringFunction(),
      m_Restraints(),
      m_Scheme( GetDefaultScheme())
    {
    }

    //! @brief construct from a scoring function and scheme
    //! @param SCORING_FUNCTION scoring function to be used
      //! @param RESTRAINTS the actual restraints
    //! @param SCHEME scheme to be used
    Accessibility::Accessibility
    (
      const util::ShPtr< math::FunctionInterfaceSerializable< restraint::AccessibilityProfileAssignment, double> > &SCORING_FUNCTION,
      const util::ShPtr< restraint::AccessibilityProfile> RESTRAINTS,
      const std::string SCHEME
    ) :
      m_ScoringFunction( SCORING_FUNCTION),
      m_Restraints( RESTRAINTS),
      m_Scheme( SCHEME)
    {
    }

    //! @brief Clone function
    //! @return pointer to new Accessibility
    Accessibility *Accessibility::Clone() const
    {
      return new Accessibility( *this);
    }

  /////////////////
  // data access //
  /////////////////

    //! @brief returns class name
    //! @return the class name as const ref std::string
    const std::string &Accessibility::GetClassIdentifier() const
    {
      return GetStaticClassName( *this);
    }

  ////////////////
  // operations //
  ////////////////

    //! @brief () operator scores the protein model and associated restraints using the member scoring function
    //! @param PROTEIN_MODEL protein model to be scored
    //! @return distance restraint score
    double Accessibility::operator()( const assemble::ProteinModel &PROTEIN_MODEL) const
    {
      // if no restraints were found
      if( !m_Restraints.IsDefined())
      {
        // return a score of 0
        BCL_MessageDbg( "No accessibility restraints found, not scoring the model " + GetScheme());

        return 0;
      }

      const restraint::AccessibilityProfileAssignment assignment( m_Restraints->GenerateAssignment( PROTEIN_MODEL));

      // score the assignment generated by the restraint multiplied by the number of data points in sses
      const double score( m_ScoringFunction->operator()( assignment) * double( assignment.GetTotalNumberOfSSEAssignments()));

      BCL_MessageDbg( "score " + util::Format()( score));

      // return score
      return score;
    }

  ///////////////
  // operators //
  ///////////////

  //////////////////////
  // input and output //
  //////////////////////

    //! @brief read from std::istream
    //! @param ISTREAM input stream
    //! @return istream which was read from
    std::istream &Accessibility::Read( std::istream &ISTREAM)
    {
      // read members

      // return the stream
      return ISTREAM;
    }

    //! @brief write to std::ostream
    //! @param OSTREAM output stream to write to
    //! @param INDENT number of indentations
    //! @return outputstream which was written to
    std::ostream &Accessibility::Write( std::ostream &OSTREAM, const size_t INDENT) const
    {
      // write members

      // return the stream
      return OSTREAM;
    }

  //////////////////////
  // helper functions //
  //////////////////////

    //! @brief write detailed scheme and values to OSTREAM
    //! @param PROTEIN_MODEL Argument to be used to evaluate the function
    //! @param OSTREAM std::ostream to be written to
    //! @return std::ostream which was written to
    std::ostream &Accessibility::WriteDetailedSchemeAndValues
    (
      const assemble::ProteinModel &PROTEIN_MODEL,
      std::ostream &OSTREAM
    ) const
    {
      // if no restraints were found
      if( !m_Restraints.IsDefined())
      {
        // return a score of 0
        BCL_MessageDbg( "No accessibility restraints found, not scoring the model " + GetScheme());

        return OSTREAM;
      }

      const restraint::AccessibilityProfileAssignment assignment( m_Restraints->GenerateAssignment( PROTEIN_MODEL));

      // score the assignment generated by the restraint
      m_ScoringFunction->WriteDetailedSchemeAndValues( assignment, OSTREAM);

      return OSTREAM;
    }

  } // namespace score

} // namespace bcl
