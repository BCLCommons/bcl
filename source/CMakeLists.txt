CMAKE_MINIMUM_REQUIRED( VERSION 2.8.8)

SET( LIBRARY_NAME bcl)
SET( LIBRARY_OBJECTS ${LIBRARY_NAME}-objects)
SET( BCL_LIBRARY_NAME ${LIBRARY_NAME}-shared)
PROJECT( lib${LIBRARY_NAME})

INCLUDE_DIRECTORIES( "${CMAKE_CURRENT_SOURCE_DIR}/../include/")

# prepare version file
CONFIGURE_FILE( ${CMAKE_CURRENT_SOURCE_DIR}/bcl_version.cpp.in ${CMAKE_CURRENT_SOURCE_DIR}/bcl_version.cpp)

# source files for bcl
SET(
  LIBRARY_SOURCES
  ${CMAKE_CURRENT_SOURCE_DIR}/bcl.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/bcl_version.cpp
)
MACRO_CHECK_CMAKE_DIRECTORY_LIST( ${CMAKE_CURRENT_SOURCE_DIR} "${LIBRARY_SOURCES}")

ADD_LIBRARY( ${LIBRARY_OBJECTS} OBJECT ${LIBRARY_SOURCES})

# all namespaces
SET(
	BCL_LIBRARY_NAMESPACES
	align
	app
	assemble
	biol
	bzip2
	chemistry
	cluster
	command
	contact
	coord
	crypt
	density
	descriptor
	find
	fold
	function
	graph
	gzip
	iterate
	io
	linal
	math
	mc
	model
	nmr
	opencl
	openblas
	opti
	pdb
	pthread
	quality
	random
	restraint
	sched
	score
	scorestat
	sdf
	signal
	smiles
	sspred
	storage
	type
	util
)

# include CMakeLists.txt for each namespace, collect objects and namespace archives
FOREACH( NAMESPACE ${BCL_LIBRARY_NAMESPACES})
	MACRO_ADD_SUBDIRECTORY( ${NAMESPACE})
	IF( SUBDIRECTORY_LIBRARY_NAME)
		IF( LINK_NAMESPACE_ARCHIVES)
			LIST(
				APPEND BCL_SOURCE_LIBRARIES
				${BCL_LINK_WHOLE_ARCHIVE} ${SUBDIRECTORY_LIBRARY_NAME} ${BCL_LINK_NO_WHOLE_ARCHIVE}
			)
		ELSE()
			LIST( APPEND BCL_SOURCE_OBJECTS $<TARGET_OBJECTS:${SUBDIRECTORY_LIBRARY_OBJECTS}>)
		ENDIF()
	ENDIF()
	unset( SUBDIRECTORY_LIBRARY_NAME)
	unset( SUBDIRECTORY_LIBRARY_OBJECTS)
ENDFOREACH()

MESSAGE( STATUS "external link libraries: " ${EXTERN_LINK_LIBRARIES})

# create a shared bcl library (.so, .dll)
IF( LINK_NAMESPACE_ARCHIVES)
	MACRO_ADD_LIBRARY(
		${BCL_LIBRARY_NAME}
		SHARED
		$<TARGET_OBJECTS:${LIBRARY_OBJECTS}>
	)
	TARGET_LINK_LIBRARIES( ${BCL_LIBRARY_NAME} ${BCL_SOURCE_LIBRARIES})
ELSE( LINK_NAMESPACE_ARCHIVES)
	MACRO_ADD_LIBRARY(
		${BCL_LIBRARY_NAME}
		SHARED
		$<TARGET_OBJECTS:${LIBRARY_OBJECTS}>
		${BCL_SOURCE_OBJECTS}
	)
ENDIF( LINK_NAMESPACE_ARCHIVES)

ADD_DEPENDENCIES( ${BCL_TARGET_SHARED} ${BCL_LIBRARY_NAME})
TARGET_LINK_LIBRARIES( ${BCL_LIBRARY_NAME} ${EXTERN_LINK_LIBRARIES})
SET_TARGET_PROPERTIES(
	${BCL_LIBRARY_NAME}
	PROPERTIES
	VERSION ${BCL_VERSION}
	SOVERSION ${BCL_VERSION}
	OUTPUT_NAME ${LIBRARY_NAME}
)

INSTALL(
	TARGETS ${BCL_LIBRARY_NAME}
	RUNTIME DESTINATION bin COMPONENT DynamicLibrary
	LIBRARY DESTINATION lib COMPONENT DynamicLibrary
	COMPONENT DynamicLibrary
)
CPACK_ADD_COMPONENT(
	DynamicLibrary
	DISPLAY_NAME "bcl library"
	DESCRIPTION "bcl library necessary to run dynamically linked applications"
	GROUP BclDynamicApplications
)

IF( LINK_NAMESPACE_ARCHIVES)
	MACRO_ADD_LIBRARY( ${LIBRARY_NAME} STATIC $<TARGET_OBJECTS:${LIBRARY_OBJECTS}>)
	LIST(
		APPEND BCL_SOURCE_LIBRARIES
		${BCL_LINK_WHOLE_ARCHIVE} ${LIBRARY_NAME} ${BCL_LINK_NO_WHOLE_ARCHIVE}
	)
ELSE( LINK_NAMESPACE_ARCHIVES)
	LIST( APPEND BCL_SOURCE_OBJECTS $<TARGET_OBJECTS:${LIBRARY_OBJECTS}>)
ENDIF( LINK_NAMESPACE_ARCHIVES)

SET( BCL_LIBRARY_NAME ${BCL_LIBRARY_NAME} PARENT_SCOPE)
SET( BCL_SOURCE_OBJECTS ${BCL_SOURCE_OBJECTS} PARENT_SCOPE)
SET( BCL_SOURCE_LIBRARIES ${BCL_SOURCE_LIBRARIES} PARENT_SCOPE)
